     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Exercise 8: A list of doublewords is given. Obtain the list made out of the low bytes of the high words of each doubleword from the given list with the property that these bytes are palindromes in base 10.
     3                                  
     4                                  
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  extern printf
    17                                  import printf msvcrt.dll
    18                                                            
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 785634124D3C2C1A76-         s dd 12345678h, 1A2C3C4Dh, 98FCDC76h
    21 00000009 DCFC98             
    22                                      lens equ ($ - s) / 4
    23 0000000C 25686878200D0A00            fmt db "%hhx ", 0xd, 0xa, 0x0
    24 00000014 00                          current_inverse db 0
    25 00000015 00<rept>                    ans times lens db 0
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 FC                              cld
    32 00000001 BE[00000000]                    mov esi, s
    33 00000006 BF[15000000]                    mov edi, ans
    34                                          
    35 0000000B B903000000                      mov ecx, lens
    36                                          
    37 00000010 B30A                            mov bl, 10 ;base
    38 00000012 E337                            jecxz doneParseString
    39                                          parseString:
    40 00000014 AD                                  lodsd
    41 00000015 C1E810                              shr eax, 16
    42 00000018 25FF000000                          and eax, 0x000000ff
    43                                              
    44 0000001D C605[14000000]00                    mov byte[current_inverse], 0
    45 00000024 50                                  push eax
    46                                              invertAL:
    47 00000025 B400                                    mov ah, 0
    48 00000027 F6F3                                    div bl
    49 00000029 88E7                                    mov bh, ah
    50                                                  
    51 0000002B 50                                      push eax
    52                                                  
    53 0000002C A0[14000000]                            mov al, byte[current_inverse]
    54 00000031 F6E3                                    mul bl
    55 00000033 00F8                                    add al, bh
    56 00000035 A2[14000000]                            mov byte[current_inverse], al
    57                                                  
    58 0000003A 58                                      pop eax
    59                                                  
    60 0000003B 3C00                                    cmp al, 0
    61 0000003D 75E6                                jne invertAL
    62 0000003F 58                                  pop eax
    63 00000040 3A05[14000000]                      cmp al, byte[current_inverse]
    64 00000046 7501                                jne notPalindrome
    65 00000048 AA                                  stosb
    66                                              notPalindrome:
    67                                              
    68 00000049 E2C9                            loop parseString
    69                                          doneParseString:   
    70                                            
    71 0000004B 89F8                            mov eax, edi
    72 0000004D 2D[15000000]                    sub eax, ans
    73                                          
    74 00000052 89C1                            mov ecx, eax
    75 00000054 BE[15000000]                    mov esi, ans
    76 00000059 83F900                          cmp ecx, 0
    77 0000005C 7417                            jz endPrintLoop
    78                                          printLoop:
    79 0000005E 51                                  push ecx
    80 0000005F AC                                  lodsb
    81 00000060 0FB6C0                              movzx eax, al
    82 00000063 50                                  push eax
    83 00000064 68[0C000000]                        push fmt
    84 00000069 FF15[00000000]                      call [printf]
    85 0000006F 83C408                              add esp, 8
    86 00000072 59                                  pop ecx
    87 00000073 E2E9                            loop printLoop
    88                                          endPrintLoop:
    89                                          
    90 00000075 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    91 00000077 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
