     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Exercise 8: A character string S is given. Obtain the string D that contains all capital letters of the string S.
     3                                  
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  extern printf
    16                                  import printf msvcrt.dll
    17                                                            
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 614162423225784D            s db 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'
    21                                      lenS equ $ - s
    22 00000008 00<rept>                    d times lenS db 0
    23 00000010 256300                      fmtChar db "%c",0x0
    24 00000013 25640D0A                    fmtDword db "%d",0xd,0xa
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                      
    31 00000000 B908000000                      mov ecx, lenS
    32 00000005 BE[00000000]                    mov esi, s
    33 0000000A BF[08000000]                    mov edi, d
    34                                          
    35 0000000F E30D                            jecxz doneReadLoop
    36                                          
    37 00000011 FC                              cld
    38                                          readLoop:
    39 00000012 AC                                  lodsb
    40                                              
    41 00000013 3C41                                cmp al, 'A'
    42 00000015 7205                                jb notUppercase
    43 00000017 3C5A                                cmp al, 'Z'
    44 00000019 7701                                ja notUppercase
    45                                              
    46 0000001B AA                                  stosb
    47                                              notUppercase:
    48 0000001C E2F4                                loop readLoop
    49                                          doneReadLoop:
    50                                          
    51 0000001E 89F8                            mov eax, edi
    52 00000020 2D[08000000]                    sub eax, d
    53                                          
    54 00000025 50                              push eax
    55 00000026 68[13000000]                    push fmtDword
    56 0000002B FF15[00000000]                  call [printf]
    57 00000031 83C408                          add esp, 8
    58                                          
    59 00000034 89C1                            mov ecx, eax
    60 00000036 B800000000                      mov eax, 0
    61                                          
    62 0000003B BE[08000000]                    mov esi, d
    63 00000040 E314                            jecxz donePrintLoop
    64                                          printLoop:
    65 00000042 51                                  push ecx
    66 00000043 AC                                  lodsb
    67 00000044 50                                  push eax
    68 00000045 68[10000000]                        push fmtChar
    69 0000004A FF15[00000000]                      call [printf]
    70 00000050 83C408                              add esp, 8
    71 00000053 59                                  pop ecx
    72 00000054 E2EC                                loop printLoop
    73                                          donePrintLoop:
    74                                          
    75                                          
    76 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
