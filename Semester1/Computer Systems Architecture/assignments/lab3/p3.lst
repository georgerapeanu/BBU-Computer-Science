     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Additions, subtactions - signed representation
     3                                  ;Exercise 8: (b+c+d)-(a+a) 
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  extern printf
    16                                  import printf msvcrt.dll
    17                                                            
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 04                          a db 4
    21 00000001 0300                        b dw 3
    22 00000003 02000000                    c dd 2
    23 00000007 0100000000000000            d dq 1
    24 0000000F 256C6C640D0A                fmt db "%lld",0xd,0xa
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                      
    31                                          
    32 00000000 B800000000                      mov eax, 0
    33 00000005 BA00000000                      mov edx, 0
    34                                          
    35 0000000A 0FBF1D[01000000]                movsx ebx, word[b]
    36 00000011 01D8                            add eax, ebx
    37 00000013 83D200                          adc edx, 0
    38                                          
    39 00000016 0305[03000000]                  add eax, dword[c]
    40 0000001C 83D200                          adc edx, 0
    41                                          
    42 0000001F 0305[07000000]                  add eax, dword[d]
    43 00000025 1315[0B000000]                  adc edx, dword[d + 4]
    44                                          
    45 0000002B 0FBE1D[00000000]                movsx ebx, byte[a]
    46 00000032 29D8                            sub eax, ebx
    47 00000034 83DA00                          sbb edx, 0
    48                                          
    49 00000037 0FBE1D[00000000]                movsx ebx, byte[a]
    50 0000003E 29D8                            sub eax, ebx
    51 00000040 83DA00                          sbb edx, 0
    52                                          
    53 00000043 52                              push edx
    54 00000044 50                              push eax
    55 00000045 68[0F000000]                    push fmt
    56 0000004A FF15[00000000]                  call [printf]
    57 00000050 83C40C                          add esp,12
    58                                          
    59 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
