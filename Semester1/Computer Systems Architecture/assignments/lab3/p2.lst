     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Additions, subtactions - unsigned representation
     3                                  ;Exercise 22: (d+c) - (c+b) - (b+a) 
     4                                  
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  extern printf
    17                                  import printf msvcrt.dll
    18                                                            
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 01                          a db 1
    22 00000001 0200                        b dw 2
    23 00000003 03000000                    c dd 3
    24 00000007 0400000000000000            d dq 4
    25 0000000F 256C6C780D0A                fmt db "%llx",0xd,0xa
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31                                      
    32 00000000 31C0                            xor eax,eax
    33                                  
    34 00000002 A1[07000000]                    mov eax, dword[d]
    35 00000007 8B15[0B000000]                  mov edx, dword[d + 4]
    36                                          
    37 0000000D 0305[03000000]                  add eax, dword[c]
    38 00000013 83D200                          adc edx, 0
    39                                          
    40 00000016 2B05[03000000]                  sub eax, dword[c]
    41 0000001C 83DA00                          sbb edx, 0
    42                                          
    43 0000001F 0FB71D[01000000]                movzx ebx, word[b]
    44 00000026 29D8                            sub eax, ebx
    45 00000028 83DA00                          sbb edx, 0
    46                                          
    47 0000002B 0FB71D[01000000]                movzx ebx, word[b]
    48 00000032 29D8                            sub eax, ebx
    49 00000034 83DA00                          sbb edx, 0
    50                                  
    51 00000037 0FB61D[00000000]                movzx ebx, byte[a]
    52 0000003E 29D8                            sub eax, ebx
    53 00000040 83DA00                          sbb edx, 0
    54                                          
    55 00000043 52                              push edx
    56 00000044 50                              push eax
    57 00000045 68[0F000000]                    push fmt
    58 0000004A FF15[00000000]                  call [printf]
    59 00000050 83C40C                          add esp,12
    60                                          
    61 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
