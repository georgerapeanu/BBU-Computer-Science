     1                                  ;Problem 23: A file name and a hexadecimal number (on 16 bits) are given. Create a file with the given name and write each nibble composing the hexadecimal number on a different line to file.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit, fopen, fclose, scanf, fprintf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 00000000                    fd dd 0
    18 00000004 <res 00000064>              fileName resb 100
    19 00000068 0000                        number dw 0
    20 0000006A 25732025687800              readInputFmt db "%s %hx", 0x0
    21 00000071 25630A00                    printHexaNibbleFmt db "%c", 0xa, 0x0
    22 00000075 303132333435363738-         lookupTable db "0123456789abcdef",0x0
    22 0000007E 3961626364656600   
    23 00000086 7700                        writeMode db "w",0x0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          
    29 00000000 68[68000000]                    push number
    30 00000005 68[04000000]                    push fileName
    31 0000000A 68[6A000000]                    push readInputFmt
    32 0000000F FF15[00000000]                  call [scanf]
    33 00000015 83C40C                          add esp, 12
    34                                          
    35 00000018 68[86000000]                    push writeMode
    36 0000001D 68[04000000]                    push fileName
    37 00000022 FF15[00000000]                  call [fopen]
    38 00000028 83C408                          add esp, 8
    39 0000002B A3[00000000]                    mov dword[fd], eax
    40                                          
    41 00000030 B904000000                      mov ecx, 4
    42                                          printNibblesLoop:
    43 00000035 51                                  push ecx
    44 00000036 66A1[68000000]                      mov ax, word[number]
    45 0000003C 662500F0                            and ax, 0xf000
    46 00000040 66C1E80C                            shr ax, 12
    47 00000044 0FB7C0                              movzx eax, ax
    48 00000047 0FB680[75000000]                    movzx eax, byte[lookupTable + eax]
    49 0000004E 50                                  push eax
    50 0000004F 68[71000000]                        push printHexaNibbleFmt
    51 00000054 FF35[00000000]                      push dword[fd]
    52 0000005A FF15[00000000]                      call [fprintf]
    53 00000060 83C40C                              add esp, 12
    54 00000063 66C125[68000000]04                  shl word[number], 4
    55 0000006B 59                                  pop ecx
    56 0000006C E2C7                                loop printNibblesLoop
    57                                          donePrintNibbleLoop:
    58                                          
    59 0000006E FF35[00000000]                  push dword[fd]
    60 00000074 FF15[00000000]                  call [fclose]
    61 0000007A 83C404                          add esp, 4
    62                                          
    63                                      
    64 0000007D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000007F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
