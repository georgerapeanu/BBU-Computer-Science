     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Multiplications, divisions - signed interpretation
     3                                  ;Exercise 8:  1/a+200*b-c/(d+1)+x/a-e; a,b-word; c,d-byte; e-doubleword; x-qword
     4                                  
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  extern printf
    17                                  import printf msvcrt.dll
    18                                                            
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 0100                        a dw 1
    22 00000002 FEFF                        b dw -2
    23 00000004 03                          c db 3
    24 00000005 04                          d db 4
    25 00000006 05000000                    e dd 5
    26 0000000A 0600000000000000            x dq 6
    27 00000012 0000000000000000            result dq 0
    28 0000001A 256C6C780D0A                fmt db "%llx",0xd,0xa
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34                                          
    35 00000000 66BA0000                        mov dx, 0
    36 00000004 66B80100                        mov ax, 1
    37 00000008 668B1D[00000000]                mov bx, word[a]
    38                                          
    39 0000000F 66F7FB                          idiv bx
    40                                          
    41 00000012 0FBFC0                          movsx eax,ax
    42 00000015 99                              cdq
    43 00000016 0105[12000000]                  add dword[result], eax
    44 0000001C 1115[16000000]                  adc dword[result + 4], edx
    45                                          
    46 00000022 66A1[02000000]                  mov ax, word[b]
    47 00000028 66BBC800                        mov bx, word 200
    48 0000002C 66F7EB                          imul bx
    49 0000002F 6652                            push dx
    50 00000031 6650                            push ax
    51 00000033 58                              pop eax
    52 00000034 99                              cdq
    53 00000035 0105[12000000]                  add dword[result], eax
    54 0000003B 1115[16000000]                  adc dword[result + 4], edx
    55                                          
    56 00000041 660FBE1D[05000000]              movsx bx, byte[d]
    57 00000049 6683C301                        add bx, 1
    58 0000004D 660FBE05[04000000]              movsx ax, byte[c]
    59 00000055 66BA0000                        mov dx, 0
    60 00000059 66F7FB                          idiv bx
    61 0000005C 0FBFC0                          movsx eax, ax
    62 0000005F 99                              cdq
    63 00000060 2905[12000000]                  sub dword[result], eax
    64 00000066 1915[16000000]                  sbb dword[result + 4], edx
    65                                          
    66 0000006C A1[0A000000]                    mov eax, dword[x]
    67 00000071 8B15[0E000000]                  mov edx, dword[x + 4]
    68 00000077 0FBF1D[00000000]                movsx ebx, word[a]
    69 0000007E F7FB                            idiv ebx
    70 00000080 99                              cdq
    71 00000081 0105[12000000]                  add dword[result], eax
    72 00000087 1115[16000000]                  adc dword[result + 4], edx
    73 0000008D 99                              cdq
    74 0000008E A1[06000000]                    mov eax, dword[e]
    75 00000093 2905[12000000]                  sub dword[result], eax
    76 00000099 1915[16000000]                  sbb dword[result + 4], edx
    77                                          
    78 0000009F FF35[16000000]                  push dword[result + 4]
    79 000000A5 FF35[12000000]                  push dword[result]
    80 000000AB 68[1A000000]                    push fmt
    81 000000B0 FF15[00000000]                  call [printf]
    82 000000B6 83C40C                          add esp,12
    83                                          
    84 000000B9 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    85 000000BB FF15[00000000]                  call    [exit]       ; call exit to terminate the program
