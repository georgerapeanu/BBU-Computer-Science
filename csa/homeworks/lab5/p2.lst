     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Exercise 22: Two byte strings S1 and S2 of the same length are given. Obtain the string D where each element contains the minimum of the corresponding elements from S1 and S2. 
     3                                  
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  extern printf
    16                                  import printf msvcrt.dll
    17                                                            
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20                                      
    21 00000000 010306020307                s1 db 1, 3, 6, 2, 3, 7
    22 00000006 060308010205                s2 db 6, 3, 8, 1, 2, 5
    23                                      len equ $ - s2
    24 0000000C 00<rept>                    d times len db 0
    25                                      
    26 00000012 256868782000                fmtByte db "%hhx ",0x0
    27 00000018 25640D0A00                  fmtDword db "%d",0xd,0xa,0x0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33                                          
    34 00000000 B900000000                      mov ecx, 0
    35                                          
    36 00000005 83F906                          cmp ecx, len
    37 00000008 7320                            jae doneReadLoop
    38                                          readLoop:
    39 0000000A 8A81[00000000]                      mov al, byte[s1 + ecx]
    40 00000010 3A81[06000000]                      cmp al, byte[s2 + ecx]
    41 00000016 7606                                jbe doneMinimum
    42 00000018 8A81[06000000]                      mov al, byte[s2 + ecx]
    43                                              doneMinimum:
    44 0000001E 8881[0C000000]                      mov byte[d + ecx], al
    45 00000024 41                                  inc ecx
    46 00000025 83F906                              cmp ecx, len
    47 00000028 72E0                                jb readLoop
    48                                          doneReadLoop:
    49                                          
    50 0000002A 6A06                            push len
    51 0000002C 68[18000000]                    push fmtDword
    52 00000031 FF15[00000000]                  call [printf]
    53 00000037 83C408                          add esp, 8
    54                                          
    55 0000003A B906000000                      mov ecx, len
    56                                          
    57 0000003F BE[0C000000]                    mov esi, d
    58 00000044 E314                            jecxz donePrintLoop
    59                                          printLoop:
    60 00000046 51                                  push ecx
    61 00000047 AC                                  lodsb
    62 00000048 50                                  push eax
    63 00000049 68[12000000]                        push fmtByte
    64 0000004E FF15[00000000]                      call [printf]
    65 00000054 83C408                              add esp, 8
    66 00000057 59                                  pop ecx
    67 00000058 E2EC                                loop printLoop
    68                                          donePrintLoop:
    69                                          
    70 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
