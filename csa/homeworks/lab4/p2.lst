     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Exercise 22:
     3                                  ;Given the doubleword A and the word B, compute the word C as follows:
     4                                  ;
     5                                  ;    the bits 0-4 of C are the invert of the bits 20-24 of A
     6                                  ;    the bits 5-8 of C have the value 1
     7                                  ;    the bits 9-12 of C are the same as the bits 12-15 of B
     8                                  ;    the bits 13-15 of C are the same as the bits 7-9 of A
     9                                  
    10                                  
    11                                  bits 32 ; assembling for the 32 bits architecture
    12                                  
    13                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    14                                  global start        
    15                                  
    16                                  ; declare external functions needed by our program
    17                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    18                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    19                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    20                                  
    21                                  extern printf
    22                                  import printf msvcrt.dll
    23                                                            
    24                                  ; our data is declared here (the variables needed by our program)
    25                                  segment data use32 class=data
    26                                      
    27 00000000 5A0D5478                    a dd 0111_1000_0101_0100_0000_1101_0101_1010b
    28 00000004 7D56                        b dw 0101_0110_0111_1101b
    29 00000006 0000                        c dw 0                                          ;should be 0100_1011_1111_1010b = 0x4bfa
    30 00000008 25780D0A                    fmt db "%x",0xd,0xa
    31                                  
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36                                      
    37                                      
    38 00000000 A1[00000000]                    mov eax, dword[a]
    39 00000005 C1E814                          shr eax, 20
    40 00000008 F7D0                            not eax
    41 0000000A 83E01F                          and eax, 0x1f
    42 0000000D 660905[06000000]                or word[c], ax
    43                                          
    44 00000014 66810D[06000000]E0-             or word[c], 0x000001e0
    44 0000001C 01                 
    45                                  
    46 0000001D 66A1[04000000]                  mov ax, word[b]
    47 00000023 66C1E80C                        shr ax, 12
    48 00000027 6683E00F                        and ax, 0xf
    49 0000002B 66C1E009                        shl ax, 9
    50 0000002F 660905[06000000]                or word[c], ax
    51                                          
    52 00000036 A1[00000000]                    mov eax, dword[a]
    53 0000003B C1E807                          shr eax, 7
    54 0000003E 83E007                          and eax, 0x7
    55 00000041 C1E00D                          shl eax, 13
    56                                          
    57 00000044 660905[06000000]                or word[c], ax
    58                                      
    59 0000004B 0FBF05[06000000]                movsx eax, word[c]
    60 00000052 50                              push eax
    61 00000053 68[08000000]                    push fmt
    62 00000058 FF15[00000000]                  call [printf]
    63 0000005E 83C408                          add esp,8
    64                                          
    65 00000061 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000063 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
