     1                                  ;@author: Rapeanu George - Alexandru(#8 in group list)
     2                                  ;Multiplications, divisions
     3                                  ;a,b,c - byte, d - word
     4                                  ;Exercise 8: (100*a+d+5-75*b)/(c-5) 
     5                                  
     6                                  
     7                                  bits 32 ; assembling for the 32 bits architecture
     8                                  
     9                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    10                                  global start        
    11                                  
    12                                  ; declare external functions needed by our program
    13                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    14                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  extern printf
    18                                  import printf msvcrt.dll
    19                                                            
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22 00000000 01                          a db 1
    23 00000001 02                          b db 2
    24 00000002 03                          c db 3
    25 00000003 0400                        d dw 4
    26 00000005 2568640D0A                  fmt db "%hd",0xd,0xa
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32                                      
    33 00000000 31C0                            xor eax,eax
    34 00000002 A0[00000000]                    mov al, byte[a]
    35 00000007 B364                            mov bl,100
    36 00000009 F6E3                            mul bl
    37 0000000B 660305[03000000]                add ax, word[d]
    38 00000012 6683C005                        add ax, 5
    39 00000016 6689C1                          mov cx, ax
    40                                          
    41                                          
    42 00000019 660FBE05[01000000]              movsx ax, byte[b]
    43 00000021 66BB4B00                        mov bx, 75
    44 00000025 66F7E3                          mul bx
    45 00000028 6629C1                          sub cx, ax
    46                                          
    47 0000002B 6689C8                          mov ax, cx
    48 0000002E 660FBE1D[02000000]              movsx bx, byte[c]
    49 00000036 6683EB05                        sub bx, 5
    50                                  ;        cwd     ;sign extends ax into dx
    51                                  ;        idiv bx ;division on signed numbers 
    52 0000003A BA00000000                      mov edx, 0
    53 0000003F 66F7F3                          div bx
    54                                          
    55 00000042 0FBFC0                          movsx eax,ax
    56 00000045 50                              push eax
    57 00000046 68[05000000]                    push fmt
    58 0000004B FF15[00000000]                  call [printf]
    59 00000051 83C408                          add esp,8
    60                                          
    61 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
