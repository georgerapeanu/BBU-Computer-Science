Terminals unused in grammar

    APOSTROPHE
    PERIOD


Grammar

    0 $accept: accept $end

    1 accept: program

    2 program: ε
    3        | program statement

    4 statement: SEMICOLON
    5          | decl_statement SEMICOLON
    6          | assignment_statement SEMICOLON
    7          | input SEMICOLON
    8          | output SEMICOLON
    9          | conditional
   10          | loop

   11 type: I32
   12     | U32
   13     | STR
   14     | BOOL
   15     | F32
   16     | ARRAY L_SQUARE_BRACKET type SEMICOLON expression R_SQUARE_BRACKET

   17 decl_statement: LET IDENTIFIER COLON type

   18 assignment_statement: IDENTIFIER ASSIGNMENT expression

   19 input: READ_I32 L_PARANTHESIS R_PARANTHESIS
   20      | READ_U32 L_PARANTHESIS R_PARANTHESIS
   21      | READ_STR L_PARANTHESIS R_PARANTHESIS
   22      | READ_BOOL L_PARANTHESIS R_PARANTHESIS
   23      | READ_F32 L_PARANTHESIS R_PARANTHESIS

   24 output: PRINT L_PARANTHESIS output_expression R_PARANTHESIS

   25 output_expression: expression
   26                  | output_expression COMMA expression

   27 conditional: IF expression L_BRACKET program R_BRACKET
   28            | IF expression L_BRACKET program R_BRACKET ELSE L_BRACKET program R_BRACKET

   29 loop: WHILE expression L_BRACKET program R_BRACKET

   30 operator: NOT
   31         | PLUS
   32         | MINUS
   33         | MULT
   34         | DIV
   35         | MOD
   36         | EQUAL
   37         | NOT_EQUAL
   38         | LT
   39         | LE
   40         | GT
   41         | GE
   42         | AND
   43         | OR

   44 expression: NOT expression
   45           | term operator expression
   46           | term
   47           | MINUS expression

   48 term: IDENTIFIER
   49     | CONSTANT
   50     | TRUE
   51     | FALSE
   52     | L_PARANTHESIS expression R_PARANTHESIS


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NOT <row> (258) 30 44
    PLUS <row> (259) 31
    MINUS <row> (260) 32 47
    MULT <row> (261) 33
    DIV <row> (262) 34
    MOD <row> (263) 35
    EQUAL <row> (264) 36
    NOT_EQUAL <row> (265) 37
    LT <row> (266) 38
    LE <row> (267) 39
    GT <row> (268) 40
    GE <row> (269) 41
    ASSIGNMENT <row> (270) 18
    AND <row> (271) 42
    OR <row> (272) 43
    L_BRACKET <row> (273) 27 28 29
    R_BRACKET <row> (274) 27 28 29
    L_SQUARE_BRACKET <row> (275) 16
    R_SQUARE_BRACKET <row> (276) 16
    L_PARANTHESIS <row> (277) 19 20 21 22 23 24 52
    R_PARANTHESIS <row> (278) 19 20 21 22 23 24 52
    SEMICOLON <row> (279) 4 5 6 7 8 16
    COMMA <row> (280) 26
    APOSTROPHE <row> (281)
    COLON <row> (282) 17
    PERIOD <row> (283)
    LET <row> (284) 17
    IF <row> (285) 27 28
    ELSE <row> (286) 28
    WHILE <row> (287) 29
    PRINT <row> (288) 24
    READ_I32 <row> (289) 19
    READ_U32 <row> (290) 20
    READ_STR <row> (291) 21
    READ_BOOL <row> (292) 22
    READ_F32 <row> (293) 23
    I32 <row> (294) 11
    U32 <row> (295) 12
    STR <row> (296) 13
    BOOL <row> (297) 14
    F32 <row> (298) 15
    ARRAY <row> (299) 16
    TRUE <row> (300) 50
    FALSE <row> (301) 51
    IDENTIFIER <row> (302) 17 18 48
    CONSTANT <row> (303) 49


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    accept (50)
        on left: 1
        on right: 0
    program <row> (51)
        on left: 2 3
        on right: 1 3 27 28 29
    statement <row> (52)
        on left: 4 5 6 7 8 9 10
        on right: 3
    type <row> (53)
        on left: 11 12 13 14 15 16
        on right: 16 17
    decl_statement <row> (54)
        on left: 17
        on right: 5
    assignment_statement <row> (55)
        on left: 18
        on right: 6
    input <row> (56)
        on left: 19 20 21 22 23
        on right: 7
    output <row> (57)
        on left: 24
        on right: 8
    output_expression <row> (58)
        on left: 25 26
        on right: 24 26
    conditional <row> (59)
        on left: 27 28
        on right: 9
    loop <row> (60)
        on left: 29
        on right: 10
    operator <row> (61)
        on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43
        on right: 45
    expression <row> (62)
        on left: 44 45 46 47
        on right: 16 18 25 26 27 28 29 44 45 47 52
    term <row> (63)
        on left: 48 49 50 51 52
        on right: 45 46


State 0

    0 $accept: • accept $end

    $default  reduce using rule 2 (program)

    accept   go to state 1
    program  go to state 2


State 1

    0 $accept: accept • $end

    $end  shift, and go to state 3


State 2

    1 accept: program •
    3 program: program • statement

    SEMICOLON   shift, and go to state 4
    LET         shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    PRINT       shift, and go to state 8
    READ_I32    shift, and go to state 9
    READ_U32    shift, and go to state 10
    READ_STR    shift, and go to state 11
    READ_BOOL   shift, and go to state 12
    READ_F32    shift, and go to state 13
    IDENTIFIER  shift, and go to state 14

    $default  reduce using rule 1 (accept)

    statement             go to state 15
    decl_statement        go to state 16
    assignment_statement  go to state 17
    input                 go to state 18
    output                go to state 19
    conditional           go to state 20
    loop                  go to state 21


State 3

    0 $accept: accept $end •

    $default  accept


State 4

    4 statement: SEMICOLON •

    $default  reduce using rule 4 (statement)


State 5

   17 decl_statement: LET • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 22


State 6

   27 conditional: IF • expression L_BRACKET program R_BRACKET
   28            | IF • expression L_BRACKET program R_BRACKET ELSE L_BRACKET program R_BRACKET

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 30
    term        go to state 31


State 7

   29 loop: WHILE • expression L_BRACKET program R_BRACKET

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 32
    term        go to state 31


State 8

   24 output: PRINT • L_PARANTHESIS output_expression R_PARANTHESIS

    L_PARANTHESIS  shift, and go to state 33


State 9

   19 input: READ_I32 • L_PARANTHESIS R_PARANTHESIS

    L_PARANTHESIS  shift, and go to state 34


State 10

   20 input: READ_U32 • L_PARANTHESIS R_PARANTHESIS

    L_PARANTHESIS  shift, and go to state 35


State 11

   21 input: READ_STR • L_PARANTHESIS R_PARANTHESIS

    L_PARANTHESIS  shift, and go to state 36


State 12

   22 input: READ_BOOL • L_PARANTHESIS R_PARANTHESIS

    L_PARANTHESIS  shift, and go to state 37


State 13

   23 input: READ_F32 • L_PARANTHESIS R_PARANTHESIS

    L_PARANTHESIS  shift, and go to state 38


State 14

   18 assignment_statement: IDENTIFIER • ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 39


State 15

    3 program: program statement •

    $default  reduce using rule 3 (program)


State 16

    5 statement: decl_statement • SEMICOLON

    SEMICOLON  shift, and go to state 40


State 17

    6 statement: assignment_statement • SEMICOLON

    SEMICOLON  shift, and go to state 41


State 18

    7 statement: input • SEMICOLON

    SEMICOLON  shift, and go to state 42


State 19

    8 statement: output • SEMICOLON

    SEMICOLON  shift, and go to state 43


State 20

    9 statement: conditional •

    $default  reduce using rule 9 (statement)


State 21

   10 statement: loop •

    $default  reduce using rule 10 (statement)


State 22

   17 decl_statement: LET IDENTIFIER • COLON type

    COLON  shift, and go to state 44


State 23

   44 expression: NOT • expression

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 45
    term        go to state 31


State 24

   47 expression: MINUS • expression

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 46
    term        go to state 31


State 25

   52 term: L_PARANTHESIS • expression R_PARANTHESIS

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 47
    term        go to state 31


State 26

   50 term: TRUE •

    $default  reduce using rule 50 (term)


State 27

   51 term: FALSE •

    $default  reduce using rule 51 (term)


State 28

   48 term: IDENTIFIER •

    $default  reduce using rule 48 (term)


State 29

   49 term: CONSTANT •

    $default  reduce using rule 49 (term)


State 30

   27 conditional: IF expression • L_BRACKET program R_BRACKET
   28            | IF expression • L_BRACKET program R_BRACKET ELSE L_BRACKET program R_BRACKET

    L_BRACKET  shift, and go to state 48


State 31

   45 expression: term • operator expression
   46           | term •

    NOT        shift, and go to state 49
    PLUS       shift, and go to state 50
    MINUS      shift, and go to state 51
    MULT       shift, and go to state 52
    DIV        shift, and go to state 53
    MOD        shift, and go to state 54
    EQUAL      shift, and go to state 55
    NOT_EQUAL  shift, and go to state 56
    LT         shift, and go to state 57
    LE         shift, and go to state 58
    GT         shift, and go to state 59
    GE         shift, and go to state 60
    AND        shift, and go to state 61
    OR         shift, and go to state 62

    $default  reduce using rule 46 (expression)

    operator  go to state 63


State 32

   29 loop: WHILE expression • L_BRACKET program R_BRACKET

    L_BRACKET  shift, and go to state 64


State 33

   24 output: PRINT L_PARANTHESIS • output_expression R_PARANTHESIS

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    output_expression  go to state 65
    expression         go to state 66
    term               go to state 31


State 34

   19 input: READ_I32 L_PARANTHESIS • R_PARANTHESIS

    R_PARANTHESIS  shift, and go to state 67


State 35

   20 input: READ_U32 L_PARANTHESIS • R_PARANTHESIS

    R_PARANTHESIS  shift, and go to state 68


State 36

   21 input: READ_STR L_PARANTHESIS • R_PARANTHESIS

    R_PARANTHESIS  shift, and go to state 69


State 37

   22 input: READ_BOOL L_PARANTHESIS • R_PARANTHESIS

    R_PARANTHESIS  shift, and go to state 70


State 38

   23 input: READ_F32 L_PARANTHESIS • R_PARANTHESIS

    R_PARANTHESIS  shift, and go to state 71


State 39

   18 assignment_statement: IDENTIFIER ASSIGNMENT • expression

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 72
    term        go to state 31


State 40

    5 statement: decl_statement SEMICOLON •

    $default  reduce using rule 5 (statement)


State 41

    6 statement: assignment_statement SEMICOLON •

    $default  reduce using rule 6 (statement)


State 42

    7 statement: input SEMICOLON •

    $default  reduce using rule 7 (statement)


State 43

    8 statement: output SEMICOLON •

    $default  reduce using rule 8 (statement)


State 44

   17 decl_statement: LET IDENTIFIER COLON • type

    I32    shift, and go to state 73
    U32    shift, and go to state 74
    STR    shift, and go to state 75
    BOOL   shift, and go to state 76
    F32    shift, and go to state 77
    ARRAY  shift, and go to state 78

    type  go to state 79


State 45

   44 expression: NOT expression •

    $default  reduce using rule 44 (expression)


State 46

   47 expression: MINUS expression •

    $default  reduce using rule 47 (expression)


State 47

   52 term: L_PARANTHESIS expression • R_PARANTHESIS

    R_PARANTHESIS  shift, and go to state 80


State 48

   27 conditional: IF expression L_BRACKET • program R_BRACKET
   28            | IF expression L_BRACKET • program R_BRACKET ELSE L_BRACKET program R_BRACKET

    $default  reduce using rule 2 (program)

    program  go to state 81


State 49

   30 operator: NOT •

    $default  reduce using rule 30 (operator)


State 50

   31 operator: PLUS •

    $default  reduce using rule 31 (operator)


State 51

   32 operator: MINUS •

    $default  reduce using rule 32 (operator)


State 52

   33 operator: MULT •

    $default  reduce using rule 33 (operator)


State 53

   34 operator: DIV •

    $default  reduce using rule 34 (operator)


State 54

   35 operator: MOD •

    $default  reduce using rule 35 (operator)


State 55

   36 operator: EQUAL •

    $default  reduce using rule 36 (operator)


State 56

   37 operator: NOT_EQUAL •

    $default  reduce using rule 37 (operator)


State 57

   38 operator: LT •

    $default  reduce using rule 38 (operator)


State 58

   39 operator: LE •

    $default  reduce using rule 39 (operator)


State 59

   40 operator: GT •

    $default  reduce using rule 40 (operator)


State 60

   41 operator: GE •

    $default  reduce using rule 41 (operator)


State 61

   42 operator: AND •

    $default  reduce using rule 42 (operator)


State 62

   43 operator: OR •

    $default  reduce using rule 43 (operator)


State 63

   45 expression: term operator • expression

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 82
    term        go to state 31


State 64

   29 loop: WHILE expression L_BRACKET • program R_BRACKET

    $default  reduce using rule 2 (program)

    program  go to state 83


State 65

   24 output: PRINT L_PARANTHESIS output_expression • R_PARANTHESIS
   26 output_expression: output_expression • COMMA expression

    R_PARANTHESIS  shift, and go to state 84
    COMMA          shift, and go to state 85


State 66

   25 output_expression: expression •

    $default  reduce using rule 25 (output_expression)


State 67

   19 input: READ_I32 L_PARANTHESIS R_PARANTHESIS •

    $default  reduce using rule 19 (input)


State 68

   20 input: READ_U32 L_PARANTHESIS R_PARANTHESIS •

    $default  reduce using rule 20 (input)


State 69

   21 input: READ_STR L_PARANTHESIS R_PARANTHESIS •

    $default  reduce using rule 21 (input)


State 70

   22 input: READ_BOOL L_PARANTHESIS R_PARANTHESIS •

    $default  reduce using rule 22 (input)


State 71

   23 input: READ_F32 L_PARANTHESIS R_PARANTHESIS •

    $default  reduce using rule 23 (input)


State 72

   18 assignment_statement: IDENTIFIER ASSIGNMENT expression •

    $default  reduce using rule 18 (assignment_statement)


State 73

   11 type: I32 •

    $default  reduce using rule 11 (type)


State 74

   12 type: U32 •

    $default  reduce using rule 12 (type)


State 75

   13 type: STR •

    $default  reduce using rule 13 (type)


State 76

   14 type: BOOL •

    $default  reduce using rule 14 (type)


State 77

   15 type: F32 •

    $default  reduce using rule 15 (type)


State 78

   16 type: ARRAY • L_SQUARE_BRACKET type SEMICOLON expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 86


State 79

   17 decl_statement: LET IDENTIFIER COLON type •

    $default  reduce using rule 17 (decl_statement)


State 80

   52 term: L_PARANTHESIS expression R_PARANTHESIS •

    $default  reduce using rule 52 (term)


State 81

    3 program: program • statement
   27 conditional: IF expression L_BRACKET program • R_BRACKET
   28            | IF expression L_BRACKET program • R_BRACKET ELSE L_BRACKET program R_BRACKET

    R_BRACKET   shift, and go to state 87
    SEMICOLON   shift, and go to state 4
    LET         shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    PRINT       shift, and go to state 8
    READ_I32    shift, and go to state 9
    READ_U32    shift, and go to state 10
    READ_STR    shift, and go to state 11
    READ_BOOL   shift, and go to state 12
    READ_F32    shift, and go to state 13
    IDENTIFIER  shift, and go to state 14

    statement             go to state 15
    decl_statement        go to state 16
    assignment_statement  go to state 17
    input                 go to state 18
    output                go to state 19
    conditional           go to state 20
    loop                  go to state 21


State 82

   45 expression: term operator expression •

    $default  reduce using rule 45 (expression)


State 83

    3 program: program • statement
   29 loop: WHILE expression L_BRACKET program • R_BRACKET

    R_BRACKET   shift, and go to state 88
    SEMICOLON   shift, and go to state 4
    LET         shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    PRINT       shift, and go to state 8
    READ_I32    shift, and go to state 9
    READ_U32    shift, and go to state 10
    READ_STR    shift, and go to state 11
    READ_BOOL   shift, and go to state 12
    READ_F32    shift, and go to state 13
    IDENTIFIER  shift, and go to state 14

    statement             go to state 15
    decl_statement        go to state 16
    assignment_statement  go to state 17
    input                 go to state 18
    output                go to state 19
    conditional           go to state 20
    loop                  go to state 21


State 84

   24 output: PRINT L_PARANTHESIS output_expression R_PARANTHESIS •

    $default  reduce using rule 24 (output)


State 85

   26 output_expression: output_expression COMMA • expression

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 89
    term        go to state 31


State 86

   16 type: ARRAY L_SQUARE_BRACKET • type SEMICOLON expression R_SQUARE_BRACKET

    I32    shift, and go to state 73
    U32    shift, and go to state 74
    STR    shift, and go to state 75
    BOOL   shift, and go to state 76
    F32    shift, and go to state 77
    ARRAY  shift, and go to state 78

    type  go to state 90


State 87

   27 conditional: IF expression L_BRACKET program R_BRACKET •
   28            | IF expression L_BRACKET program R_BRACKET • ELSE L_BRACKET program R_BRACKET

    ELSE  shift, and go to state 91

    $default  reduce using rule 27 (conditional)


State 88

   29 loop: WHILE expression L_BRACKET program R_BRACKET •

    $default  reduce using rule 29 (loop)


State 89

   26 output_expression: output_expression COMMA expression •

    $default  reduce using rule 26 (output_expression)


State 90

   16 type: ARRAY L_SQUARE_BRACKET type • SEMICOLON expression R_SQUARE_BRACKET

    SEMICOLON  shift, and go to state 92


State 91

   28 conditional: IF expression L_BRACKET program R_BRACKET ELSE • L_BRACKET program R_BRACKET

    L_BRACKET  shift, and go to state 93


State 92

   16 type: ARRAY L_SQUARE_BRACKET type SEMICOLON • expression R_SQUARE_BRACKET

    NOT            shift, and go to state 23
    MINUS          shift, and go to state 24
    L_PARANTHESIS  shift, and go to state 25
    TRUE           shift, and go to state 26
    FALSE          shift, and go to state 27
    IDENTIFIER     shift, and go to state 28
    CONSTANT       shift, and go to state 29

    expression  go to state 94
    term        go to state 31


State 93

   28 conditional: IF expression L_BRACKET program R_BRACKET ELSE L_BRACKET • program R_BRACKET

    $default  reduce using rule 2 (program)

    program  go to state 95


State 94

   16 type: ARRAY L_SQUARE_BRACKET type SEMICOLON expression • R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 96


State 95

    3 program: program • statement
   28 conditional: IF expression L_BRACKET program R_BRACKET ELSE L_BRACKET program • R_BRACKET

    R_BRACKET   shift, and go to state 97
    SEMICOLON   shift, and go to state 4
    LET         shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    PRINT       shift, and go to state 8
    READ_I32    shift, and go to state 9
    READ_U32    shift, and go to state 10
    READ_STR    shift, and go to state 11
    READ_BOOL   shift, and go to state 12
    READ_F32    shift, and go to state 13
    IDENTIFIER  shift, and go to state 14

    statement             go to state 15
    decl_statement        go to state 16
    assignment_statement  go to state 17
    input                 go to state 18
    output                go to state 19
    conditional           go to state 20
    loop                  go to state 21


State 96

   16 type: ARRAY L_SQUARE_BRACKET type SEMICOLON expression R_SQUARE_BRACKET •

    $default  reduce using rule 16 (type)


State 97

   28 conditional: IF expression L_BRACKET program R_BRACKET ELSE L_BRACKET program R_BRACKET •

    $default  reduce using rule 28 (conditional)
