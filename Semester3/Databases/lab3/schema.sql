CREATE PROCEDURE changePriviledgesIsModeratorTinyInt AS
	ALTER TABLE PRIVILEDGES ALTER COLUMN isModerator TINYINT;


CREATE PROCEDURE changePriviledgesIsModeratorBit AS
	ALTER TABLE PRIVILEDGES ALTER COLUMN isModerator BIT;



CREATE PROCEDURE addCountryToUser AS
	ALTER TABLE USERS ADD country VARCHAR(255);
	
CREATE PROCEDURE removeCountryFromUser AS
	ALTER TABLE USERS DROP COLUMN country;



CREATE PROCEDURE addDefaultToPriviledgesIsModerator AS
	ALTER TABLE PRIVILEDGES ADD CONSTRAINT IS_MODERATOR_DEFAULT DEFAULT(0) FOR isModerator;



CREATE PROCEDURE dropDefaultFromPriviledgesIsModerator AS
	ALTER TABLE PRIVILEDGES DROP CONSTRAINT IS_MODERATOR_DEFAULT; 



	
CREATE PROCEDURE createBlacklist AS
	CREATE TABLE BLACKLIST(
		userId int NOT NULL,
		banDate date NOT NULL,
		reason VARCHAR(255) NOT NULL,
		CONSTRAINT BLACKLIST_PRIMARY_KEY PRIMARY KEY (userId, banDate) 
	);

CREATE PROCEDURE dropBlacklist AS
	DROP TABLE BLACKLIST;


CREATE PROCEDURE addReasonToBlacklistPrimaryKeyConstraint AS
	ALTER TABLE BLACKLIST
		DROP CONSTRAINT BLACKLIST_PRIMARY_KEY
	ALTER TABLE BLACKLIST
		ADD CONSTRAINT BLACKLIST_PRIMARY_KEY PRIMARY KEY (userId, banDate, reason);

CREATE PROCEDURE removeReasonFromBlacklistPrimaryKeyConstraint AS
	ALTER TABLE BLACKLIST
		DROP CONSTRAINT BLACKLIST_PRIMARY_KEY
	ALTER TABLE BLACKLIST
		ADD CONSTRAINT BLACKLIST_PRIMARY_KEY PRIMARY KEY (userId, banDate);
	

CREATE PROCEDURE addBlacklistForeignKeyConstaint AS
	ALTER TABLE BLACKLIST 
		ADD CONSTRAINT BLACkLIST_USERID_FOREIGN_KEY FOREIGN KEY(userId) REFERENCES USERS(id);
		
CREATE PROCEDURE removeBlacklistForeignKeyConstaint AS
	ALTER TABLE BLACKLIST 
		DROP CONSTRAINT BLACkLIST_USERID_FOREIGN_KEY;

CREATE PROCEDURE addPostsCandidateKey AS
	ALTER TABLE POSTS 
		ADD CONSTRAINT POSTS_CANDIDATE_KEY UNIQUE (userId, text);
	
CREATE PROCEDURE removePostsCandidateKey AS
	ALTER TABLE POSTS
		DROP CONSTRAINT POSTS_CANDIDATE_KEY;


CREATE TABLE VERSION_TABLE(
	version int,
	PRIMARY KEY(version)
);

INSERT INTO VERSION_TABLE VALUES(1);



CREATE TABLE PROCEDURES_TABLE(
	fromVersion INT,
	toVersion INT,
	nameProc VARCHAR(255),
	PRIMARY KEY(fromVersion, toVersion)
);
	
INSERT INTO PROCEDURES_TABLE VALUES (1, 2, 'changePriviledgesIsModeratorTinyInt');
INSERT INTO PROCEDURES_TABLE VALUES (2, 1, 'changePriviledgesIsModeratorBit');
INSERT INTO PROCEDURES_TABLE VALUES (2, 3, 'addCountryToUser');
INSERT INTO PROCEDURES_TABLE VALUES (3, 2, 'removeCountryFromUser');
INSERT INTO PROCEDURES_TABLE VALUES (3, 4, 'addDefaultToPriviledgesIsModerator');
INSERT INTO PROCEDURES_TABLE VALUES (4, 3, 'dropDefaultFromPriviledgesIsModerator');
INSERT INTO PROCEDURES_TABLE VALUES (4, 5, 'createBlacklist');
INSERT INTO PROCEDURES_TABLE VALUES (5, 4, 'dropBlacklist');
INSERT INTO PROCEDURES_TABLE VALUES (5, 6, 'addReasonToBlacklistPrimaryKeyConstraint');
INSERT INTO PROCEDURES_TABLE VALUES (6, 5, 'removeReasonFromBlacklistPrimaryKeyConstraint');
INSERT INTO PROCEDURES_TABLE VALUES (6, 7, 'addBlacklistForeignKeyConstaint');
INSERT INTO PROCEDURES_TABLE VALUES (7, 6, 'removeBlacklistForeignKeyConstaint');
INSERT INTO PROCEDURES_TABLE VALUES (7, 8, 'addPostsCandidateKey');
INSERT INTO PROCEDURES_TABLE VALUES (8, 7, 'removePostsCandidateKey');



CREATE PROCEDURE goToVersion(@newVersion INT) AS
	DECLARE @curr int
	DECLARE @procedureName varchar(255)
	SELECT @curr=version FROM VERSION_TABLE

	IF @newVersion > (SELECT max(toVersion) FROM PROCEDURES_TABLE)
		RAISERROR ('Version does not exist', 10, 1)
	
	IF @newVersion < (SELECT min(fromVersion) FROM PROCEDURES_TABLE)
		RAISERROR ('Version does not exist', 10, 1)
	
	WHILE @curr < @newVersion BEGIN
		SELECT @procedureName=nameProc FROM PROCEDURES_TABLE WHERE @curr=fromVersion AND @curr+1=toVersion
		EXEC (@procedureName)
		SET @curr=@curr+1
		UPDATE VERSION_TABLE SET version=@curr
	END
	
	WHILE @curr > @newVersion BEGIN
		SELECT @procedureName=nameProc FROM PROCEDURES_TABLE WHERE @curr=fromVersion AND @curr-1=toVersion
		EXEC (@procedureName)
		SET @curr=@curr-1
		UPDATE VERSION_TABLE SET version=@curr
	END; 




--EXEC goToVersion 1;
