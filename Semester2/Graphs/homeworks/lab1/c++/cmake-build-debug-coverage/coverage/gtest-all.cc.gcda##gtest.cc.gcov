        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/tests/googletest/googletest/src/gtest.cc
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <cstdint>
        -:   47:#include <iomanip>
        -:   48:#include <iterator>
        -:   49:#include <limits>
        -:   50:#include <list>
        -:   51:#include <map>
        -:   52:#include <ostream>  // NOLINT
        -:   53:#include <sstream>
        -:   54:#include <unordered_set>
        -:   55:#include <vector>
        -:   56:
        -:   57:#include "gtest/gtest-assertion-result.h"
        -:   58:#include "gtest/gtest-spi.h"
        -:   59:#include "gtest/internal/custom/gtest.h"
        -:   60:
        -:   61:#if GTEST_OS_LINUX
        -:   62:
        -:   63:#include <fcntl.h>   // NOLINT
        -:   64:#include <limits.h>  // NOLINT
        -:   65:#include <sched.h>   // NOLINT
        -:   66:// Declares vsnprintf().  This header is not available on Windows.
        -:   67:#include <strings.h>   // NOLINT
        -:   68:#include <sys/mman.h>  // NOLINT
        -:   69:#include <sys/time.h>  // NOLINT
        -:   70:#include <unistd.h>    // NOLINT
        -:   71:
        -:   72:#include <string>
        -:   73:
        -:   74:#elif GTEST_OS_ZOS
        -:   75:#include <sys/time.h>  // NOLINT
        -:   76:
        -:   77:// On z/OS we additionally need strings.h for strcasecmp.
        -:   78:#include <strings.h>   // NOLINT
        -:   79:
        -:   80:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   81:
        -:   82:#include <windows.h>  // NOLINT
        -:   83:#undef min
        -:   84:
        -:   85:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   86:
        -:   87:#include <windows.h>  // NOLINT
        -:   88:#undef min
        -:   89:
        -:   90:#ifdef _MSC_VER
        -:   91:#include <crtdbg.h>  // NOLINT
        -:   92:#endif
        -:   93:
        -:   94:#include <io.h>         // NOLINT
        -:   95:#include <sys/stat.h>   // NOLINT
        -:   96:#include <sys/timeb.h>  // NOLINT
        -:   97:#include <sys/types.h>  // NOLINT
        -:   98:
        -:   99:#if GTEST_OS_WINDOWS_MINGW
        -:  100:#include <sys/time.h>  // NOLINT
        -:  101:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  102:
        -:  103:#else
        -:  104:
        -:  105:// cpplint thinks that the header is already included, so we want to
        -:  106:// silence it.
        -:  107:#include <sys/time.h>  // NOLINT
        -:  108:#include <unistd.h>    // NOLINT
        -:  109:
        -:  110:#endif  // GTEST_OS_LINUX
        -:  111:
        -:  112:#if GTEST_HAS_EXCEPTIONS
        -:  113:#include <stdexcept>
        -:  114:#endif
        -:  115:
        -:  116:#if GTEST_CAN_STREAM_RESULTS_
        -:  117:#include <arpa/inet.h>   // NOLINT
        -:  118:#include <netdb.h>       // NOLINT
        -:  119:#include <sys/socket.h>  // NOLINT
        -:  120:#include <sys/types.h>   // NOLINT
        -:  121:#endif
        -:  122:
        -:  123:#include "src/gtest-internal-inl.h"
        -:  124:
        -:  125:#if GTEST_OS_WINDOWS
        -:  126:#define vsnprintf _vsnprintf
        -:  127:#endif  // GTEST_OS_WINDOWS
        -:  128:
        -:  129:#if GTEST_OS_MAC
        -:  130:#ifndef GTEST_OS_IOS
        -:  131:#include <crt_externs.h>
        -:  132:#endif
        -:  133:#endif
        -:  134:
        -:  135:#if GTEST_HAS_ABSL
        -:  136:#include "absl/debugging/failure_signal_handler.h"
        -:  137:#include "absl/debugging/stacktrace.h"
        -:  138:#include "absl/debugging/symbolize.h"
        -:  139:#include "absl/strings/str_cat.h"
        -:  140:#endif  // GTEST_HAS_ABSL
        -:  141:
        -:  142:namespace testing {
        -:  143:
        -:  144:using internal::CountIf;
        -:  145:using internal::ForEach;
        -:  146:using internal::GetElementOr;
        -:  147:using internal::Shuffle;
        -:  148:
        -:  149:// Constants.
        -:  150:
        -:  151:// A test whose test suite name or test name matches this filter is
        -:  152:// disabled and not run.
        -:  153:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  154:
        -:  155:// A test suite whose name matches this filter is considered a death
        -:  156:// test suite and will be run before test suites whose name doesn't
        -:  157:// match this filter.
        -:  158:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  159:
        -:  160:// A test filter that matches everything.
        -:  161:static const char kUniversalFilter[] = "*";
        -:  162:
        -:  163:// The default output format.
        -:  164:static const char kDefaultOutputFormat[] = "xml";
        -:  165:// The default output file.
        -:  166:static const char kDefaultOutputFile[] = "test_detail";
        -:  167:
        -:  168:// The environment variable name for the test shard index.
        -:  169:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  170:// The environment variable name for the total number of test shards.
        -:  171:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  172:// The environment variable name for the test shard status file.
        -:  173:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  174:
        -:  175:namespace internal {
        -:  176:
        -:  177:// The text used in failure messages to indicate the start of the
        -:  178:// stack trace.
        -:  179:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  180:
        -:  181:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  182:// is specified on the command line.
        -:  183:bool g_help_flag = false;
        -:  184:
        -:  185:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  186:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  187:  FILE* fileout = nullptr;
    #####:  188:  FilePath output_file_path(output_file);
    %%%%%:  188-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  188-block  1
call    4 never executed
    #####:  189:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  189-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  189-block  1
call    3 never executed
        -:  190:
    #####:  191:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  191-block  1
branch  3 never executed
branch  4 never executed
    #####:  192:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  192-block  1
        -:  193:  }
    #####:  194:  if (fileout == nullptr) {
    %%%%%:  194-block  0
branch  0 never executed
branch  1 never executed
    #####:  195:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  195-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  195-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  195-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  195-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  195-block  4
call   13 never executed
    $$$$$:  195-block  5
call   14 never executed
    $$$$$:  195-block  6
        -:  196:  }
    #####:  197:  return fileout;
    %%%%%:  197-block  0
call    0 never executed
    %%%%%:  197-block  1
        -:  198:}
        -:  199:
        -:  200:}  // namespace internal
        -:  201:
        -:  202:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  203:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  204:static const char* GetDefaultFilter() {
        -:  205:  const char* const testbridge_test_only =
        1:  206:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  206-block  0
call    0 returned 1
        1:  207:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  208:    return testbridge_test_only;
    %%%%%:  208-block  0
        -:  209:  }
        1:  210:  return kUniversalFilter;
        1:  210-block  0
        -:  211:}
        -:  212:
        -:  213:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  214:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  215:static bool GetDefaultFailFast() {
        -:  216:  const char* const testbridge_test_runner_fail_fast =
        1:  217:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  217-block  0
call    0 returned 1
        1:  218:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  219:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  219-block  0
        -:  220:  }
        1:  221:  return false;
        1:  221-block  0
        -:  222:}
        -:  223:
        -:  224:}  // namespace testing
        -:  225:
        -:  226:GTEST_DEFINE_bool_(
        -:  227:    fail_fast,
        -:  228:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  229:                                        testing::GetDefaultFailFast()),
        -:  230:    "True if and only if a test failure should stop further test execution.");
        -:  231:
        -:  232:GTEST_DEFINE_bool_(
        -:  233:    also_run_disabled_tests,
        -:  234:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  235:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  236:
        -:  237:GTEST_DEFINE_bool_(
        -:  238:    break_on_failure,
        -:  239:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  240:    "True if and only if a failed assertion should be a debugger "
        -:  241:    "break-point.");
        -:  242:
        -:  243:GTEST_DEFINE_bool_(catch_exceptions,
        -:  244:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  245:                                                       true),
        -:  246:                   "True if and only if " GTEST_NAME_
        -:  247:                   " should catch exceptions and treat them as test failures.");
        -:  248:
        -:  249:GTEST_DEFINE_string_(
        -:  250:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  251:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  252:    "and auto.  'auto' means to use colors if the output is "
        -:  253:    "being sent to a terminal and the TERM environment variable "
        -:  254:    "is set to a terminal type that supports colors.");
        -:  255:
        -:  256:GTEST_DEFINE_string_(
        -:  257:    filter,
        -:  258:    testing::internal::StringFromGTestEnv("filter",
        -:  259:                                          testing::GetDefaultFilter()),
        -:  260:    "A colon-separated list of glob (not regex) patterns "
        -:  261:    "for filtering the tests to run, optionally followed by a "
        -:  262:    "'-' and a : separated list of negative patterns (tests to "
        -:  263:    "exclude).  A test is run if it matches one of the positive "
        -:  264:    "patterns and does not match any of the negative patterns.");
        -:  265:
        -:  266:GTEST_DEFINE_bool_(
        -:  267:    install_failure_signal_handler,
        -:  268:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  269:                                        false),
        -:  270:    "If true and supported on the current platform, " GTEST_NAME_
        -:  271:    " should "
        -:  272:    "install a signal handler that dumps debugging information when fatal "
        -:  273:    "signals are raised.");
        -:  274:
        -:  275:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  276:
        -:  277:// The net priority order after flag processing is thus:
        -:  278://   --gtest_output command line flag
        -:  279://   GTEST_OUTPUT environment variable
        -:  280://   XML_OUTPUT_FILE environment variable
        -:  281://   ''
        -:  282:GTEST_DEFINE_string_(
        -:  283:    output,
        -:  284:    testing::internal::StringFromGTestEnv(
        -:  285:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  286:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  287:    "optionally followed by a colon and an output file name or directory. "
        -:  288:    "A directory is indicated by a trailing pathname separator. "
        -:  289:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  290:    "If a directory is specified, output files will be created "
        -:  291:    "within that directory, with file-names based on the test "
        -:  292:    "executable's name and, if necessary, made unique by adding "
        -:  293:    "digits.");
        -:  294:
        -:  295:GTEST_DEFINE_bool_(
        -:  296:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  297:    "True if only test failures should be displayed in text output.");
        -:  298:
        -:  299:GTEST_DEFINE_bool_(print_time,
        -:  300:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  301:                   "True if and only if " GTEST_NAME_
        -:  302:                   " should display elapsed time in text output.");
        -:  303:
        -:  304:GTEST_DEFINE_bool_(print_utf8,
        -:  305:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  306:                   "True if and only if " GTEST_NAME_
        -:  307:                   " prints UTF8 characters as text.");
        -:  308:
        -:  309:GTEST_DEFINE_int32_(
        -:  310:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  311:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  312:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  313:
        -:  314:GTEST_DEFINE_int32_(
        -:  315:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  316:    "How many times to repeat each test.  Specify a negative number "
        -:  317:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  318:
        -:  319:GTEST_DEFINE_bool_(
        -:  320:    recreate_environments_when_repeating,
        -:  321:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  322:                                        false),
        -:  323:    "Controls whether global test environments are recreated for each repeat "
        -:  324:    "of the tests. If set to false the global test environments are only set "
        -:  325:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  326:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  327:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  328:    "there is no last run, the environments will always be recreated to avoid "
        -:  329:    "leaks.");
        -:  330:
        -:  331:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  332:                   "True if and only if " GTEST_NAME_
        -:  333:                   " should include internal stack frames when "
        -:  334:                   "printing test failure stack traces.");
        -:  335:
        -:  336:GTEST_DEFINE_bool_(shuffle,
        -:  337:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  338:                   "True if and only if " GTEST_NAME_
        -:  339:                   " should randomize tests' order on every run.");
        -:  340:
        -:  341:GTEST_DEFINE_int32_(
        -:  342:    stack_trace_depth,
        -:  343:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  344:                                         testing::kMaxStackTraceDepth),
        -:  345:    "The maximum number of stack frames to print when an "
        -:  346:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  347:
        -:  348:GTEST_DEFINE_string_(
        -:  349:    stream_result_to,
        -:  350:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  351:    "This flag specifies the host name and the port number on which to stream "
        -:  352:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  353:    "Linux.");
        -:  354:
        -:  355:GTEST_DEFINE_bool_(
        -:  356:    throw_on_failure,
        -:  357:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  358:    "When this flag is specified, a failed assertion will throw an exception "
        -:  359:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  360:    "otherwise. For use with an external test framework.");
        -:  361:
        -:  362:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  363:GTEST_DEFINE_string_(
        -:  364:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  365:    "This flag specifies the flagfile to read command-line flags from.");
        -:  366:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  367:
        -:  368:namespace testing {
        -:  369:namespace internal {
        -:  370:
        -:  371:// Generates a random number from [0, range), using a Linear
        -:  372:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  373:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  374:uint32_t Random::Generate(uint32_t range) {
        -:  375:  // These constants are the same as are used in glibc's rand(3).
        -:  376:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  377:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  378:
    #####:  379:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  379-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  379-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  379-block  3
call   11 never executed
    $$$$$:  379-block  4
call   12 never executed
    $$$$$:  379-block  5
call   13 never executed
    #####:  380:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  380-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  380-block  1
call    3 never executed
call    4 never executed
    %%%%%:  380-block  2
call    5 never executed
    $$$$$:  380-block  3
call    6 never executed
    #####:  381:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  381-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  381-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  382:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  382-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  382-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  383:
        -:  384:  // Converting via modulus introduces a bit of downward bias, but
        -:  385:  // it's simple, and a linear congruential generator isn't too good
        -:  386:  // to begin with.
    #####:  387:  return state_ % range;
    %%%%%:  387-block  0
    %%%%%:  387-block  1
        -:  388:}
        -:  389:
        -:  390:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  391:// Google Test.  Useful for catching the user mistake of not initializing
        -:  392:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  393:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  393-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  394:
        -:  395:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  396:// results of calling a given int-returning method on each.
        -:  397:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  398:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  399:                                int (TestSuite::*method)() const) {
        5:  400:  int sum = 0;
       10:  401:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  401-block  0
       10:  401-block  1
call    0 returned 10
branch  1 taken 5 (fallthrough)
branch  2 taken 5
       5*:  402:    sum += (case_list[i]->*method)();
        5:  402-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    %%%%%:  402-block  1
        5:  402-block  2
        5:  402-block  3
call    3 returned 5
        -:  403:  }
        5:  404:  return sum;
        5:  404-block  0
        -:  405:}
        -:  406:
        -:  407:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  408:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  409:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  409-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  409-block  2
    %%%%%:  409-block  3
    %%%%%:  409-block  4
        -:  410:}
        -:  411:
        -:  412:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 88%
        2:  413:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  414:  return test_suite->should_run() && test_suite->Failed();
        2:  414-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  414-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  414-block  2
        2:  414-block  3
        2:  414-block  4
        -:  415:}
        -:  416:
        -:  417:// Returns true if and only if test_suite contains at least one test that
        -:  418:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  419:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  420:  return test_suite->should_run();
        2:  420-block  0
call    0 returned 2
        -:  421:}
        -:  422:
        -:  423:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  424:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  425:                           int line, const char* message)
    #####:  426:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  426-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  426-block  1
    $$$$$:  426-block  2
call    4 never executed
        -:  427:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  428:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  428-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  428-block  1
call    2 never executed
call    3 never executed
        -:  429:
        -:  430:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  431:void AssertHelper::operator=(const Message& message) const {
    #####:  432:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  432-block  0
call    0 never executed
    #####:  433:      data_->type, data_->file, data_->line,
    %%%%%:  433-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  434:      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  434-block  0
call    3 never executed
    $$$$$:  434-block  1
call    4 never executed
    $$$$$:  434-block  2
    #####:  435:      UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  435-block  0
call    4 never executed
        -:  436:      // Skips the stack frame for this function itself.
        -:  437:  );  // NOLINT
    #####:  438:}
        -:  439:
        -:  440:namespace {
        -:  441:
        -:  442:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  443:// to creates test cases for it, a synthetic test case is
        -:  444:// inserted to report ether an error or a log message.
        -:  445://
        -:  446:// This configuration bit will likely be removed at some point.
        -:  447:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  448:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  449:
        -:  450:// A test that fails at a given file/line location with a given message.
        -:  451:class FailureTest : public Test {
        -:  452: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  453:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  454:                       bool as_error)
    #####:  455:      : loc_(loc),
    #####:  456:        error_message_(std::move(error_message)),
    #####:  457:        as_error_(as_error) {}
    %%%%%:  457-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  457-block  1
call    4 never executed
call    5 never executed
    $$$$$:  457-block  2
call    6 never executed
        -:  458:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  459:  void TestBody() override {
    #####:  460:    if (as_error_) {
    %%%%%:  460-block  0
branch  0 never executed
branch  1 never executed
    #####:  461:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  461-block  0
call    3 never executed
    $$$$$:  461-block  1
call    4 never executed
    $$$$$:  461-block  2
    #####:  462:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  462-block  1
call    4 never executed
    %%%%%:  462-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  462-block  3
call    9 never executed
        -:  463:    } else {
    #####:  464:      std::cout << error_message_ << std::endl;
    %%%%%:  464-block  0
call    0 never executed
call    1 never executed
        -:  465:    }
    #####:  466:  }
    %%%%%:  466-block  0
        -:  467:
        -:  468: private:
        -:  469:  const CodeLocation loc_;
        -:  470:  const std::string error_message_;
        -:  471:  const bool as_error_;
        -:  472:};
        -:  473:
        -:  474:}  // namespace
        -:  475:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  476:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  477:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  477-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  478:}
        -:  479:
        -:  480:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  481:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  482:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  482-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  482-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  482-block  2
call    8 never executed
call    9 never executed
    $$$$$:  482-block  3
call   10 never executed
    $$$$$:  482-block  4
    $$$$$:  482-block  5
call   11 never executed
    #####:  483:}
        -:  484:
        -:  485:// If this parameterized test suite has no instantiations (and that
        -:  486:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  487:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  488:                             bool has_test_p) {
    #####:  489:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  489-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  490:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  490-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  490-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  490-block  2
    $$$$$:  490-block  3
        -:  491:
    #####:  492:  const char kMissingInstantiation[] =  //
        -:  493:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  494:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  495:      "ones provided expand to nothing."
        -:  496:      "\n\n"
        -:  497:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  498:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  499:      "placed in a library that may be linked in to get other utilities.)";
        -:  500:
    #####:  501:  const char kMissingTestCase[] =  //
        -:  502:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  503:      "defined via TEST_P . No test cases will run."
        -:  504:      "\n\n"
        -:  505:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  506:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  507:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  508:      "removed but the rest got left behind.";
        -:  509:
        -:  510:  std::string message =
    #####:  511:      "Parameterized test suite " + name +
    %%%%%:  511-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  511-block  1
    %%%%%:  511-block  2
    %%%%%:  511-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  511-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  511-block  5
    $$$$$:  511-block  6
    #####:  512:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  512-block  1
        -:  513:      "\n\n"
        -:  514:      "To suppress this error for this test suite, insert the following line "
        -:  515:      "(in a non-header) in the namespace it is defined in:"
        -:  516:      "\n\n"
    #####:  517:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  517-block  1
    #####:  518:      name + ");";
    %%%%%:  518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  518-block  1
call    4 never executed
        -:  519:
    #####:  520:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  520-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  520-block  1
    $$$$$:  520-block  2
call    6 never executed
    #####:  521:  RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  521-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  521-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  521-block  2
call   11 never executed
call   12 never executed
    $$$$$:  521-block  3
call   13 never executed
    $$$$$:  521-block  4
        -:  522:      "GoogleTestVerification", full_name.c_str(),
        -:  523:      nullptr,  // No type parameter.
        -:  524:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  525:      location.file.c_str(), location.line, [message, location] {
    #####:  526:        return new FailureTest(location, message,
    #####:  527:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  527-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  527-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  527-block  2
call    7 never executed
    %%%%%:  527-block  3
    $$$$$:  527-block  4
call    8 never executed
    $$$$$:  527-block  5
call    9 never executed
        -:  528:      });
        -:  529:}
        -:  530:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  531:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  532:                                        CodeLocation code_location) {
    #####:  533:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  533-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  533-block  1
call    6 never executed
    $$$$$:  533-block  2
call    7 never executed
        -:  534:      test_suite_name, code_location);
    #####:  535:}
        -:  536:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  537:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  538:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  538-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  539:      case_name);
    #####:  540:}
        -:  541:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  542:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  543:    const char* test_suite_name, CodeLocation code_location) {
    #####:  544:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  544-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  544-block  1
call    4 never executed
call    5 never executed
    $$$$$:  544-block  2
call    6 never executed
    $$$$$:  544-block  3
    $$$$$:  544-block  4
call    7 never executed
    $$$$$:  544-block  5
    #####:  545:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  545-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  545-block  2
call    9 never executed
    $$$$$:  545-block  3
    $$$$$:  545-block  4
call   10 never executed
    #####:  546:}
        -:  547:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  548:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  549:    const char* test_suite_name) {
    #####:  550:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  550-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  550-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  550-block  2
call    7 never executed
call    8 never executed
    $$$$$:  550-block  3
call    9 never executed
    $$$$$:  550-block  4
    $$$$$:  550-block  5
call   10 never executed
    $$$$$:  550-block  6
    #####:  551:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  552:    it->second.instantiated = true;
    %%%%%:  552-block  0
call    0 never executed
        -:  553:  } else {
    #####:  554:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  554-block  1
call    3 never executed
    %%%%%:  554-block  2
call    4 never executed
    $$$$$:  554-block  3
call    5 never executed
    $$$$$:  554-block  4
    #####:  555:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  555-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  555-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  556:  }
    #####:  557:}
    %%%%%:  557-block  0
        -:  558:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  559:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  560:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  560-block  0
call    0 returned 1
       1*:  561:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
        1:  561-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  561-block  1
call    5 never executed
    %%%%%:  561-block  2
call    6 never executed
    #####:  562:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  562-block  0
    %%%%%:  562-block  1
    #####:  563:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  563-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  563-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  563-block  2
    $$$$$:  563-block  3
        -:  564:
        -:  565:    std::string message =
    #####:  566:        "Type parameterized test suite " + testcase.first +
    %%%%%:  566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  566-block  1
    $$$$$:  566-block  2
        -:  567:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  568:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  569:        "\n\n"
        -:  570:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  571:        "part of binaries that intend to use them. (As opposed to, for "
        -:  572:        "example, being placed in a library that may be linked in to get other "
        -:  573:        "utilities.)"
        -:  574:        "\n\n"
        -:  575:        "To suppress this error for this test suite, insert the following line "
        -:  576:        "(in a non-header) in the namespace it is defined in:"
        -:  577:        "\n\n"
    #####:  578:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  578-block  1
    #####:  579:        testcase.first + ");";
    %%%%%:  579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  579-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  579-block  2
call    7 never executed
        -:  580:
        -:  581:    std::string full_name =
    #####:  582:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  582-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  582-block  1
    $$$$$:  582-block  2
call    6 never executed
    #####:  583:    RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  583-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  583-block  1
call   10 never executed
call   11 never executed
    $$$$$:  583-block  2
call   12 never executed
    $$$$$:  583-block  3
        -:  584:        "GoogleTestVerification", full_name.c_str(),
        -:  585:        nullptr,  // No type parameter.
        -:  586:        nullptr,  // No value parameter.
        -:  587:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  588:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  588-block  0
call    0 never executed
    #####:  589:          return new FailureTest(testcase.second.code_location, message,
    #####:  590:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  590-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  590-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  590-block  2
call    7 never executed
    %%%%%:  590-block  3
    $$$$$:  590-block  4
call    8 never executed
    $$$$$:  590-block  5
call    9 never executed
        -:  591:        });
        -:  592:  }
        1:  593:}
        1:  593-block  0
        -:  594:
        -:  595:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  596:static ::std::vector<std::string> g_argvs;
        -:  597:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  598:::std::vector<std::string> GetArgvs() {
        -:  599:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  600:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  601:  // ::string. This code converts it to the appropriate type.
        -:  602:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  603:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  604:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  605:  return g_argvs;
        2:  605-block  0
call    0 returned 2
        -:  606:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  607:}
        -:  608:
        -:  609:// Returns the current application's name, removing directory path if that
        -:  610:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  611:FilePath GetCurrentExecutableName() {
    #####:  612:  FilePath result;
    %%%%%:  612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  612-block  1
call    3 never executed
    $$$$$:  612-block  2
call    4 never executed
        -:  613:
        -:  614:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  615:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  616:#else
    #####:  617:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  617-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  617-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  617-block  3
call   10 never executed
call   11 never executed
    $$$$$:  617-block  4
call   12 never executed
    $$$$$:  617-block  5
    $$$$$:  617-block  6
call   13 never executed
    $$$$$:  617-block  7
        -:  618:#endif  // GTEST_OS_WINDOWS
        -:  619:
    #####:  620:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  620-block  0
        -:  621:}
        -:  622:
        -:  623:// Functions for processing the gtest_output flag.
        -:  624:
        -:  625:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 48%
        1:  626:std::string UnitTestOptions::GetOutputFormat() {
        1:  627:  std::string s = GTEST_FLAG_GET(output);
        1:  627-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  627-block  1
call    3 never executed
        1:  628:  const char* const gtest_output_flag = s.c_str();
        1:  628-block  0
call    0 returned 1
        1:  629:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  630:  return (colon == nullptr)
        -:  631:             ? std::string(gtest_output_flag)
        -:  632:             : std::string(gtest_output_flag,
       2*:  633:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  633-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  633-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  633-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  633-block  3
call   12 never executed
        1:  633-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  633-block  5
call   15 returned 1
        1:  633-block  6
call   16 returned 1
        1:  633-block  7
    $$$$$:  633-block  8
branch 17 never executed
branch 18 never executed
    $$$$$:  633-block  9
call   19 never executed
    $$$$$:  633-block 10
    $$$$$:  633-block 11
branch 20 never executed
branch 21 never executed
    $$$$$:  633-block 12
call   22 never executed
    $$$$$:  633-block 13
        -:  634:}
        -:  635:
        -:  636:// Returns the name of the requested output file, or the default if none
        -:  637:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  638:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  639:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  639-block  1
call    4 never executed
    #####:  640:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  640-block  0
call    0 never executed
        -:  641:
    #####:  642:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  642-block  0
call    3 never executed
    $$$$$:  642-block  1
call    4 never executed
    #####:  643:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  643-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  643-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  643-block  3
call   10 never executed
    $$$$$:  643-block  4
        -:  644:
    #####:  645:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  646:  if (colon == nullptr)
    %%%%%:  646-block  0
branch  0 never executed
branch  1 never executed
    #####:  647:    return internal::FilePath::MakeFileName(
    %%%%%:  647-block  0
call    0 never executed
    %%%%%:  647-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  647-block  2
call    4 never executed
    $$$$$:  647-block  3
call    5 never executed
    $$$$$:  647-block  4
    #####:  648:               internal::FilePath(
    %%%%%:  648-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  648-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  648-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  648-block  3
call   14 never executed
    $$$$$:  648-block  4
    $$$$$:  648-block  5
call   15 never executed
    $$$$$:  648-block  6
    $$$$$:  648-block  7
call   16 never executed
    $$$$$:  648-block  8
        -:  649:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  650:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  650-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  650-block  1
call   10 never executed
    $$$$$:  650-block  2
    $$$$$:  650-block  3
call   11 never executed
    $$$$$:  650-block  4
    $$$$$:  650-block  5
call   12 never executed
    $$$$$:  650-block  6
    #####:  651:        .string();
    %%%%%:  651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  652:
    #####:  653:  internal::FilePath output_name(colon + 1);
    %%%%%:  653-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  653-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:  653-block  2
call    8 never executed
    $$$$$:  653-block  3
    $$$$$:  653-block  4
    $$$$$:  653-block  5
call    9 never executed
    #####:  654:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  655:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  655-block  1
call    3 never executed
    $$$$$:  655-block  2
call    4 never executed
    $$$$$:  655-block  3
    #####:  656:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  656-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  656-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  656-block  3
call   14 never executed
    $$$$$:  656-block  4
    $$$$$:  656-block  5
call   15 never executed
    $$$$$:  656-block  6
    $$$$$:  656-block  7
call   16 never executed
    $$$$$:  656-block  8
    #####:  657:        internal::FilePath(colon + 1));
    %%%%%:  657-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  657-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  657-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  657-block  3
call   13 never executed
    $$$$$:  657-block  4
    $$$$$:  657-block  5
call   14 never executed
    $$$$$:  657-block  6
    $$$$$:  657-block  7
call   15 never executed
    $$$$$:  657-block  8
        -:  658:
    #####:  659:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  659-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  660:
        -:  661:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  662:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  662-block  0
    #####:  663:      GetOutputFormat().c_str()));
    %%%%%:  663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  663-block  1
call    3 never executed
    %%%%%:  663-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  663-block  3
call    7 never executed
    $$$$$:  663-block  4
    $$$$$:  663-block  5
call    8 never executed
    #####:  664:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  665:}
        -:  666:
        -:  667:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  668:// pattern consists of regular characters, single-character wildcards (?), and
        -:  669:// multi-character wildcards (*).
        -:  670://
        -:  671:// This function implements a linear-time string globbing algorithm based on
        -:  672:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 92 returned 100% blocks executed 83%
       92:  673:static bool PatternMatchesString(const std::string& name_str,
        -:  674:                                 const char* pattern, const char* pattern_end) {
       92:  675:  const char* name = name_str.c_str();
       92:  675-block  0
call    0 returned 92
       92:  676:  const char* const name_begin = name;
       92:  677:  const char* const name_end = name + name_str.size();
call    0 returned 92
        -:  678:
       92:  679:  const char* pattern_next = pattern;
       92:  680:  const char* name_next = name;
        -:  681:
     2060:  682:  while (pattern < pattern_end || name < name_end) {
     2060:  682-block  0
branch  0 taken 496 (fallthrough)
branch  1 taken 1564
      496:  682-block  1
branch  2 taken 478 (fallthrough)
branch  3 taken 18
     1968:  682-block  2
     2042:  683:    if (pattern < pattern_end) {
     2042:  683-block  0
branch  0 taken 1564 (fallthrough)
branch  1 taken 478
     1564:  684:      switch (*pattern) {
     1564:  684-block  0
branch  0 taken 552
branch  1 taken 0
branch  2 taken 1012
      552:  685:        default:  // Match an ordinary character.
     552*:  686:          if (name < name_end && *name == *pattern) {
      552:  686-block  0
branch  0 taken 514 (fallthrough)
branch  1 taken 38
      514:  686-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 514
    #####:  687:            ++pattern;
    #####:  688:            ++name;
    #####:  689:            continue;
    %%%%%:  689-block  0
        -:  690:          }
      552:  691:          break;
      552:  691-block  0
    #####:  692:        case '?':  // Match any single character.
    #####:  693:          if (name < name_end) {
    %%%%%:  693-block  0
branch  0 never executed
branch  1 never executed
    #####:  694:            ++pattern;
    #####:  695:            ++name;
    #####:  696:            continue;
    %%%%%:  696-block  0
        -:  697:          }
    #####:  698:          break;
    %%%%%:  698-block  0
     1012:  699:        case '*':
        -:  700:          // Match zero or more characters. Start by skipping over the wildcard
        -:  701:          // and matching zero characters from name. If that fails, restart and
        -:  702:          // match one more character than the last attempt.
     1012:  703:          pattern_next = pattern;
     1012:  704:          name_next = name + 1;
     1012:  705:          ++pattern;
     1012:  706:          continue;
     1012:  706-block  0
        -:  707:      }
        -:  708:    }
        -:  709:    // Failed to match a character. Restart if possible.
     1030:  710:    if (name_begin < name_next && name_next <= name_end) {
     1030:  710-block  0
branch  0 taken 994 (fallthrough)
branch  1 taken 36
      994:  710-block  1
branch  2 taken 956 (fallthrough)
branch  3 taken 38
      956:  711:      pattern = pattern_next;
      956:  712:      name = name_next;
      956:  713:      continue;
      956:  713-block  0
        -:  714:    }
       74:  715:    return false;
       74:  715-block  0
        -:  716:  }
       18:  717:  return true;
       18:  717-block  0
        -:  718:}
        -:  719:
        -:  720:namespace {
        -:  721:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 100%
        5:  722:bool IsGlobPattern(const std::string& pattern) {
       10:  723:  return std::any_of(pattern.begin(), pattern.end(),
        5:  723-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5:  723-block  1
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 14 returned 100% blocks executed 100%
       24:  724:                     [](const char c) { return c == '?' || c == '*'; });
        5:  724-block  0
        5:  724-block  1
       14:  724-block  2
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  724-block  3
branch  2 taken 5 (fallthrough)
branch  3 taken 9
        5:  724-block  4
        9:  724-block  5
       14:  724-block  6
        -:  725:}
        -:  726:
        -:  727:class UnitTestFilter {
        -:  728: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 2 returned 100% blocks executed 100%
        2:  729:  UnitTestFilter() = default;
        2:  729-block  0
call    0 returned 2
call    1 returned 2
        -:  730:
        -:  731:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 78%
        3:  732:  explicit UnitTestFilter(const std::string& filter) {
        3:  732-block  0
call    0 returned 3
call    1 returned 3
    $$$$$:  732-block  1
call    2 never executed
    $$$$$:  732-block  2
call    3 never executed
        -:  733:    // By design "" filter matches "" string.
        6:  734:    std::vector<std::string> all_patterns;
call    0 returned 3
        3:  734-block  0
call    1 returned 3
    $$$$$:  734-block  1
call    2 never executed
        3:  735:    SplitString(filter, ':', &all_patterns);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  736:    const auto exact_match_patterns_begin = std::partition(
        3:  737:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        3:  737-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  738:
        6:  739:    glob_patterns_.reserve(static_cast<size_t>(
        3:  740:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        3:  740-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  740-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        -:  741:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        3:  742:              std::inserter(glob_patterns_, glob_patterns_.begin()));
        3:  742-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  742-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        -:  743:    std::move(
        -:  744:        exact_match_patterns_begin, all_patterns.end(),
        3:  745:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
        3:  745-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  745-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:  746:  }
        -:  747:
        -:  748:  // Returns true if and only if name matches at least one of the patterns in
        -:  749:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 73 returned 100% blocks executed 100%
       73:  750:  bool MatchesName(const std::string& name) const {
      146:  751:    return exact_match_patterns_.count(name) > 0 ||
       73:  751-block  0
call    0 returned 73
branch  1 taken 73 (fallthrough)
branch  2 taken 0
       18:  751-block  1
       55:  751-block  2
       73:  752:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
       73:  752-block  0
call    0 returned 73
call    1 returned 73
call    2 returned 73
branch  3 taken 18 (fallthrough)
branch  4 taken 55
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 92 returned 100% blocks executed 100%
      184:  753:                       [&name](const std::string& pattern) {
       92:  754:                         return PatternMatchesString(
call    0 returned 92
call    1 returned 92
        -:  755:                             name, pattern.c_str(),
      184:  756:                             pattern.c_str() + pattern.size());
       92:  756-block  0
call    0 returned 92
call    1 returned 92
       73:  757:                       });
       73:  757-block  0
        -:  758:  }
        -:  759:
        -:  760: private:
        -:  761:  std::vector<std::string> glob_patterns_;
        -:  762:  std::unordered_set<std::string> exact_match_patterns_;
        -:  763:};
        -:  764:
        -:  765:class PositiveAndNegativeUnitTestFilter {
        -:  766: public:
        -:  767:  // Constructs a positive and a negative filter from a string. The string
        -:  768:  // contains a positive filter optionally followed by a '-' character and a
        -:  769:  // negative filter. In case only a negative filter is provided the positive
        -:  770:  // filter will be assumed "*".
        -:  771:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 23%
        1:  772:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  772-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  772-block  1
call    2 never executed
    $$$$$:  772-block  2
call    3 never executed
        2:  773:    std::vector<std::string> positive_and_negative_filters;
call    0 returned 1
        1:  773-block  0
call    1 returned 1
    $$$$$:  773-block  1
call    2 never executed
        -:  774:
        -:  775:    // NOTE: `SplitString` always returns a non-empty container.
        1:  776:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  777:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  777-block  0
call    0 returned 1
        -:  778:
        1:  779:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  780:      positive_filter_ = UnitTestFilter(
    %%%%%:  780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  781:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  781-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  781-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  781-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  781-block  4
call   14 never executed
    $$$$$:  781-block  5
call   15 never executed
    $$$$$:  781-block  6
    $$$$$:  781-block  7
branch 16 never executed
branch 17 never executed
    $$$$$:  781-block  8
call   18 never executed
    $$$$$:  781-block  9
        -:  782:
        -:  783:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  784:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  785:      // string parts with `-` as separator to generate the negative filter.
    #####:  786:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  786-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  786-block  1
call    4 never executed
    #####:  787:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  787-block  0
    %%%%%:  787-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:        negative_filter_string =
    #####:  789:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  789-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  789-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  789-block  3
call   10 never executed
    $$$$$:  789-block  4
    #####:  790:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  790-block  1
call    3 never executed
call    4 never executed
call    5 never executed
        -:  791:    } else {
        -:  792:      // In case we don't have a negative filter and positive filter is ""
        -:  793:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  794:      // negative filter.
        1:  795:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  795-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  795-block  1
call    3 returned 1
call    4 returned 1
        -:  796:    }
        1:  797:  }
        -:  798:
        -:  799:  // Returns true if and only if test name (this is generated by appending test
        -:  800:  // suit name and test name via a '.' character) matches the positive filter
        -:  801:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 18 returned 100% blocks executed 64%
       18:  802:  bool MatchesTest(const std::string& test_suite_name,
        -:  803:                   const std::string& test_name) const {
       18:  804:    return MatchesName(test_suite_name + "." + test_name);
       18:  804-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18:  804-block  1
call    4 returned 18
branch  5 taken 18 (fallthrough)
branch  6 taken 0 (throw)
       18:  804-block  2
       18:  804-block  3
call    7 returned 18
call    8 returned 18
       18:  804-block  4
    $$$$$:  804-block  5
call    9 never executed
    $$$$$:  804-block  6
    $$$$$:  804-block  7
call   10 never executed
        -:  805:  }
        -:  806:
        -:  807:  // Returns true if and only if name matches the positive filter and does not
        -:  808:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 18 returned 100% blocks executed 88%
       18:  809:  bool MatchesName(const std::string& name) const {
      36*:  810:    return positive_filter_.MatchesName(name) &&
       18:  810-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0
       18:  810-block  1
    %%%%%:  810-block  2
       36:  811:           !negative_filter_.MatchesName(name);
       18:  811-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0
       18:  811-block  1
        -:  812:  }
        -:  813:
        -:  814: private:
        -:  815:  UnitTestFilter positive_filter_;
        -:  816:  UnitTestFilter negative_filter_;
        -:  817:};
        -:  818:}  // namespace
        -:  819:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  820:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  821:                                    const char* filter) {
    #####:  822:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  822-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  822-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  822-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  822-block  3
    %%%%%:  822-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  822-block  5
    $$$$$:  822-block  6
call   13 never executed
    $$$$$:  822-block  7
    $$$$$:  822-block  8
call   14 never executed
    $$$$$:  822-block  9
    $$$$$:  822-block 10
call   15 never executed
        -:  823:}
        -:  824:
        -:  825:// Returns true if and only if the user-specified filter matches the test
        -:  826:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  827:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  828:                                        const std::string& test_name) {
        -:  829:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  830:  // positive filter and negative filter portions
    #####:  831:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  831-block  0
call    0 never executed
    %%%%%:  831-block  1
call    1 never executed
    $$$$$:  831-block  2
call    2 never executed
    #####:  832:      .MatchesTest(test_suite_name, test_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  832-block  0
    %%%%%:  832-block  1
        -:  833:}
        -:  834:
        -:  835:#if GTEST_HAS_SEH
        -:  836:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  837:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  838:// This function is useful as an __except condition.
        -:  839:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  840:  // Google Test should handle a SEH exception if:
        -:  841:  //   1. the user wants it to, AND
        -:  842:  //   2. this is not a breakpoint exception, AND
        -:  843:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  844:  //      apparently).
        -:  845:  //
        -:  846:  // SEH exception code for C++ exceptions.
        -:  847:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  848:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  849:
        -:  850:  bool should_handle = true;
        -:  851:
        -:  852:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  853:    should_handle = false;
        -:  854:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  855:    should_handle = false;
        -:  856:  else if (exception_code == kCxxExceptionCode)
        -:  857:    should_handle = false;
        -:  858:
        -:  859:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  860:}
        -:  861:#endif  // GTEST_HAS_SEH
        -:  862:
        -:  863:}  // namespace internal
        -:  864:
        -:  865:// The c'tor sets this object as the test part result reporter used by
        -:  866:// Google Test.  The 'result' parameter specifies where to report the
        -:  867:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  868:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  869:    TestPartResultArray* result)
    #####:  870:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  870-block  0
call    0 never executed
    $$$$$:  870-block  1
call    1 never executed
    #####:  871:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:}
    %%%%%:  872-block  0
        -:  873:
        -:  874:// The c'tor sets this object as the test part result reporter used by
        -:  875:// Google Test.  The 'result' parameter specifies where to report the
        -:  876:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  877:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  878:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  879:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  879-block  0
call    0 never executed
    $$$$$:  879-block  1
call    1 never executed
    #####:  880:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  881:}
    %%%%%:  881-block  0
        -:  882:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  883:void ScopedFakeTestPartResultReporter::Init() {
    #####:  884:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  884-block  0
call    0 never executed
    #####:  885:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  886:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  886-block  0
call    0 never executed
    #####:  887:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  888:  } else {
    #####:  889:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  889-block  0
call    0 never executed
    #####:  890:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  891:  }
    #####:  892:}
        -:  893:
        -:  894:// The d'tor restores the test part result reporter used by Google Test
        -:  895:// before.
    #####:  896:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  897:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  898:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  899:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  900:  } else {
    #####:  901:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  902:  }
    #####:  903:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  896:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  897:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  898:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  899:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  900:  } else {
        -:  901:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  902:  }
    #####:  903:}
    %%%%%:  903-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  896:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  896-block  0
call    0 never executed
    #####:  897:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  897-block  0
call    0 never executed
    #####:  898:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  899:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  899-block  0
call    0 never executed
        -:  900:  } else {
    #####:  901:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  901-block  0
call    0 never executed
        -:  902:  }
    #####:  903:}
------------------
        -:  904:
        -:  905:// Increments the test part result count and remembers the result.
        -:  906:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  907:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  908:    const TestPartResult& result) {
    #####:  909:  result_->Append(result);
    %%%%%:  909-block  0
call    0 never executed
    #####:  910:}
        -:  911:
        -:  912:namespace internal {
        -:  913:
        -:  914:// Returns the type ID of ::testing::Test.  We should always call this
        -:  915:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  916:// testing::Test.  This is to work around a suspected linker bug when
        -:  917:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  918:// GetTypeId< ::testing::Test>() to return different values depending
        -:  919:// on whether the call is from the Google Test framework itself or
        -:  920:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  921:// return the same value, as it always calls GetTypeId<>() from the
        -:  922:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 1 returned 100% blocks executed 100%
        1:  923:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        1:  923-block  0
call    0 returned 1
        -:  924:
        -:  925:// The value of GetTestTypeId() as seen from within the Google Test
        -:  926:// library.  This is solely for testing GetTestTypeId().
        -:  927:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  928:
        -:  929:// This predicate-formatter checks that 'results' contains a test part
        -:  930:// failure of the given type and that the failure message contains the
        -:  931:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  932:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  933:                                     const char* /* type_expr */,
        -:  934:                                     const char* /* substr_expr */,
        -:  935:                                     const TestPartResultArray& results,
        -:  936:                                     TestPartResult::Type type,
        -:  937:                                     const std::string& substr) {
        -:  938:  const std::string expected(type == TestPartResult::kFatalFailure
        -:  939:                                 ? "1 fatal failure"
    #####:  940:                                 : "1 non-fatal failure");
    %%%%%:  940-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  940-block  1
    %%%%%:  940-block  2
    %%%%%:  940-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  940-block  4
    $$$$$:  940-block  5
call    7 never executed
    #####:  941:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  941-block  0
call    3 never executed
    $$$$$:  941-block  1
call    4 never executed
    #####:  942:  if (results.size() != 1) {
    %%%%%:  942-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:    msg << "Expected: " << expected << "\n"
    %%%%%:  943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  943-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  943-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  944:        << "  Actual: " << results.size() << " failures";
    %%%%%:  944-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  944-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  944-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  944-block  3
    #####:  945:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  945-block  0
    %%%%%:  945-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  945-block  2
    #####:  946:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  946-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  946-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  947:    }
    #####:  948:    return AssertionFailure() << msg;
    %%%%%:  948-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  948-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  948-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  948-block  3
call    9 never executed
    $$$$$:  948-block  4
call   10 never executed
    $$$$$:  948-block  5
        -:  949:  }
        -:  950:
    #####:  951:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:  if (r.type() != type) {
    %%%%%:  952-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  953-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  953-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  953-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  953-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  953-block  4
call   12 never executed
    $$$$$:  953-block  5
call   13 never executed
    $$$$$:  953-block  6
    #####:  954:                              << "  Actual:\n"
    %%%%%:  954-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  955:                              << r;
    %%%%%:  955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  955-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  956:  }
        -:  957:
    #####:  958:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  958-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  959:    return AssertionFailure()
    %%%%%:  959-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  959-block  1
call    3 never executed
    $$$$$:  959-block  2
call    4 never executed
    $$$$$:  959-block  3
    #####:  960:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%:  960-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  960-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  960-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  960-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  960-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  961:           << "  Actual:\n"
    %%%%%:  961-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  962:           << r;
    %%%%%:  962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  962-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  963:  }
        -:  964:
    #####:  965:  return AssertionSuccess();
    %%%%%:  965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  966:}
        -:  967:
        -:  968:// The constructor of SingleFailureChecker remembers where to look up
        -:  969:// test part results, what type of failure we expect, and what
        -:  970:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  971:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  972:                                           TestPartResult::Type type,
    #####:  973:                                           const std::string& substr)
    #####:  974:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  974-block  0
call    0 never executed
        -:  975:
        -:  976:// The destructor of SingleFailureChecker verifies that the given
        -:  977:// TestPartResultArray contains exactly one failure that has the given
        -:  978:// type and contains the given substring.  If that's not the case, a
        -:  979:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  980:SingleFailureChecker::~SingleFailureChecker() {
call    0 never executed
    #####:  981:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  981-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  981-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  981-block  2
call   10 never executed
    #####:  982:}
        -:  983:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  984:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  985:    UnitTestImpl* unit_test)
        1:  986:    : unit_test_(unit_test) {}
        1:  986-block  0
call    0 returned 1
        -:  987:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  988:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  989:    const TestPartResult& result) {
    #####:  990:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  990-block  0
call    0 never executed
call    1 never executed
    #####:  991:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  992:}
        -:  993:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  994:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  995:    UnitTestImpl* unit_test)
        1:  996:    : unit_test_(unit_test) {}
        1:  996-block  0
call    0 returned 1
        -:  997:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  998:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -:  999:    const TestPartResult& result) {
    #####: 1000:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1000-block  0
call    0 never executed
call    1 never executed
    #####: 1001:}
        -: 1002:
        -: 1003:// Returns the global test part result reporter.
        -: 1004:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1005:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1006:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:  return global_test_part_result_repoter_;
    %%%%%: 1007-block  0
call    0 never executed
    %%%%%: 1007-block  1
        -: 1008:}
        -: 1009:
        -: 1010:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1011:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1012:    TestPartResultReporterInterface* reporter) {
    #####: 1013:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1014:  global_test_part_result_repoter_ = reporter;
    %%%%%: 1014-block  0
call    0 never executed
    #####: 1015:}
        -: 1016:
        -: 1017:// Returns the test part result reporter for the current thread.
        -: 1018:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1019:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1020:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1020-block  0
call    0 never executed
        -: 1021:}
        -: 1022:
        -: 1023:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1024:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1025:    TestPartResultReporterInterface* reporter) {
    #####: 1026:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1026-block  0
call    0 never executed
    #####: 1027:}
        -: 1028:
        -: 1029:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1030:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1031:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1031-block  0
call    0 never executed
        -: 1032:}
        -: 1033:
        -: 1034:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1035:int UnitTestImpl::failed_test_suite_count() const {
        2: 1036:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1036-block  0
call    0 returned 2
        -: 1037:}
        -: 1038:
        -: 1039:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1040:int UnitTestImpl::total_test_suite_count() const {
        2: 1041:  return static_cast<int>(test_suites_.size());
        2: 1041-block  0
call    0 returned 2
        -: 1042:}
        -: 1043:
        -: 1044:// Gets the number of all test suites that contain at least one test
        -: 1045:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1046:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1047:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1047-block  0
call    0 returned 2
        -: 1048:}
        -: 1049:
        -: 1050:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1051:int UnitTestImpl::successful_test_count() const {
        1: 1052:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1052-block  0
call    0 returned 1
        -: 1053:}
        -: 1054:
        -: 1055:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1056:int UnitTestImpl::skipped_test_count() const {
        1: 1057:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1057-block  0
call    0 returned 1
        -: 1058:}
        -: 1059:
        -: 1060:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1061:int UnitTestImpl::failed_test_count() const {
    #####: 1062:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1062-block  0
call    0 never executed
        -: 1063:}
        -: 1064:
        -: 1065:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1066:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1067:  return SumOverTestSuiteList(test_suites_,
        1: 1067-block  0
call    0 returned 1
        1: 1068:                              &TestSuite::reportable_disabled_test_count);
        -: 1069:}
        -: 1070:
        -: 1071:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1072:int UnitTestImpl::disabled_test_count() const {
    #####: 1073:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1073-block  0
call    0 never executed
        -: 1074:}
        -: 1075:
        -: 1076:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1077:int UnitTestImpl::reportable_test_count() const {
    #####: 1078:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1078-block  0
call    0 never executed
        -: 1079:}
        -: 1080:
        -: 1081:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1082:int UnitTestImpl::total_test_count() const {
    #####: 1083:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1083-block  0
call    0 never executed
        -: 1084:}
        -: 1085:
        -: 1086:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1087:int UnitTestImpl::test_to_run_count() const {
        2: 1088:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1088-block  0
call    0 returned 2
        -: 1089:}
        -: 1090:
        -: 1091:// Returns the current OS stack trace as an std::string.
        -: 1092://
        -: 1093:// The maximum number of stack frames to be included is specified by
        -: 1094:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1095:// specifies the number of top frames to be skipped, which doesn't
        -: 1096:// count against the number of frames to be included.
        -: 1097://
        -: 1098:// For example, if Foo() calls Bar(), which in turn calls
        -: 1099:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1100:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1101:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1102:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1102-block  0
call    0 never executed
        -: 1103:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1104:      // Skips the user-specified number of frames plus this function
        -: 1105:      // itself.
    #####: 1106:  );  // NOLINT
call    0 never executed
        -: 1107:}
        -: 1108:
        -: 1109:// A helper class for measuring elapsed times.
        -: 1110:class Timer {
        -: 1111: public:
function _ZN7testing8internal5TimerC2Ev called 20 returned 100% blocks executed 100%
       20: 1112:  Timer() : start_(std::chrono::steady_clock::now()) {}
       20: 1112-block  0
call    0 returned 20
        -: 1113:
        -: 1114:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 20 returned 100% blocks executed 88%
       20: 1115:  TimeInMillis Elapsed() {
       20: 1116:    return std::chrono::duration_cast<std::chrono::milliseconds>(
       40: 1117:               std::chrono::steady_clock::now() - start_)
       20: 1117-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0 (throw)
       20: 1117-block  1
call    4 returned 20
branch  5 taken 20 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$: 1117-block  2
       40: 1118:        .count();
       20: 1118-block  0
call    0 returned 20
       20: 1118-block  1
        -: 1119:  }
        -: 1120:
        -: 1121: private:
        -: 1122:  std::chrono::steady_clock::time_point start_;
        -: 1123:};
        -: 1124:
        -: 1125:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1126:// around subject to adjustments by the system, to measure elapsed time use
        -: 1127:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 21 returned 100% blocks executed 80%
       21: 1128:TimeInMillis GetTimeInMillis() {
       21: 1129:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       21: 1130:             std::chrono::system_clock::now() -
call    0 returned 21
    $$$$$: 1130-block  0
    $$$$$: 1130-block  1
       63: 1131:             std::chrono::system_clock::from_time_t(0))
       21: 1131-block  0
call    0 returned 21
call    1 returned 21
branch  2 taken 21 (fallthrough)
branch  3 taken 0 (throw)
       21: 1131-block  1
call    4 returned 21
branch  5 taken 21 (fallthrough)
branch  6 taken 0 (throw)
       42: 1132:      .count();
       21: 1132-block  0
call    0 returned 21
       21: 1132-block  1
        -: 1133:}
        -: 1134:
        -: 1135:// Utilities
        -: 1136:
        -: 1137:// class String.
        -: 1138:
        -: 1139:#if GTEST_OS_WINDOWS_MOBILE
        -: 1140:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1141:// memory using new. The caller is responsible for deleting the return
        -: 1142:// value using delete[]. Returns the wide string, or NULL if the
        -: 1143:// input is NULL.
        -: 1144:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1145:  if (!ansi) return nullptr;
        -: 1146:  const int length = strlen(ansi);
        -: 1147:  const int unicode_length =
        -: 1148:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1149:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1150:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1151:  unicode[unicode_length] = 0;
        -: 1152:  return unicode;
        -: 1153:}
        -: 1154:
        -: 1155:// Creates an ANSI string from the given wide string, allocating
        -: 1156:// memory using new. The caller is responsible for deleting the return
        -: 1157:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1158:// input is NULL.
        -: 1159:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1160:  if (!utf16_str) return nullptr;
        -: 1161:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1162:                                              0, nullptr, nullptr);
        -: 1163:  char* ansi = new char[ansi_length + 1];
        -: 1164:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1165:                      nullptr);
        -: 1166:  ansi[ansi_length] = 0;
        -: 1167:  return ansi;
        -: 1168:}
        -: 1169:
        -: 1170:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1171:
        -: 1172:// Compares two C strings.  Returns true if and only if they have the same
        -: 1173:// content.
        -: 1174://
        -: 1175:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1176:// C string is considered different to any non-NULL C string,
        -: 1177:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1178:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1179:  if (lhs == nullptr) return rhs == nullptr;
        2: 1179-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1179-block  1
        -: 1180:
       2*: 1181:  if (rhs == nullptr) return false;
        2: 1181-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1181-block  1
        -: 1182:
        2: 1183:  return strcmp(lhs, rhs) == 0;
        2: 1183-block  0
        -: 1184:}
        -: 1185:
        -: 1186:#if GTEST_HAS_STD_WSTRING
        -: 1187:
        -: 1188:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1189:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1190:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1191:                                     Message* msg) {
    #####: 1192:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1192-block  0
    %%%%%: 1192-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1192-block  2
    #####: 1193:    if (wstr[i] != L'\0') {
    %%%%%: 1193-block  0
branch  0 never executed
branch  1 never executed
    #####: 1194:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1194-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1194-block  1
call    4 never executed
    $$$$$: 1194-block  2
call    5 never executed
    $$$$$: 1194-block  3
call    6 never executed
    #####: 1195:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1195-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1195-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1195-block  2
        -: 1196:    } else {
    #####: 1197:      *msg << '\0';
    %%%%%: 1197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1198:      i++;
    %%%%%: 1198-block  0
        -: 1199:    }
        -: 1200:  }
    #####: 1201:}
    %%%%%: 1201-block  0
        -: 1202:
        -: 1203:#endif  // GTEST_HAS_STD_WSTRING
        -: 1204:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 4 returned 100% blocks executed 69%
        4: 1205:void SplitString(const ::std::string& str, char delimiter,
        -: 1206:                 ::std::vector< ::std::string>* dest) {
        8: 1207:  ::std::vector< ::std::string> parsed;
        4: 1207-block  0
call    0 returned 4
call    1 returned 4
    $$$$$: 1207-block  1
call    2 never executed
        4: 1208:  ::std::string::size_type pos = 0;
        6: 1209:  while (::testing::internal::AlwaysTrue()) {
        6: 1209-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1209-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 0
        6: 1210:    const ::std::string::size_type colon = str.find(delimiter, pos);
        6: 1210-block  0
call    0 returned 6
        6: 1211:    if (colon == ::std::string::npos) {
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 1212:      parsed.push_back(str.substr(pos));
        4: 1212-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1212-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1212-block  2
call    6 returned 4
    $$$$$: 1212-block  3
call    7 never executed
    $$$$$: 1212-block  4
        4: 1213:      break;
        -: 1214:    } else {
        2: 1215:      parsed.push_back(str.substr(pos, colon - pos));
        2: 1215-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 1215-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 1215-block  2
call    6 returned 2
    $$$$$: 1215-block  3
call    7 never executed
    $$$$$: 1215-block  4
        2: 1216:      pos = colon + 1;
        -: 1217:    }
        -: 1218:  }
        4: 1219:  dest->swap(parsed);
        4: 1219-block  0
call    0 returned 4
        4: 1220:}
        -: 1221:
        -: 1222:}  // namespace internal
        -: 1223:
        -: 1224:// Constructs an empty Message.
        -: 1225:// We allocate the stringstream separately because otherwise each use of
        -: 1226:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1227:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1228:// the stack space.
function _ZN7testing7MessageC2Ev called 74 returned 100% blocks executed 73%
       74: 1229:Message::Message() : ss_(new ::std::stringstream) {
       74: 1229-block  0
call    0 returned 74
call    1 returned 74
branch  2 taken 74 (fallthrough)
branch  3 taken 0 (throw)
       74: 1229-block  1
call    4 returned 74
    $$$$$: 1229-block  2
call    5 never executed
    $$$$$: 1229-block  3
call    6 never executed
        -: 1230:  // By default, we want there to be enough precision when printing
        -: 1231:  // a double to a Message.
       74: 1232:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 74
call    1 returned 74
call    2 returned 74
branch  3 taken 74 (fallthrough)
branch  4 taken 0 (throw)
       74: 1233:}
       74: 1233-block  0
        -: 1234:
        -: 1235:// These two overloads allow streaming a wide C string to a Message
        -: 1236:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1237:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1238:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1238-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1238-block  1
call    4 never executed
    %%%%%: 1238-block  2
    $$$$$: 1238-block  3
call    5 never executed
        -: 1239:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1240:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1241:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1241-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1241-block  1
call    4 never executed
    %%%%%: 1241-block  2
    $$$$$: 1241-block  3
call    5 never executed
        -: 1242:}
        -: 1243:
        -: 1244:#if GTEST_HAS_STD_WSTRING
        -: 1245:// Converts the given wide string to a narrow string using the UTF-8
        -: 1246:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1247:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1248:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1248-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1249:  return *this;
        -: 1250:}
        -: 1251:#endif  // GTEST_HAS_STD_WSTRING
        -: 1252:
        -: 1253:// Gets the text streamed to this object so far as an std::string.
        -: 1254:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 74 returned 100% blocks executed 100%
       74: 1255:std::string Message::GetString() const {
       74: 1256:  return internal::StringStreamToString(ss_.get());
       74: 1256-block  0
call    0 returned 74
call    1 returned 74
        -: 1257:}
        -: 1258:
        -: 1259:namespace internal {
        -: 1260:
        -: 1261:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1262:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1263:                                            const std::vector<size_t>& right) {
        -: 1264:  std::vector<std::vector<double> > costs(
    #####: 1265:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1265-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1265-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1265-block  2
    $$$$$: 1265-block  3
    $$$$$: 1265-block  4
    $$$$$: 1265-block  5
call   13 never executed
        -: 1266:  std::vector<std::vector<EditType> > best_move(
    #####: 1267:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1267-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 1267-block  1
call   12 never executed
    $$$$$: 1267-block  2
    $$$$$: 1267-block  3
    $$$$$: 1267-block  4
    $$$$$: 1267-block  5
call   13 never executed
        -: 1268:
        -: 1269:  // Populate for empty right.
    #####: 1270:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1271:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1271-block  0
call    0 never executed
call    1 never executed
    #####: 1272:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1273:  }
        -: 1274:  // Populate for empty left.
    #####: 1275:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1275-block  0
    %%%%%: 1275-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1276:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1276-block  0
call    0 never executed
call    1 never executed
    #####: 1277:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1278:  }
        -: 1279:
    #####: 1280:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1280-block  0
    %%%%%: 1280-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1280-block  2
    #####: 1281:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1281-block  0
    %%%%%: 1281-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1281-block  2
    #####: 1282:      if (left[l_i] == right[r_i]) {
    %%%%%: 1282-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1283:        // Found a match. Consume it.
    #####: 1284:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1284-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1285:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1286:        continue;
        -: 1287:      }
        -: 1288:
    #####: 1289:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1289-block  0
call    0 never executed
call    1 never executed
    #####: 1290:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1291:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1292:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1292-block  0
branch  2 never executed
branch  3 never executed
    #####: 1293:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1293-block  0
call    0 never executed
call    1 never executed
    #####: 1294:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1295:      } else if (remove < add && remove < replace) {
    %%%%%: 1295-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1295-block  1
branch  2 never executed
branch  3 never executed
    #####: 1296:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1296-block  0
call    0 never executed
call    1 never executed
    #####: 1297:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1298:      } else {
        -: 1299:        // We make replace a little more expensive than add/remove to lower
        -: 1300:        // their priority.
    #####: 1301:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1301-block  0
call    0 never executed
call    1 never executed
    #####: 1302:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1303:      }
        -: 1304:    }
        -: 1305:  }
        -: 1306:
        -: 1307:  // Reconstruct the best path. We do it in reverse order.
    #####: 1308:  std::vector<EditType> best_path;
    %%%%%: 1308-block  0
call    0 never executed
    #####: 1309:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1309-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1309-block  1
branch  4 never executed
branch  5 never executed
    #####: 1310:    EditType move = best_move[l_i][r_i];
    %%%%%: 1310-block  0
call    0 never executed
call    1 never executed
    #####: 1311:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1312:    l_i -= move != kAdd;
    #####: 1313:    r_i -= move != kRemove;
    %%%%%: 1313-block  0
        -: 1314:  }
    #####: 1315:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1315-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1316:  return best_path;
    %%%%%: 1316-block  0
    %%%%%: 1316-block  1
        -: 1317:}
        -: 1318:
        -: 1319:namespace {
        -: 1320:
        -: 1321:// Helper class to convert string into ids with deduplication.
        -: 1322:class InternalStrings {
        -: 1323: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1324:  size_t GetId(const std::string& str) {
    #####: 1325:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1326:    if (it != ids_.end()) return it->second;
    %%%%%: 1326-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1326-block  1
call    4 never executed
    #####: 1327:    size_t id = ids_.size();
    %%%%%: 1327-block  0
call    0 never executed
    #####: 1328:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1328-block  0
        -: 1329:  }
        -: 1330:
        -: 1331: private:
        -: 1332:  typedef std::map<std::string, size_t> IdMap;
        -: 1333:  IdMap ids_;
        -: 1334:};
        -: 1335:
        -: 1336:}  // namespace
        -: 1337:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1338:std::vector<EditType> CalculateOptimalEdits(
        -: 1339:    const std::vector<std::string>& left,
        -: 1340:    const std::vector<std::string>& right) {
    #####: 1341:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1341-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1341-block  1
call    2 never executed
call    3 never executed
    $$$$$: 1341-block  2
call    4 never executed
    $$$$$: 1341-block  3
call    5 never executed
        -: 1342:  {
    #####: 1343:    InternalStrings intern_table;
call    0 never executed
    %%%%%: 1343-block  0
call    1 never executed
    $$$$$: 1343-block  1
call    2 never executed
    #####: 1344:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1344-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1345:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1345-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1345-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1345-block  2
    $$$$$: 1345-block  3
        -: 1346:    }
    #####: 1347:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1347-block  0
    %%%%%: 1347-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1348:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1348-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1348-block  2
    $$$$$: 1348-block  3
        -: 1349:    }
        -: 1350:  }
    #####: 1351:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1351-block  0
        -: 1352:}
        -: 1353:
        -: 1354:namespace {
        -: 1355:
        -: 1356:// Helper class that holds the state for one hunk and prints it out to the
        -: 1357:// stream.
        -: 1358:// It reorders adds/removes when possible to group all removes before all
        -: 1359:// adds. It also adds the hunk header before printint into the stream.
        -: 1360:class Hunk {
        -: 1361: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 1362:  Hunk(size_t left_start, size_t right_start)
    #####: 1363:      : left_start_(left_start),
        -: 1364:        right_start_(right_start),
        -: 1365:        adds_(),
        -: 1366:        removes_(),
    #####: 1367:        common_() {}
    %%%%%: 1367-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1368:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1369:  void PushLine(char edit, const char* line) {
    #####: 1370:    switch (edit) {
    %%%%%: 1370-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1371:      case ' ':
    #####: 1372:        ++common_;
    #####: 1373:        FlushEdits();
    %%%%%: 1373-block  0
call    0 never executed
    #####: 1374:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1374-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1374-block  1
    $$$$$: 1374-block  2
call    6 never executed
    #####: 1375:        break;
    %%%%%: 1375-block  0
    #####: 1376:      case '-':
    #####: 1377:        ++removes_;
    #####: 1378:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1378-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1378-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1378-block  2
    $$$$$: 1378-block  3
call    6 never executed
    #####: 1379:        break;
    %%%%%: 1379-block  0
    #####: 1380:      case '+':
    #####: 1381:        ++adds_;
    #####: 1382:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1382-block  2
    #####: 1383:        break;
    %%%%%: 1383-block  0
        -: 1384:    }
    #####: 1385:  }
    %%%%%: 1385-block  0
        -: 1386:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1387:  void PrintTo(std::ostream* os) {
    #####: 1388:    PrintHeader(os);
    %%%%%: 1388-block  0
call    0 never executed
    #####: 1389:    FlushEdits();
call    0 never executed
    #####: 1390:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1391:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1392:         it != hunk_.end(); ++it) {
    %%%%%: 1392-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1392-block  1
call    5 never executed
    #####: 1393:      *os << it->first << it->second << "\n";
    %%%%%: 1393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1393-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1393-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1394:    }
    #####: 1395:  }
    %%%%%: 1395-block  0
        -: 1396:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1397:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1397-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1397-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1397-block  2
    %%%%%: 1397-block  3
    %%%%%: 1397-block  4
        -: 1398:
        -: 1399: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1400:  void FlushEdits() {
    #####: 1401:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1401-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1402:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1403:  }
        -: 1404:
        -: 1405:  // Print a unified diff header for one hunk.
        -: 1406:  // The format is
        -: 1407:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1408:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1409:  void PrintHeader(std::ostream* ss) const {
    #####: 1410:    *ss << "@@ ";
    %%%%%: 1410-block  0
call    0 never executed
    #####: 1411:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1412:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1412-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1413:    }
    #####: 1414:    if (removes_ && adds_) {
    %%%%%: 1414-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1414-block  1
branch  2 never executed
branch  3 never executed
    #####: 1415:      *ss << " ";
    %%%%%: 1415-block  0
call    0 never executed
        -: 1416:    }
    #####: 1417:    if (adds_) {
    %%%%%: 1417-block  0
branch  0 never executed
branch  1 never executed
    #####: 1418:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1418-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1419:    }
    #####: 1420:    *ss << " @@\n";
    %%%%%: 1420-block  0
call    0 never executed
    #####: 1421:  }
        -: 1422:
        -: 1423:  size_t left_start_, right_start_;
        -: 1424:  size_t adds_, removes_, common_;
        -: 1425:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1426:};
        -: 1427:
        -: 1428:}  // namespace
        -: 1429:
        -: 1430:// Create a list of diff hunks in Unified diff format.
        -: 1431:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1432:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1433:// addition.
        -: 1434:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1435:// If two hunks are close enough that their contexts overlap, then they are
        -: 1436:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1437:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1438:                              const std::vector<std::string>& right,
        -: 1439:                              size_t context) {
    #####: 1440:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1440-block  1
call    4 never executed
        -: 1441:
    #####: 1442:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1443:  std::stringstream ss;
    %%%%%: 1443-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1443-block  1
call    3 never executed
    $$$$$: 1443-block  2
call    4 never executed
    #####: 1444:  while (edit_i < edits.size()) {
    %%%%%: 1444-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1444-block  1
        -: 1445:    // Find first edit.
    #####: 1446:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1446-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1446-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1446-block  2
    %%%%%: 1446-block  3
    %%%%%: 1446-block  4
branch  6 never executed
branch  7 never executed
    #####: 1447:      ++l_i;
    #####: 1448:      ++r_i;
    #####: 1449:      ++edit_i;
    %%%%%: 1449-block  0
        -: 1450:    }
        -: 1451:
        -: 1452:    // Find the first line to include in the hunk.
    #####: 1453:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1453-block  0
call    0 never executed
    #####: 1454:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 1454-block  0
call    1 never executed
    #####: 1455:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1455-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1455-block  1
    #####: 1456:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1456-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1457:    }
        -: 1458:
        -: 1459:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1460:    // is over.
    #####: 1461:    size_t n_suffix = 0;
    %%%%%: 1461-block  0
    #####: 1462:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1462-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1463:      if (n_suffix >= context) {
    %%%%%: 1463-block  0
branch  0 never executed
branch  1 never executed
        -: 1464:        // Continue only if the next hunk is very close.
    #####: 1465:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1465-block  0
call    0 never executed
call    1 never executed
    #####: 1466:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1466-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1466-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1466-block  2
    %%%%%: 1466-block  3
    %%%%%: 1466-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 1466-block  5
call    9 never executed
    #####: 1467:        if (it == edits.end() ||
    %%%%%: 1467-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1467-block  1
    %%%%%: 1467-block  2
    #####: 1468:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1468-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1468-block  1
branch  4 never executed
branch  5 never executed
        -: 1469:          // There is no next edit or it is too far away.
    #####: 1470:          break;
    %%%%%: 1470-block  0
        -: 1471:        }
        -: 1472:      }
        -: 1473:
    #####: 1474:      EditType edit = edits[edit_i];
    %%%%%: 1474-block  0
call    0 never executed
        -: 1475:      // Reset count when a non match is found.
    #####: 1476:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1476-block  0
    %%%%%: 1476-block  1
        -: 1477:
    #####: 1478:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1478-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1478-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1478-block  2
branch  4 never executed
branch  5 never executed
    #####: 1479:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1479-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1479-block  1
    %%%%%: 1479-block  2
    %%%%%: 1479-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1480:      }
    #####: 1481:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1481-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1481-block  1
branch  2 never executed
branch  3 never executed
    #####: 1482:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1482-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1483:      }
        -: 1484:
        -: 1485:      // Advance indices, depending on edit type.
    #####: 1486:      l_i += edit != kAdd;
    #####: 1487:      r_i += edit != kRemove;
    %%%%%: 1487-block  0
        -: 1488:    }
        -: 1489:
    #####: 1490:    if (!hunk.has_edits()) {
    %%%%%: 1490-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1491:      // We are done. We don't want this hunk.
    #####: 1492:      break;
    %%%%%: 1492-block  0
        -: 1493:    }
        -: 1494:
    #####: 1495:    hunk.PrintTo(&ss);
    %%%%%: 1495-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1496:  }
    #####: 1497:  return ss.str();
    %%%%%: 1497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1497-block  1
        -: 1498:}
        -: 1499:
        -: 1500:}  // namespace edit_distance
        -: 1501:
        -: 1502:namespace {
        -: 1503:
        -: 1504:// The string representation of the values received in EqFailure() are already
        -: 1505:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1506:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1507:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1508:  std::vector<std::string> lines;
    %%%%%: 1508-block  0
call    0 never executed
    #####: 1509:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1510:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1510-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1510-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1510-block  2
    %%%%%: 1510-block  3
    %%%%%: 1510-block  4
branch  8 never executed
branch  9 never executed
    #####: 1511:    ++start;
    #####: 1512:    --end;
    %%%%%: 1512-block  0
        -: 1513:  }
    #####: 1514:  bool escaped = false;
    #####: 1515:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1515-block  0
    %%%%%: 1515-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1515-block  2
    #####: 1516:    if (escaped) {
    %%%%%: 1516-block  0
branch  0 never executed
branch  1 never executed
    #####: 1517:      escaped = false;
    #####: 1518:      if (str[i] == 'n') {
    %%%%%: 1518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1519:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1519-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1519-block  2
call    6 never executed
    $$$$$: 1519-block  3
call    7 never executed
    $$$$$: 1519-block  4
    #####: 1520:        start = i + 1;
        -: 1521:      }
        -: 1522:    } else {
    #####: 1523:      escaped = str[i] == '\\';
    %%%%%: 1523-block  0
call    0 never executed
        -: 1524:    }
        -: 1525:  }
    #####: 1526:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1526-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1526-block  2
call    6 never executed
    $$$$$: 1526-block  3
call    7 never executed
    $$$$$: 1526-block  4
    #####: 1527:  return lines;
    %%%%%: 1527-block  0
        -: 1528:}
        -: 1529:
        -: 1530:}  // namespace
        -: 1531:
        -: 1532:// Constructs and returns the message for an equality assertion
        -: 1533:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1534://
        -: 1535:// The first four parameters are the expressions used in the assertion
        -: 1536:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1537:// where foo is 5 and bar is 6, we have:
        -: 1538://
        -: 1539://   lhs_expression: "foo"
        -: 1540://   rhs_expression: "bar"
        -: 1541://   lhs_value:      "5"
        -: 1542://   rhs_value:      "6"
        -: 1543://
        -: 1544:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1545:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1546:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1547:AssertionResult EqFailure(const char* lhs_expression,
        -: 1548:                          const char* rhs_expression,
        -: 1549:                          const std::string& lhs_value,
        -: 1550:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1551:  Message msg;
    %%%%%: 1551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1551-block  1
call    3 never executed
    #####: 1552:  msg << "Expected equality of these values:";
    %%%%%: 1552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1553:  msg << "\n  " << lhs_expression;
    %%%%%: 1553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1553-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1554:  if (lhs_value != lhs_expression) {
    %%%%%: 1554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1555:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1555-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1556:  }
    #####: 1557:  msg << "\n  " << rhs_expression;
    %%%%%: 1557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1558:  if (rhs_value != rhs_expression) {
    %%%%%: 1558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1559:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1559-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1559-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1560:  }
        -: 1561:
    #####: 1562:  if (ignoring_case) {
    %%%%%: 1562-block  0
branch  0 never executed
branch  1 never executed
    #####: 1563:    msg << "\nIgnoring case";
    %%%%%: 1563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1564:  }
        -: 1565:
    #####: 1566:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1566-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1566-block  2
    %%%%%: 1566-block  3
    %%%%%: 1566-block  4
branch  6 never executed
branch  7 never executed
    #####: 1567:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1567-block  1
call    4 never executed
    #####: 1568:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1568-block  1
call    3 never executed
    $$$$$: 1568-block  2
call    4 never executed
    #####: 1569:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1569-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1569-block  2
    %%%%%: 1569-block  3
    %%%%%: 1569-block  4
branch  6 never executed
branch  7 never executed
    #####: 1570:      msg << "\nWith diff:\n"
    %%%%%: 1570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1571:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1571-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1571-block  2
call    6 never executed
    $$$$$: 1571-block  3
call    7 never executed
    $$$$$: 1571-block  4
        -: 1572:    }
        -: 1573:  }
        -: 1574:
    #####: 1575:  return AssertionFailure() << msg;
    %%%%%: 1575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1575-block  3
call    9 never executed
call   10 never executed
    %%%%%: 1575-block  4
    $$$$$: 1575-block  5
call   11 never executed
    $$$$$: 1575-block  6
        -: 1576:}
        -: 1577:
        -: 1578:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1579:std::string GetBoolAssertionFailureMessage(
        -: 1580:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1581:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1582:  const char* actual_message = assertion_result.message();
    %%%%%: 1582-block  0
call    0 never executed
    #####: 1583:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1583-block  0
call    3 never executed
    $$$$$: 1583-block  1
call    4 never executed
    #####: 1584:  msg << "Value of: " << expression_text
    %%%%%: 1584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1584-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1585:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1585-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1586:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1586-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1586-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1586-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1586-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1587:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1587-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1588:  return msg.GetString();
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1588-block  1
        -: 1589:}
        -: 1590:
        -: 1591:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1592:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1593:                                     const char* abs_error_expr, double val1,
        -: 1594:                                     double val2, double abs_error) {
    #####: 1595:  const double diff = fabs(val1 - val2);
    #####: 1596:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1596-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1596-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1597:
        -: 1598:  // Find the value which is closest to zero.
    #####: 1599:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1599-block  0
call    0 never executed
        -: 1600:  // Find the distance to the next double from that value.
        -: 1601:  const double epsilon =
    #####: 1602:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1603:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1604:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1605:  // message so that the situation can be more easily understood without
        -: 1606:  // requiring exotic floating-point knowledge.
        -: 1607:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1608:  // that an equality check was actually intended.
    #####: 1609:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1609-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1609-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1609-block  2
    %%%%%: 1609-block  3
    %%%%%: 1609-block  4
branch  8 never executed
branch  9 never executed
    #####: 1610:      abs_error < epsilon) {
    %%%%%: 1610-block  0
branch  0 never executed
branch  1 never executed
    #####: 1611:    return AssertionFailure()
    %%%%%: 1611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1611-block  1
call    3 never executed
    $$$$$: 1611-block  2
call    4 never executed
    $$$$$: 1611-block  3
    #####: 1612:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1612-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1612-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1612-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1612-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1613:           << diff << ", where\n"
    %%%%%: 1613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1614:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1614-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1614-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1614-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1615:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1615-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1615-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1615-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1616:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1616-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1617:           << " which is smaller than the minimum distance between doubles for "
    #####: 1618:              "numbers of this magnitude which is "
    %%%%%: 1618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1619:           << epsilon
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1620:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1621:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1621-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1622:  }
    #####: 1623:  return AssertionFailure()
    %%%%%: 1623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1623-block  1
call    3 never executed
    $$$$$: 1623-block  2
call    4 never executed
    $$$$$: 1623-block  3
    #####: 1624:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1624-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1624-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1624-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1625:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1625-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1625-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1625-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1626:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1626-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1626-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1626-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1627:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1627-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1627-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1627-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1628:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1628-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1628-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1628-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1628-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1629:}
        -: 1630:
        -: 1631:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1632:template <typename RawType>
    #####: 1633:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1634:                                RawType val1, RawType val2) {
        -: 1635:  // Returns success if val1 is less than val2,
    #####: 1636:  if (val1 < val2) {
    #####: 1637:    return AssertionSuccess();
        -: 1638:  }
        -: 1639:
        -: 1640:  // or if val1 is almost equal to val2.
    #####: 1641:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1642:  if (lhs.AlmostEquals(rhs)) {
    #####: 1643:    return AssertionSuccess();
        -: 1644:  }
        -: 1645:
        -: 1646:  // Note that the above two checks will both fail if either val1 or
        -: 1647:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1648:  // any predicate involving a NaN must return false.
        -: 1649:
    #####: 1650:  ::std::stringstream val1_ss;
    #####: 1651:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1652:          << val1;
        -: 1653:
    #####: 1654:  ::std::stringstream val2_ss;
    #####: 1655:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1656:          << val2;
        -: 1657:
        -: 1658:  return AssertionFailure()
    #####: 1659:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1660:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1661:         << StringStreamToString(&val2_ss);
        -: 1662:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1633:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1634:                                RawType val1, RawType val2) {
        -: 1635:  // Returns success if val1 is less than val2,
    #####: 1636:  if (val1 < val2) {
    %%%%%: 1636-block  0
branch  0 never executed
branch  1 never executed
    #####: 1637:    return AssertionSuccess();
    %%%%%: 1637-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1638:  }
        -: 1639:
        -: 1640:  // or if val1 is almost equal to val2.
    #####: 1641:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1641-block  0
call    0 never executed
call    1 never executed
    #####: 1642:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1642-block  0
branch  3 never executed
branch  4 never executed
    #####: 1643:    return AssertionSuccess();
    %%%%%: 1643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1644:  }
        -: 1645:
        -: 1646:  // Note that the above two checks will both fail if either val1 or
        -: 1647:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1648:  // any predicate involving a NaN must return false.
        -: 1649:
    #####: 1650:  ::std::stringstream val1_ss;
    %%%%%: 1650-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1650-block  1
call    4 never executed
    #####: 1651:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1652:          << val1;
    %%%%%: 1652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1653:
    #####: 1654:  ::std::stringstream val2_ss;
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1654-block  1
call    3 never executed
    #####: 1655:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1656:          << val2;
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1657:
        -: 1658:  return AssertionFailure()
    #####: 1659:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1659-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1659-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1659-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1659-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1659-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1659-block  6
call   19 never executed
    $$$$$: 1659-block  7
    #####: 1660:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1660-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1660-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1660-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1660-block  4
call   13 never executed
    $$$$$: 1660-block  5
    #####: 1661:         << StringStreamToString(&val2_ss);
    %%%%%: 1661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1661-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1661-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1661-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1661-block  4
call   11 never executed
    $$$$$: 1661-block  5
        -: 1662:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1633:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1634:                                RawType val1, RawType val2) {
        -: 1635:  // Returns success if val1 is less than val2,
    #####: 1636:  if (val1 < val2) {
    %%%%%: 1636-block  0
branch  0 never executed
branch  1 never executed
    #####: 1637:    return AssertionSuccess();
    %%%%%: 1637-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1638:  }
        -: 1639:
        -: 1640:  // or if val1 is almost equal to val2.
    #####: 1641:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1641-block  0
call    0 never executed
call    1 never executed
    #####: 1642:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1642-block  0
branch  3 never executed
branch  4 never executed
    #####: 1643:    return AssertionSuccess();
    %%%%%: 1643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1644:  }
        -: 1645:
        -: 1646:  // Note that the above two checks will both fail if either val1 or
        -: 1647:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1648:  // any predicate involving a NaN must return false.
        -: 1649:
    #####: 1650:  ::std::stringstream val1_ss;
    %%%%%: 1650-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1650-block  1
call    4 never executed
    #####: 1651:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1652:          << val1;
    %%%%%: 1652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1653:
    #####: 1654:  ::std::stringstream val2_ss;
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1654-block  1
call    3 never executed
    #####: 1655:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1656:          << val2;
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1657:
        -: 1658:  return AssertionFailure()
    #####: 1659:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1659-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1659-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1659-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1659-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1659-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1659-block  6
call   19 never executed
    $$$$$: 1659-block  7
    #####: 1660:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1660-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1660-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1660-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1660-block  4
call   13 never executed
    $$$$$: 1660-block  5
    #####: 1661:         << StringStreamToString(&val2_ss);
    %%%%%: 1661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1661-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1661-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1661-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1661-block  4
call   11 never executed
    $$$$$: 1661-block  5
        -: 1662:}
------------------
        -: 1663:
        -: 1664:}  // namespace internal
        -: 1665:
        -: 1666:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1667:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1668:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1669:                        float val2) {
    #####: 1670:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1670-block  0
call    0 never executed
        -: 1671:}
        -: 1672:
        -: 1673:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1674:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1675:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1676:                         double val2) {
    #####: 1677:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1677-block  0
call    0 never executed
        -: 1678:}
        -: 1679:
        -: 1680:namespace internal {
        -: 1681:
        -: 1682:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1683:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1684:                               const char* rhs_expression, const char* lhs,
        -: 1685:                               const char* rhs) {
    #####: 1686:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1686-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1687:    return AssertionSuccess();
    %%%%%: 1687-block  0
call    0 never executed
        -: 1688:  }
        -: 1689:
    #####: 1690:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1690-block  0
call    3 never executed
    $$$$$: 1690-block  1
call    4 never executed
    $$$$$: 1690-block  2
    #####: 1691:                   PrintToString(rhs), false);
    %%%%%: 1691-block  0
call    0 never executed
    %%%%%: 1691-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1691-block  2
call    5 never executed
        -: 1692:}
        -: 1693:
        -: 1694:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1695:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1696:                                   const char* rhs_expression, const char* lhs,
        -: 1697:                                   const char* rhs) {
    #####: 1698:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1699:    return AssertionSuccess();
    %%%%%: 1699-block  0
call    0 never executed
        -: 1700:  }
        -: 1701:
    #####: 1702:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1702-block  0
call    3 never executed
    $$$$$: 1702-block  1
call    4 never executed
    $$$$$: 1702-block  2
    #####: 1703:                   PrintToString(rhs), true);
    %%%%%: 1703-block  0
call    0 never executed
    %%%%%: 1703-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1703-block  2
call    5 never executed
        -: 1704:}
        -: 1705:
        -: 1706:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1707:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1708:                               const char* s2_expression, const char* s1,
        -: 1709:                               const char* s2) {
    #####: 1710:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1711:    return AssertionSuccess();
    %%%%%: 1711-block  0
call    0 never executed
        -: 1712:  } else {
    #####: 1713:    return AssertionFailure()
    %%%%%: 1713-block  0
call    0 never executed
    %%%%%: 1713-block  1
call    1 never executed
    $$$$$: 1713-block  2
call    2 never executed
    #####: 1714:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1714-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1714-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1714-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1715:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1715-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1715-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1715-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1715-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1715-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1716:  }
        -: 1717:}
        -: 1718:
        -: 1719:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1720:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1721:                                   const char* s2_expression, const char* s1,
        -: 1722:                                   const char* s2) {
    #####: 1723:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1723-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1724:    return AssertionSuccess();
    %%%%%: 1724-block  0
call    0 never executed
        -: 1725:  } else {
    #####: 1726:    return AssertionFailure()
    %%%%%: 1726-block  0
call    0 never executed
    %%%%%: 1726-block  1
call    1 never executed
    $$$$$: 1726-block  2
call    2 never executed
    #####: 1727:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1727-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1727-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1727-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1728:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1728-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1728-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1728-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1728-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1728-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1729:  }
        -: 1730:}
        -: 1731:
        -: 1732:}  // namespace internal
        -: 1733:
        -: 1734:namespace {
        -: 1735:
        -: 1736:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1737:
        -: 1738:// This group of overloaded functions return true if and only if needle
        -: 1739:// is a substring of haystack.  NULL is considered a substring of
        -: 1740:// itself only.
        -: 1741:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1742:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1743:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1743-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1743-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1743-block  2
        -: 1744:
    #####: 1745:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1745-block  0
        -: 1746:}
        -: 1747:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1748:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1749:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1749-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1749-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1749-block  2
        -: 1750:
    #####: 1751:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1751-block  0
        -: 1752:}
        -: 1753:
        -: 1754:// StringType here can be either ::std::string or ::std::wstring.
        -: 1755:template <typename StringType>
    #####: 1756:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1757:  return haystack.find(needle) != StringType::npos;
        -: 1758:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1756:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1757:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1757-block  0
call    0 never executed
        -: 1758:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1756:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1757:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1757-block  0
call    0 never executed
        -: 1758:}
------------------
        -: 1759:
        -: 1760:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1761:// depending on the value of the expected_to_be_substring parameter.
        -: 1762:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1763:// or ::std::wstring.
        -: 1764:template <typename StringType>
    #####: 1765:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1766:                                const char* needle_expr,
        -: 1767:                                const char* haystack_expr,
        -: 1768:                                const StringType& needle,
        -: 1769:                                const StringType& haystack) {
    #####: 1770:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1771:    return AssertionSuccess();
        -: 1772:
    #####: 1773:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1774:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1775:  return AssertionFailure()
    #####: 1776:         << "Value of: " << needle_expr << "\n"
    #####: 1777:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1778:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1779:         << "a substring of " << haystack_expr << "\n"
    #####: 1780:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1781:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1765:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1766:                                const char* needle_expr,
        -: 1767:                                const char* haystack_expr,
        -: 1768:                                const StringType& needle,
        -: 1769:                                const StringType& haystack) {
    #####: 1770:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1771:    return AssertionSuccess();
    %%%%%: 1771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1772:
    #####: 1773:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1774:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1775:  return AssertionFailure()
    #####: 1776:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1776-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1776-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1776-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1776-block  4
call   12 never executed
    $$$$$: 1776-block  5
    #####: 1777:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1777-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1777-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1777-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1778:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1778-block  2
    %%%%%: 1778-block  3
    %%%%%: 1778-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1778-block  5
call    8 never executed
    $$$$$: 1778-block  6
    #####: 1779:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1780:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1780-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1781:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1765:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1766:                                const char* needle_expr,
        -: 1767:                                const char* haystack_expr,
        -: 1768:                                const StringType& needle,
        -: 1769:                                const StringType& haystack) {
    #####: 1770:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1771:    return AssertionSuccess();
    %%%%%: 1771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1772:
    #####: 1773:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1774:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1775:  return AssertionFailure()
    #####: 1776:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1776-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1776-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1776-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1776-block  4
call   12 never executed
    $$$$$: 1776-block  5
    #####: 1777:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1777-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1777-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1777-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1778:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1778-block  2
    %%%%%: 1778-block  3
    %%%%%: 1778-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1778-block  5
call    8 never executed
    $$$$$: 1778-block  6
    #####: 1779:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1780:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1780-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1781:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1765:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1766:                                const char* needle_expr,
        -: 1767:                                const char* haystack_expr,
        -: 1768:                                const StringType& needle,
        -: 1769:                                const StringType& haystack) {
    #####: 1770:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1771:    return AssertionSuccess();
    %%%%%: 1771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1772:
    #####: 1773:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1774:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1775:  return AssertionFailure()
    #####: 1776:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1776-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1776-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1776-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1776-block  4
call   12 never executed
    $$$$$: 1776-block  5
    #####: 1777:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1777-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1777-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1777-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1778:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1778-block  2
    %%%%%: 1778-block  3
    %%%%%: 1778-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1778-block  5
call    8 never executed
    $$$$$: 1778-block  6
    #####: 1779:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1780:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1780-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1781:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1765:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1766:                                const char* needle_expr,
        -: 1767:                                const char* haystack_expr,
        -: 1768:                                const StringType& needle,
        -: 1769:                                const StringType& haystack) {
    #####: 1770:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1771:    return AssertionSuccess();
    %%%%%: 1771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1772:
    #####: 1773:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1774:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1775:  return AssertionFailure()
    #####: 1776:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1776-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1776-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1776-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1776-block  4
call   12 never executed
    $$$$$: 1776-block  5
    #####: 1777:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1777-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1777-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1777-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1778:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1778-block  2
    %%%%%: 1778-block  3
    %%%%%: 1778-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1778-block  5
call    8 never executed
    $$$$$: 1778-block  6
    #####: 1779:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1780:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1780-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1781:}
------------------
        -: 1782:
        -: 1783:}  // namespace
        -: 1784:
        -: 1785:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1786:// substring of haystack (NULL is considered a substring of itself
        -: 1787:// only), and return an appropriate error message when they fail.
        -: 1788:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1789:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1790:                            const char* needle, const char* haystack) {
    #####: 1791:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1791-block  0
call    0 never executed
        -: 1792:}
        -: 1793:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1795:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1796:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1796-block  0
call    0 never executed
        -: 1797:}
        -: 1798:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1799:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1800:                               const char* haystack_expr, const char* needle,
        -: 1801:                               const char* haystack) {
    #####: 1802:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1802-block  0
call    0 never executed
        -: 1803:}
        -: 1804:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1805:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1806:                               const char* haystack_expr, const wchar_t* needle,
        -: 1807:                               const wchar_t* haystack) {
    #####: 1808:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1808-block  0
call    0 never executed
        -: 1809:}
        -: 1810:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1811:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1812:                            const ::std::string& needle,
        -: 1813:                            const ::std::string& haystack) {
    #####: 1814:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1814-block  0
call    0 never executed
        -: 1815:}
        -: 1816:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1817:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1818:                               const char* haystack_expr,
        -: 1819:                               const ::std::string& needle,
        -: 1820:                               const ::std::string& haystack) {
    #####: 1821:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1821-block  0
call    0 never executed
        -: 1822:}
        -: 1823:
        -: 1824:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1825:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1826:                            const ::std::wstring& needle,
        -: 1827:                            const ::std::wstring& haystack) {
    #####: 1828:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1828-block  0
call    0 never executed
        -: 1829:}
        -: 1830:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1831:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1832:                               const char* haystack_expr,
        -: 1833:                               const ::std::wstring& needle,
        -: 1834:                               const ::std::wstring& haystack) {
    #####: 1835:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1835-block  0
call    0 never executed
        -: 1836:}
        -: 1837:#endif  // GTEST_HAS_STD_WSTRING
        -: 1838:
        -: 1839:namespace internal {
        -: 1840:
        -: 1841:#if GTEST_OS_WINDOWS
        -: 1842:
        -: 1843:namespace {
        -: 1844:
        -: 1845:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1846:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1847:                                     long hr) {  // NOLINT
        -: 1848:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1849:
        -: 1850:  // Windows CE doesn't support FormatMessage.
        -: 1851:  const char error_text[] = "";
        -: 1852:
        -: 1853:#else
        -: 1854:
        -: 1855:  // Looks up the human-readable system message for the HRESULT code
        -: 1856:  // and since we're not passing any params to FormatMessage, we don't
        -: 1857:  // want inserts expanded.
        -: 1858:  const DWORD kFlags =
        -: 1859:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1860:  const DWORD kBufSize = 4096;
        -: 1861:  // Gets the system's human readable message string for this HRESULT.
        -: 1862:  char error_text[kBufSize] = {'\0'};
        -: 1863:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1864:                                          0,  // no source, we're asking system
        -: 1865:                                          static_cast<DWORD>(hr),  // the error
        -: 1866:                                          0,  // no line width restrictions
        -: 1867:                                          error_text,  // output buffer
        -: 1868:                                          kBufSize,    // buf size
        -: 1869:                                          nullptr);  // no arguments for inserts
        -: 1870:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1871:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1872:       --message_length) {
        -: 1873:    error_text[message_length - 1] = '\0';
        -: 1874:  }
        -: 1875:
        -: 1876:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1877:
        -: 1878:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1879:  return ::testing::AssertionFailure()
        -: 1880:         << "Expected: " << expr << " " << expected << ".\n"
        -: 1881:         << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1882:}
        -: 1883:
        -: 1884:}  // namespace
        -: 1885:
        -: 1886:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1887:  if (SUCCEEDED(hr)) {
        -: 1888:    return AssertionSuccess();
        -: 1889:  }
        -: 1890:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1891:}
        -: 1892:
        -: 1893:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1894:  if (FAILED(hr)) {
        -: 1895:    return AssertionSuccess();
        -: 1896:  }
        -: 1897:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1898:}
        -: 1899:
        -: 1900:#endif  // GTEST_OS_WINDOWS
        -: 1901:
        -: 1902:// Utility functions for encoding Unicode text (wide strings) in
        -: 1903:// UTF-8.
        -: 1904:
        -: 1905:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1906:// like this:
        -: 1907://
        -: 1908:// Code-point length   Encoding
        -: 1909://   0 -  7 bits       0xxxxxxx
        -: 1910://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1911://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1912://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1913:
        -: 1914:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1915:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1916:
        -: 1917:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1918:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1919:
        -: 1920:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1921:constexpr uint32_t kMaxCodePoint3 =
        -: 1922:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1923:
        -: 1924:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1925:constexpr uint32_t kMaxCodePoint4 =
        -: 1926:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1927:
        -: 1928:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1929:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1930:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1931:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1932:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1933:  *bits >>= n;
    #####: 1934:  return low_bits;
    %%%%%: 1934-block  0
        -: 1935:}
        -: 1936:
        -: 1937:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1938:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1939:// wide enough to contain a code point.
        -: 1940:// If the code_point is not a valid Unicode code point
        -: 1941:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1942:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1943:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1944:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1944-block  0
branch  0 never executed
branch  1 never executed
    #####: 1945:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1945-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1945-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1945-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1945-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1945-block  4
call   11 never executed
    $$$$$: 1945-block  5
    $$$$$: 1945-block  6
call   12 never executed
    $$$$$: 1945-block  7
        -: 1946:  }
        -: 1947:
        -: 1948:  char str[5];  // Big enough for the largest valid code point.
    #####: 1949:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1949-block  0
branch  0 never executed
branch  1 never executed
    #####: 1950:    str[1] = '\0';
    #####: 1951:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 1951-block  0
    #####: 1952:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1952-block  0
branch  0 never executed
branch  1 never executed
    #####: 1953:    str[2] = '\0';
    #####: 1954:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1954-block  0
call    0 never executed
    #####: 1955:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1956:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1956-block  0
branch  0 never executed
branch  1 never executed
    #####: 1957:    str[3] = '\0';
    #####: 1958:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1958-block  0
call    0 never executed
    #####: 1959:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1960:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1961:  } else {  // code_point <= kMaxCodePoint4
    #####: 1962:    str[4] = '\0';
    #####: 1963:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1963-block  0
call    0 never executed
    #####: 1964:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1965:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1966:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1967:  }
    #####: 1968:  return str;
    %%%%%: 1968-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1968-block  1
call    4 never executed
    $$$$$: 1968-block  2
call    5 never executed
    $$$$$: 1968-block  3
        -: 1969:}
        -: 1970:
        -: 1971:// The following two functions only make sense if the system
        -: 1972:// uses UTF-16 for wide string encoding. All supported systems
        -: 1973:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1974:
        -: 1975:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1976:// and thus should be combined into a single Unicode code point
        -: 1977:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1978:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1979:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    #####: 1980:         (second & 0xFC00) == 0xDC00;
    %%%%%: 1980-block  0
        -: 1981:}
        -: 1982:
        -: 1983:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1984:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1985:                                                      wchar_t second) {
    #####: 1986:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1987:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1988:  const uint32_t mask = (1 << 10) - 1;
        -: 1989:  return (sizeof(wchar_t) == 2)
        -: 1990:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 1991:             :
        -: 1992:             // This function should not be called when the condition is
        -: 1993:             // false, but we provide a sensible default in case it is.
    #####: 1994:             first_u;
    %%%%%: 1994-block  0
        -: 1995:}
        -: 1996:
        -: 1997:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 1998:// The wide string is assumed to have the following encoding:
        -: 1999://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2000://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2001:// Parameter str points to a null-terminated wide string.
        -: 2002:// Parameter num_chars may additionally limit the number
        -: 2003:// of wchar_t characters processed. -1 is used when the entire string
        -: 2004:// should be processed.
        -: 2005:// If the string contains code points that are not valid Unicode code points
        -: 2006:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2007:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2008:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2009:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2010:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2011:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2011-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2011-block  1
        -: 2012:
    #####: 2013:  ::std::stringstream stream;
    %%%%%: 2013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2013-block  1
call    3 never executed
    $$$$$: 2013-block  2
call    4 never executed
    #####: 2014:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2014-block  0
    %%%%%: 2014-block  1
branch  0 never executed
branch  1 never executed
        -: 2015:    uint32_t unicode_code_point;
        -: 2016:
    #####: 2017:    if (str[i] == L'\0') {
    %%%%%: 2017-block  0
branch  0 never executed
branch  1 never executed
    #####: 2018:      break;
    %%%%%: 2018-block  0
    #####: 2019:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2019-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2019-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2019-block  2
    %%%%%: 2019-block  3
    %%%%%: 2019-block  4
branch  5 never executed
branch  6 never executed
        -: 2020:      unicode_code_point =
    #####: 2021:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2021-block  0
call    0 never executed
    #####: 2022:      i++;
        -: 2023:    } else {
    #####: 2024:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2024-block  0
        -: 2025:    }
        -: 2026:
    #####: 2027:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2027-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2027-block  2
call    6 never executed
    $$$$$: 2027-block  3
call    7 never executed
    $$$$$: 2027-block  4
        -: 2028:  }
    #####: 2029:  return StringStreamToString(&stream);
    %%%%%: 2029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2029-block  1
        -: 2030:}
        -: 2031:
        -: 2032:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2033:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2034:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2035:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2035-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2035-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2035-block  2
call    6 never executed
    $$$$$: 2035-block  3
call    7 never executed
        -: 2036:
    #####: 2037:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2037-block  0
call    0 never executed
        -: 2038:}
        -: 2039:
        -: 2040:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2041:// same content.
        -: 2042://
        -: 2043:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2044:// C string is considered different to any non-NULL C string,
        -: 2045:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2046:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2047:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2047-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2047-block  1
        -: 2048:
    #####: 2049:  if (rhs == nullptr) return false;
    %%%%%: 2049-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2049-block  1
        -: 2050:
    #####: 2051:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2051-block  0
        -: 2052:}
        -: 2053:
        -: 2054:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2055:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2056:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2057:                               const wchar_t* rhs) {
    #####: 2058:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2058-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2059:    return AssertionSuccess();
    %%%%%: 2059-block  0
call    0 never executed
        -: 2060:  }
        -: 2061:
    #####: 2062:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2062-block  0
call    3 never executed
    $$$$$: 2062-block  1
call    4 never executed
    $$$$$: 2062-block  2
    #####: 2063:                   PrintToString(rhs), false);
    %%%%%: 2063-block  0
call    0 never executed
    %%%%%: 2063-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2063-block  2
call    5 never executed
        -: 2064:}
        -: 2065:
        -: 2066:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2067:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2068:                               const char* s2_expression, const wchar_t* s1,
        -: 2069:                               const wchar_t* s2) {
    #####: 2070:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2070-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2071:    return AssertionSuccess();
    %%%%%: 2071-block  0
call    0 never executed
        -: 2072:  }
        -: 2073:
    #####: 2074:  return AssertionFailure()
    %%%%%: 2074-block  0
call    0 never executed
    $$$$$: 2074-block  1
call    1 never executed
    #####: 2075:         << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2075-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2075-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2075-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2076:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2076-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2076-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2076-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2076-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2076-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2076-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2076-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2076-block  7
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2076-block  8
call   24 never executed
    $$$$$: 2076-block  9
    $$$$$: 2076-block 10
call   25 never executed
    $$$$$: 2076-block 11
        -: 2077:}
        -: 2078:
        -: 2079:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2080:// the same content.
        -: 2081://
        -: 2082:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2083:// NULL C string is considered different to any non-NULL C string,
        -: 2084:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2085:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2086:  if (lhs == nullptr) return rhs == nullptr;
        4: 2086-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2086-block  1
       4*: 2087:  if (rhs == nullptr) return false;
        4: 2087-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2087-block  1
        4: 2088:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2088-block  0
call    0 returned 4
        -: 2089:}
        -: 2090:
        -: 2091:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2092:// have the same content.
        -: 2093://
        -: 2094:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2095:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2096:// including the empty string.
        -: 2097:// NB: The implementations on different platforms slightly differ.
        -: 2098:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2099:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2100:// which compares according to LC_CTYPE category of the current locale.
        -: 2101:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2102:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2103:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2104:                                              const wchar_t* rhs) {
    #####: 2105:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2105-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2105-block  1
        -: 2106:
    #####: 2107:  if (rhs == nullptr) return false;
    %%%%%: 2107-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2107-block  1
        -: 2108:
        -: 2109:#if GTEST_OS_WINDOWS
        -: 2110:  return _wcsicmp(lhs, rhs) == 0;
        -: 2111:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 2112:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 2112-block  0
call    0 never executed
        -: 2113:#else
        -: 2114:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2115:  // Other unknown OSes may not define it either.
        -: 2116:  wint_t left, right;
        -: 2117:  do {
        -: 2118:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2119:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2120:  } while (left && left == right);
        -: 2121:  return left == right;
        -: 2122:#endif  // OS selector
        -: 2123:}
        -: 2124:
        -: 2125:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2126:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2127:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2128:                                     const std::string& suffix) {
    #####: 2129:  const size_t str_len = str.length();
    %%%%%: 2129-block  0
call    0 never executed
    #####: 2130:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2131:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2131-block  0
    %%%%%: 2131-block  1
    #####: 2132:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2132-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2133:                                      suffix.c_str());
    %%%%%: 2133-block  0
        -: 2134:}
        -: 2135:
        -: 2136:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2137:std::string String::FormatIntWidth2(int value) {
    #####: 2138:  return FormatIntWidthN(value, 2);
    %%%%%: 2138-block  0
call    0 never executed
        -: 2139:}
        -: 2140:
        -: 2141:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2142:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2143:  std::stringstream ss;
    %%%%%: 2143-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2143-block  1
call    3 never executed
    $$$$$: 2143-block  2
call    4 never executed
    #####: 2144:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2144-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2144-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2144-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2145:  return ss.str();
    %%%%%: 2145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2145-block  1
        -: 2146:}
        -: 2147:
        -: 2148:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2149:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2150:  std::stringstream ss;
    %%%%%: 2150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2150-block  1
call    3 never executed
    $$$$$: 2150-block  2
call    4 never executed
    #####: 2151:  ss << std::hex << std::uppercase << value;
    %%%%%: 2151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2151-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2151-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2152:  return ss.str();
    %%%%%: 2152-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2152-block  1
        -: 2153:}
        -: 2154:
        -: 2155:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2156:std::string String::FormatHexInt(int value) {
    #####: 2157:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2157-block  0
call    0 never executed
        -: 2158:}
        -: 2159:
        -: 2160:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2161:std::string String::FormatByte(unsigned char value) {
    #####: 2162:  std::stringstream ss;
    %%%%%: 2162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2162-block  1
call    3 never executed
    $$$$$: 2162-block  2
call    4 never executed
    #####: 2163:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2163-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2163-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2163-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2164:     << static_cast<unsigned int>(value);
    %%%%%: 2164-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2165:  return ss.str();
    %%%%%: 2165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2165-block  1
        -: 2166:}
        -: 2167:
        -: 2168:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2169:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 74 returned 100% blocks executed 75%
       74: 2170:std::string StringStreamToString(::std::stringstream* ss) {
      148: 2171:  const ::std::string& str = ss->str();
       74: 2171-block  0
call    0 returned 74
branch  1 taken 74 (fallthrough)
branch  2 taken 0 (throw)
       74: 2171-block  1
call    3 returned 74
    $$$$$: 2171-block  2
call    4 never executed
       74: 2172:  const char* const start = str.c_str();
       74: 2172-block  0
call    0 returned 74
       74: 2173:  const char* const end = start + str.length();
call    0 returned 74
        -: 2174:
       74: 2175:  std::string result;
call    0 returned 74
       74: 2176:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 74
branch  1 taken 74 (fallthrough)
branch  2 taken 0 (throw)
     1112: 2177:  for (const char* ch = start; ch != end; ++ch) {
       74: 2177-block  0
     1112: 2177-block  1
branch  0 taken 1038 (fallthrough)
branch  1 taken 74
     1038: 2177-block  2
     1038: 2178:    if (*ch == '\0') {
     1038: 2178-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1038
    #####: 2179:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2179-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2180:    } else {
     1038: 2181:      result += *ch;
     1038: 2181-block  0
call    0 returned 1038
branch  1 taken 1038 (fallthrough)
branch  2 taken 0 (throw)
        -: 2182:    }
        -: 2183:  }
        -: 2184:
      148: 2185:  return result;
       74: 2185-block  0
       74: 2185-block  1
        -: 2186:}
        -: 2187:
        -: 2188:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2189:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2190:                              const Message& user_msg) {
        -: 2191:  // Appends the user message if it's non-empty.
    #####: 2192:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2192-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2192-block  1
call    3 never executed
    $$$$$: 2192-block  2
call    4 never executed
    #####: 2193:  if (user_msg_string.empty()) {
    %%%%%: 2193-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2194:    return gtest_msg;
    %%%%%: 2194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2195:  }
    #####: 2196:  if (gtest_msg.empty()) {
    %%%%%: 2196-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2197:    return user_msg_string;
    %%%%%: 2197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2198:  }
    #####: 2199:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2199-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2199-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2199-block  2
call    6 never executed
    $$$$$: 2199-block  3
call    7 never executed
    $$$$$: 2199-block  4
        -: 2200:}
        -: 2201:
        -: 2202:}  // namespace internal
        -: 2203:
        -: 2204:// class TestResult
        -: 2205:
        -: 2206:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 20 returned 100% blocks executed 100%
       20: 2207:TestResult::TestResult()
       20: 2208:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       20: 2208-block  0
call    0 returned 20
call    1 returned 20
call    2 returned 20
        -: 2209:
        -: 2210:// D'tor.
function _ZN7testing10TestResultD2Ev called 20 returned 100% blocks executed 100%
       20: 2211:TestResult::~TestResult() {}
       20: 2211-block  0
call    0 returned 20
call    1 returned 20
call    2 returned 20
        -: 2212:
        -: 2213:// Returns the i-th test part result among all the results. i can
        -: 2214:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2215:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2216:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2217:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2217-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2217-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2217-block  2
    %%%%%: 2217-block  3
    %%%%%: 2217-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2217-block  5
call    7 never executed
    #####: 2218:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2218-block  0
call    0 never executed
        -: 2219:}
        -: 2220:
        -: 2221:// Returns the i-th test property. i can range from 0 to
        -: 2222:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2223:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2224:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2225:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2225-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2225-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2225-block  2
    %%%%%: 2225-block  3
    %%%%%: 2225-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2225-block  5
call    7 never executed
    #####: 2226:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2226-block  0
call    0 never executed
        -: 2227:}
        -: 2228:
        -: 2229:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2230:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2230-block  0
call    0 never executed
        -: 2231:
        -: 2232:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2233:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2234:  test_part_results_.push_back(test_part_result);
    %%%%%: 2234-block  0
call    0 never executed
    #####: 2235:}
        -: 2236:
        -: 2237:// Adds a test property to the list. If a property with the same key as the
        -: 2238:// supplied property is already represented, the value of this test_property
        -: 2239:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2240:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2241:                                const TestProperty& test_property) {
    #####: 2242:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2242-block  1
branch  3 never executed
branch  4 never executed
    #####: 2243:    return;
    %%%%%: 2243-block  0
    %%%%%: 2243-block  1
        -: 2244:  }
    #####: 2245:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2245-block  1
call    3 never executed
        -: 2246:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2247:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2248:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2248-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2248-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2248-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2248-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2248-block  4
call   16 never executed
    $$$$$: 2248-block  5
    $$$$$: 2248-block  6
call   17 never executed
    $$$$$: 2248-block  7
    $$$$$: 2248-block  8
call   18 never executed
    $$$$$: 2248-block  9
    #####: 2249:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2250:    test_properties_.push_back(test_property);
    %%%%%: 2250-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2251:    return;
    %%%%%: 2251-block  0
        -: 2252:  }
    #####: 2253:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2253-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2253-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2253-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2253-block  3
call   11 never executed
    $$$$$: 2253-block  4
    $$$$$: 2253-block  5
call   12 never executed
    $$$$$: 2253-block  6
        -: 2254:}
        -: 2255:
        -: 2256:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2257:// output.
        -: 2258:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2259:    "disabled",    "errors", "failures", "name",
        -: 2260:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2261:
        -: 2262:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2263:// output.
        -: 2264:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2265:    "disabled", "errors", "failures",  "name",
        -: 2266:    "tests",    "time",   "timestamp", "skipped"};
        -: 2267:
        -: 2268:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2269:static const char* const kReservedTestCaseAttributes[] = {
        -: 2270:    "classname",  "name",        "status", "time",
        -: 2271:    "type_param", "value_param", "file",   "line"};
        -: 2272:
        -: 2273:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2274:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2275:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2276:    "classname",   "name", "status", "time",   "type_param",
        -: 2277:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2278:
        -: 2279:template <size_t kSize>
    #####: 2280:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2281:  return std::vector<std::string>(array, array + kSize);
        -: 2282:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2280:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2281:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2281-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2281-block  1
call    4 never executed
    %%%%%: 2281-block  2
    $$$$$: 2281-block  3
call    5 never executed
        -: 2282:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2280:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2281:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2281-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2281-block  1
call    4 never executed
    %%%%%: 2281-block  2
    $$$$$: 2281-block  3
call    5 never executed
        -: 2282:}
------------------
        -: 2283:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2284:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2285:    const std::string& xml_element) {
    #####: 2286:  if (xml_element == "testsuites") {
    %%%%%: 2286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2287:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2287-block  0
call    0 never executed
    #####: 2288:  } else if (xml_element == "testsuite") {
    %%%%%: 2288-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2289:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2289-block  0
call    0 never executed
    #####: 2290:  } else if (xml_element == "testcase") {
    %%%%%: 2290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2291:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2291-block  0
call    0 never executed
        -: 2292:  } else {
    #####: 2293:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2293-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2293-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2293-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2293-block  4
call   14 never executed
    $$$$$: 2293-block  5
call   15 never executed
        -: 2294:  }
        -: 2295:  // This code is unreachable but some compilers may not realizes that.
    #####: 2296:  return std::vector<std::string>();
    %%%%%: 2296-block  0
call    0 never executed
        -: 2297:}
        -: 2298:
        -: 2299:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2300:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2301:    const std::string& xml_element) {
    #####: 2302:  if (xml_element == "testsuites") {
    %%%%%: 2302-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2303:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2303-block  0
call    0 never executed
    #####: 2304:  } else if (xml_element == "testsuite") {
    %%%%%: 2304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2305:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2305-block  0
call    0 never executed
    #####: 2306:  } else if (xml_element == "testcase") {
    %%%%%: 2306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2307:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2307-block  0
call    0 never executed
        -: 2308:  } else {
    #####: 2309:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2309-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2309-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2309-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2309-block  4
call   14 never executed
    $$$$$: 2309-block  5
call   15 never executed
        -: 2310:  }
        -: 2311:  // This code is unreachable but some compilers may not realizes that.
    #####: 2312:  return std::vector<std::string>();
    %%%%%: 2312-block  0
call    0 never executed
        -: 2313:}
        -: 2314:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2315:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2316:  Message word_list;
    %%%%%: 2316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2316-block  1
call    3 never executed
    $$$$$: 2316-block  2
call    4 never executed
    #####: 2317:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2317-block  0
    %%%%%: 2317-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2317-block  2
    #####: 2318:    if (i > 0 && words.size() > 2) {
    %%%%%: 2318-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2318-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2318-block  2
    %%%%%: 2318-block  3
    %%%%%: 2318-block  4
branch  5 never executed
branch  6 never executed
    #####: 2319:      word_list << ", ";
    %%%%%: 2319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2320:    }
    #####: 2321:    if (i == words.size() - 1) {
    %%%%%: 2321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2322:      word_list << "and ";
    %%%%%: 2322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2323:    }
    #####: 2324:    word_list << "'" << words[i] << "'";
    %%%%%: 2324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2324-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2324-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2325:  }
    #####: 2326:  return word_list.GetString();
    %%%%%: 2326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2326-block  1
        -: 2327:}
        -: 2328:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2329:static bool ValidateTestPropertyName(
        -: 2330:    const std::string& property_name,
        -: 2331:    const std::vector<std::string>& reserved_names) {
    #####: 2332:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2332-block  0
call    5 never executed
    #####: 2333:      reserved_names.end()) {
    %%%%%: 2333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2333-block  1
call    3 never executed
    #####: 2334:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2334-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2334-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2334-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2334-block  3
call   10 never executed
    $$$$$: 2334-block  4
call   11 never executed
    $$$$$: 2334-block  5
    $$$$$: 2334-block  6
call   12 never executed
    #####: 2335:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2335-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2335-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2335-block  3
call   11 never executed
    $$$$$: 2335-block  4
    #####: 2336:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2336-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2336-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2336-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2337:    return false;
        -: 2338:  }
    #####: 2339:  return true;
    %%%%%: 2339-block  0
        -: 2340:}
        -: 2341:
        -: 2342:// Adds a failure if the key is a reserved attribute of the element named
        -: 2343:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2344:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2345:                                      const TestProperty& test_property) {
    #####: 2346:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2346-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2346-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2346-block  2
call   10 never executed
    $$$$$: 2346-block  3
    $$$$$: 2346-block  4
call   11 never executed
    $$$$$: 2346-block  5
    #####: 2347:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2347-block  0
call    0 never executed
    %%%%%: 2347-block  1
call    1 never executed
    %%%%%: 2347-block  2
    $$$$$: 2347-block  3
call    2 never executed
        -: 2348:}
        -: 2349:
        -: 2350:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 19 returned 100% blocks executed 100%
       19: 2351:void TestResult::Clear() {
       19: 2352:  test_part_results_.clear();
       19: 2352-block  0
call    0 returned 19
       19: 2353:  test_properties_.clear();
call    0 returned 19
       19: 2354:  death_test_count_ = 0;
       19: 2355:  elapsed_time_ = 0;
       19: 2356:}
        -: 2357:
        -: 2358:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2359:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2360:  return result.skipped();
    %%%%%: 2360-block  0
call    0 never executed
        -: 2361:}
        -: 2362:
        -: 2363:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 91 returned 100% blocks executed 88%
       91: 2364:bool TestResult::Skipped() const {
      91*: 2365:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
       91: 2365-block  0
call    0 returned 91
branch  1 taken 91 (fallthrough)
branch  2 taken 0
       91: 2365-block  1
call    3 returned 91
branch  4 taken 0 (fallthrough)
branch  5 taken 91
    %%%%%: 2365-block  2
       91: 2365-block  3
       91: 2365-block  4
        -: 2366:}
        -: 2367:
        -: 2368:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 186 returned 100% blocks executed 50%
      186: 2369:bool TestResult::Failed() const {
     186*: 2370:  for (int i = 0; i < total_part_count(); ++i) {
      186: 2370-block  0
      186: 2370-block  1
call    0 returned 186
branch  1 taken 0 (fallthrough)
branch  2 taken 186
    %%%%%: 2370-block  2
    #####: 2371:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2371-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2371-block  1
        -: 2372:  }
      186: 2373:  return false;
      186: 2373-block  0
        -: 2374:}
        -: 2375:
        -: 2376:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2377:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2378:  return result.fatally_failed();
    %%%%%: 2378-block  0
call    0 never executed
        -: 2379:}
        -: 2380:
        -: 2381:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 37 returned 100% blocks executed 100%
       37: 2382:bool TestResult::HasFatalFailure() const {
       37: 2383:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       37: 2383-block  0
call    0 returned 37
        -: 2384:}
        -: 2385:
        -: 2386:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2387:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2388:  return result.nonfatally_failed();
    %%%%%: 2388-block  0
call    0 never executed
        -: 2389:}
        -: 2390:
        -: 2391:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2392:bool TestResult::HasNonfatalFailure() const {
    #####: 2393:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2393-block  0
call    0 never executed
        -: 2394:}
        -: 2395:
        -: 2396:// Gets the number of all test parts.  This is the sum of the number
        -: 2397:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 186 returned 100% blocks executed 100%
      186: 2398:int TestResult::total_part_count() const {
      186: 2399:  return static_cast<int>(test_part_results_.size());
      186: 2399-block  0
call    0 returned 186
        -: 2400:}
        -: 2401:
        -: 2402:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2403:int TestResult::test_property_count() const {
    #####: 2404:  return static_cast<int>(test_properties_.size());
    %%%%%: 2404-block  0
call    0 never executed
        -: 2405:}
        -: 2406:
        -: 2407:// class Test
        -: 2408:
        -: 2409:// Creates a Test object.
        -: 2410:
        -: 2411:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 18 returned 100% blocks executed 83%
       18: 2412:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
       18: 2412-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18: 2412-block  1
call    4 returned 18
    $$$$$: 2412-block  2
call    5 never executed
        -: 2413:
        -: 2414:// The d'tor restores the states of all flags.  The actual work is
        -: 2415:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2416:// visible here.
      18*: 2417:Test::~Test() {}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2417:Test::~Test() {}
    %%%%%: 2417-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 18 returned 100% blocks executed 100%
       18: 2417:Test::~Test() {}
       18: 2417-block  0
call    0 returned 18
------------------
        -: 2418:
        -: 2419:// Sets up the test fixture.
        -: 2420://
        -: 2421:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 0 returned 0% blocks executed 0%
    #####: 2422:void Test::SetUp() {}
        -: 2423:
        -: 2424:// Tears down the test fixture.
        -: 2425://
        -: 2426:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 18 returned 100% blocks executed 100%
       18: 2427:void Test::TearDown() {}
        -: 2428:
        -: 2429:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2430:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2431:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2431-block  0
call    0 never executed
call    1 never executed
    #####: 2432:}
        -: 2433:
        -: 2434:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2435:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2436:  Message value_message;
    %%%%%: 2436-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2436-block  1
call    3 never executed
    #####: 2437:  value_message << value;
    %%%%%: 2437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2438:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2438-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2438-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2438-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2438-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2438-block  4
call   15 never executed
    $$$$$: 2438-block  5
    $$$$$: 2438-block  6
call   16 never executed
    $$$$$: 2438-block  7
    $$$$$: 2438-block  8
call   17 never executed
    $$$$$: 2438-block  9
    #####: 2439:}
        -: 2440:
        -: 2441:namespace internal {
        -: 2442:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2443:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2444:                                    const std::string& message) {
        -: 2445:  // This function is a friend of UnitTest and as such has access to
        -: 2446:  // AddTestPartResult.
    #####: 2447:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2447-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2447-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2447-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2447-block  3
call   10 never executed
    $$$$$: 2447-block  4
    $$$$$: 2447-block  5
call   11 never executed
        -: 2448:      result_type,
        -: 2449:      nullptr,  // No info about the source file where the exception occurred.
        -: 2450:      -1,       // We have no info on which line caused the exception.
        -: 2451:      message,
        -: 2452:      "");  // No stack trace, either.
    #####: 2453:}
        -: 2454:
        -: 2455:}  // namespace internal
        -: 2456:
        -: 2457:// Google Test requires all tests in the same test suite to use the same test
        -: 2458:// fixture class.  This function checks if the current test has the
        -: 2459:// same fixture class as the first test in the current test suite.  If
        -: 2460:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2461:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 18 returned 100% blocks executed 15%
       18: 2462:bool Test::HasSameFixtureClass() {
       18: 2463:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       18: 2463-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2464:  const TestSuite* const test_suite = impl->current_test_suite();
       18: 2464-block  0
call    0 returned 18
        -: 2465:
        -: 2466:  // Info about the first test in the current test suite.
       18: 2467:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 18
call    1 returned 18
       18: 2468:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       18: 2469:  const char* const first_test_name = first_test_info->name();
call    0 returned 18
        -: 2470:
        -: 2471:  // Info about the current test.
       18: 2472:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 18
       18: 2473:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       18: 2474:  const char* const this_test_name = this_test_info->name();
call    0 returned 18
        -: 2475:
       18: 2476:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -: 2477:    // Is the first test defined using TEST?
    #####: 2478:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2478-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2479:    // Is this test defined using TEST?
    #####: 2480:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2480-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2481:
    #####: 2482:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2482-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2482-block  1
branch  2 never executed
branch  3 never executed
        -: 2483:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2484:      // Tell the user how to fix this.
        -: 2485:
        -: 2486:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2487:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2488:      // the fixture IDs are different for the two tests.
    #####: 2489:      const char* const TEST_name =
    %%%%%: 2489-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2489-block  1
    %%%%%: 2489-block  2
        -: 2490:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2491:      const char* const TEST_F_name =
    %%%%%: 2491-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2491-block  1
    %%%%%: 2491-block  2
        -: 2492:          first_is_TEST ? this_test_name : first_test_name;
        -: 2493:
    #####: 2494:      ADD_FAILURE()
    %%%%%: 2494-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2494-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2494-block  2
call    6 never executed
    $$$$$: 2494-block  3
call    7 never executed
    $$$$$: 2494-block  4
    $$$$$: 2494-block  5
call    8 never executed
    $$$$$: 2494-block  6
    #####: 2495:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2495-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2496:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2496-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2497:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2497-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2497-block  2
    #####: 2498:          << ",\n"
    %%%%%: 2498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2499:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2499-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2499-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2500:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2500-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2500-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2501:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2502:          << "case.";
    %%%%%: 2502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2502-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2503:    } else {
        -: 2504:      // Two fixture classes with the same name appear in two different
        -: 2505:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2506:      ADD_FAILURE()
    %%%%%: 2506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2506-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2506-block  2
call    6 never executed
    $$$$$: 2506-block  3
call    7 never executed
    $$$$$: 2506-block  4
    $$$$$: 2506-block  5
call    8 never executed
    $$$$$: 2506-block  6
    #####: 2507:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2508:          << "class.  However, in test suite "
    %%%%%: 2508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2509:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2509-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2509-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2509-block  2
    #####: 2510:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2510-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2510-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2511:          << this_test_name << "\n"
    %%%%%: 2511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2511-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2512:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2513:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2514:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2515:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2515-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2516:    }
    #####: 2517:    return false;
    %%%%%: 2517-block  0
        -: 2518:  }
        -: 2519:
       18: 2520:  return true;
       18: 2520-block  0
        -: 2521:}
        -: 2522:
        -: 2523:#if GTEST_HAS_SEH
        -: 2524:
        -: 2525:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2526:// function returns its result via an output parameter pointer because VC++
        -: 2527:// prohibits creation of objects with destructors on stack in functions
        -: 2528:// using __try (see error C2712).
        -: 2529:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2530:                                              const char* location) {
        -: 2531:  Message message;
        -: 2532:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -: 2533:          << std::setbase(10) << " thrown in " << location << ".";
        -: 2534:
        -: 2535:  return new std::string(message.GetString());
        -: 2536:}
        -: 2537:
        -: 2538:#endif  // GTEST_HAS_SEH
        -: 2539:
        -: 2540:namespace internal {
        -: 2541:
        -: 2542:#if GTEST_HAS_EXCEPTIONS
        -: 2543:
        -: 2544:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2545:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2546:                                             const char* location) {
    #####: 2547:  Message message;
    %%%%%: 2547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2547-block  1
call    3 never executed
    $$$$$: 2547-block  2
call    4 never executed
    #####: 2548:  if (description != nullptr) {
    %%%%%: 2548-block  0
branch  0 never executed
branch  1 never executed
    #####: 2549:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2549-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2549-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2550:  } else {
    #####: 2551:    message << "Unknown C++ exception";
    %%%%%: 2551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2552:  }
    #####: 2553:  message << " thrown in " << location << ".";
    %%%%%: 2553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2553-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2553-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2554:
    #####: 2555:  return message.GetString();
    %%%%%: 2555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2555-block  1
        -: 2556:}
        -: 2557:
        -: 2558:static std::string PrintTestPartResultToString(
        -: 2559:    const TestPartResult& test_part_result);
        -: 2560:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2561:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2562:    const TestPartResult& failure)
    #####: 2563:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2563-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2563-block  1
call    5 never executed
    $$$$$: 2563-block  2
call    6 never executed
        -: 2564:
        -: 2565:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2566:
        -: 2567:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2568:// compiler rejects the code if they were declared static.
        -: 2569:
        -: 2570:// Runs the given method and handles SEH exceptions it throws, when
        -: 2571:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2572:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2573:// exceptions in the same function.  Therefore, we provide a separate
        -: 2574:// wrapper function for handling SEH exceptions.)
        -: 2575:template <class T, typename Result>
       93: 2576:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2577:                                              const char* location) {
        -: 2578:#if GTEST_HAS_SEH
        -: 2579:  __try {
        -: 2580:    return (object->*method)();
        -: 2581:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2582:      GetExceptionCode())) {
        -: 2583:    // We create the exception message on the heap because VC++ prohibits
        -: 2584:    // creation of objects with destructors on stack in functions using __try
        -: 2585:    // (see error C2712).
        -: 2586:    std::string* exception_message =
        -: 2587:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2588:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2589:                                             *exception_message);
        -: 2590:    delete exception_message;
        -: 2591:    return static_cast<Result>(0);
        -: 2592:  }
        -: 2593:#else
        -: 2594:  (void)location;
      93*: 2595:  return (object->*method)();
        -: 2596:#endif  // GTEST_HAS_SEH
        -: 2597:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2576:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2577:                                              const char* location) {
        -: 2578:#if GTEST_HAS_SEH
        -: 2579:  __try {
        -: 2580:    return (object->*method)();
        -: 2581:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2582:      GetExceptionCode())) {
        -: 2583:    // We create the exception message on the heap because VC++ prohibits
        -: 2584:    // creation of objects with destructors on stack in functions using __try
        -: 2585:    // (see error C2712).
        -: 2586:    std::string* exception_message =
        -: 2587:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2588:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2589:                                             *exception_message);
        -: 2590:    delete exception_message;
        -: 2591:    return static_cast<Result>(0);
        -: 2592:  }
        -: 2593:#else
        -: 2594:  (void)location;
       1*: 2595:  return (object->*method)();
        1: 2595-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2595-block  1
        1: 2595-block  2
        1: 2595-block  3
call    2 returned 1
        -: 2596:#endif  // GTEST_HAS_SEH
        -: 2597:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 80%
        2: 2576:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2577:                                              const char* location) {
        -: 2578:#if GTEST_HAS_SEH
        -: 2579:  __try {
        -: 2580:    return (object->*method)();
        -: 2581:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2582:      GetExceptionCode())) {
        -: 2583:    // We create the exception message on the heap because VC++ prohibits
        -: 2584:    // creation of objects with destructors on stack in functions using __try
        -: 2585:    // (see error C2712).
        -: 2586:    std::string* exception_message =
        -: 2587:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2588:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2589:                                             *exception_message);
        -: 2590:    delete exception_message;
        -: 2591:    return static_cast<Result>(0);
        -: 2592:  }
        -: 2593:#else
        -: 2594:  (void)location;
       2*: 2595:  return (object->*method)();
        2: 2595-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2595-block  1
        2: 2595-block  2
        2: 2595-block  3
call    2 returned 2
        -: 2596:#endif  // GTEST_HAS_SEH
        -: 2597:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 18 returned 100% blocks executed 83%
       18: 2576:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2577:                                              const char* location) {
        -: 2578:#if GTEST_HAS_SEH
        -: 2579:  __try {
        -: 2580:    return (object->*method)();
        -: 2581:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2582:      GetExceptionCode())) {
        -: 2583:    // We create the exception message on the heap because VC++ prohibits
        -: 2584:    // creation of objects with destructors on stack in functions using __try
        -: 2585:    // (see error C2712).
        -: 2586:    std::string* exception_message =
        -: 2587:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2588:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2589:                                             *exception_message);
        -: 2590:    delete exception_message;
        -: 2591:    return static_cast<Result>(0);
        -: 2592:  }
        -: 2593:#else
        -: 2594:  (void)location;
      18*: 2595:  return (object->*method)();
       18: 2595-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 2595-block  1
    %%%%%: 2595-block  2
       18: 2595-block  3
call    2 returned 18
        -: 2596:#endif  // GTEST_HAS_SEH
        -: 2597:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 72 returned 100% blocks executed 100%
       72: 2576:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2577:                                              const char* location) {
        -: 2578:#if GTEST_HAS_SEH
        -: 2579:  __try {
        -: 2580:    return (object->*method)();
        -: 2581:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2582:      GetExceptionCode())) {
        -: 2583:    // We create the exception message on the heap because VC++ prohibits
        -: 2584:    // creation of objects with destructors on stack in functions using __try
        -: 2585:    // (see error C2712).
        -: 2586:    std::string* exception_message =
        -: 2587:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2588:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2589:                                             *exception_message);
        -: 2590:    delete exception_message;
        -: 2591:    return static_cast<Result>(0);
        -: 2592:  }
        -: 2593:#else
        -: 2594:  (void)location;
       72: 2595:  return (object->*method)();
       72: 2595-block  0
branch  0 taken 54 (fallthrough)
branch  1 taken 18
       54: 2595-block  1
       18: 2595-block  2
       72: 2595-block  3
call    2 returned 72
        -: 2596:#endif  // GTEST_HAS_SEH
        -: 2597:}
------------------
        -: 2598:
        -: 2599:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2600:// exceptions, if they are supported; returns the 0-value for type
        -: 2601:// Result in case of an SEH exception.
        -: 2602:template <class T, typename Result>
       93: 2603:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2604:                                           const char* location) {
        -: 2605:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2606:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2607:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2608:  // after the exception is caught and either report or re-throw the
        -: 2609:  // exception based on the flag's value:
        -: 2610:  //
        -: 2611:  // try {
        -: 2612:  //   // Perform the test method.
        -: 2613:  // } catch (...) {
        -: 2614:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2615:  //     // Report the exception as failure.
        -: 2616:  //   else
        -: 2617:  //     throw;  // Re-throws the original exception.
        -: 2618:  // }
        -: 2619:  //
        -: 2620:  // However, the purpose of this flag is to allow the program to drop into
        -: 2621:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2622:  // control enters the catch block, the exception origin information is
        -: 2623:  // lost and the debugger will stop the program at the point of the
        -: 2624:  // re-throw in this function -- instead of at the point of the original
        -: 2625:  // throw statement in the code under test.  For this reason, we perform
        -: 2626:  // the check early, sacrificing the ability to affect Google Test's
        -: 2627:  // exception handling in the method where the exception is thrown.
       93: 2628:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2629:#if GTEST_HAS_EXCEPTIONS
        -: 2630:    try {
       93: 2631:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2632:    } catch (const AssertionException&) {  // NOLINT
        -: 2633:      // This failure was reported already.
    =====: 2634:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2635:      // This exception type can only be thrown by a failed Google
        -: 2636:      // Test assertion with the intention of letting another testing
        -: 2637:      // framework catch it.  Therefore we just re-throw it.
    =====: 2638:      throw;
    =====: 2639:    } catch (const std::exception& e) {  // NOLINT
    =====: 2640:      internal::ReportFailureInUnknownLocation(
        -: 2641:          TestPartResult::kFatalFailure,
    =====: 2642:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2643:    } catch (...) {  // NOLINT
    =====: 2644:      internal::ReportFailureInUnknownLocation(
        -: 2645:          TestPartResult::kFatalFailure,
        -: 2646:          FormatCxxExceptionMessage(nullptr, location));
        -: 2647:    }
    =====: 2648:    return static_cast<Result>(0);
        -: 2649:#else
        -: 2650:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2651:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2652:  } else {
    #####: 2653:    return (object->*method)();
        -: 2654:  }
        -: 2655:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2603:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2604:                                           const char* location) {
        -: 2605:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2606:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2607:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2608:  // after the exception is caught and either report or re-throw the
        -: 2609:  // exception based on the flag's value:
        -: 2610:  //
        -: 2611:  // try {
        -: 2612:  //   // Perform the test method.
        -: 2613:  // } catch (...) {
        -: 2614:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2615:  //     // Report the exception as failure.
        -: 2616:  //   else
        -: 2617:  //     throw;  // Re-throws the original exception.
        -: 2618:  // }
        -: 2619:  //
        -: 2620:  // However, the purpose of this flag is to allow the program to drop into
        -: 2621:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2622:  // control enters the catch block, the exception origin information is
        -: 2623:  // lost and the debugger will stop the program at the point of the
        -: 2624:  // re-throw in this function -- instead of at the point of the original
        -: 2625:  // throw statement in the code under test.  For this reason, we perform
        -: 2626:  // the check early, sacrificing the ability to affect Google Test's
        -: 2627:  // exception handling in the method where the exception is thrown.
        1: 2628:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2628-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2629:#if GTEST_HAS_EXCEPTIONS
        -: 2630:    try {
        1: 2631:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2631-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2631-block  1
    =====: 2632:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2632-block  0
call    0 never executed
call    1 never executed
        -: 2633:      // This failure was reported already.
    =====: 2634:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2634-block  0
call    0 never executed
    $$$$$: 2634-block  1
call    1 never executed
        -: 2635:      // This exception type can only be thrown by a failed Google
        -: 2636:      // Test assertion with the intention of letting another testing
        -: 2637:      // framework catch it.  Therefore we just re-throw it.
    =====: 2638:      throw;
call    0 never executed
    =====: 2639:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2639-block  0
call    0 never executed
    $$$$$: 2639-block  1
call    1 never executed
    =====: 2640:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2640-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2640-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2640-block  2
call    8 never executed
    $$$$$: 2640-block  3
        -: 2641:          TestPartResult::kFatalFailure,
    =====: 2642:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2643:    } catch (...) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
        -: 2646:          FormatCxxExceptionMessage(nullptr, location));
        -: 2647:    }
    =====: 2648:    return static_cast<Result>(0);
    $$$$$: 2648-block  0
        -: 2649:#else
        -: 2650:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2651:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2652:  } else {
    #####: 2653:    return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:  }
        -: 2655:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 18%
        2: 2603:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2604:                                           const char* location) {
        -: 2605:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2606:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2607:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2608:  // after the exception is caught and either report or re-throw the
        -: 2609:  // exception based on the flag's value:
        -: 2610:  //
        -: 2611:  // try {
        -: 2612:  //   // Perform the test method.
        -: 2613:  // } catch (...) {
        -: 2614:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2615:  //     // Report the exception as failure.
        -: 2616:  //   else
        -: 2617:  //     throw;  // Re-throws the original exception.
        -: 2618:  // }
        -: 2619:  //
        -: 2620:  // However, the purpose of this flag is to allow the program to drop into
        -: 2621:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2622:  // control enters the catch block, the exception origin information is
        -: 2623:  // lost and the debugger will stop the program at the point of the
        -: 2624:  // re-throw in this function -- instead of at the point of the original
        -: 2625:  // throw statement in the code under test.  For this reason, we perform
        -: 2626:  // the check early, sacrificing the ability to affect Google Test's
        -: 2627:  // exception handling in the method where the exception is thrown.
        2: 2628:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2628-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -: 2629:#if GTEST_HAS_EXCEPTIONS
        -: 2630:    try {
        2: 2631:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2631-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2631-block  1
    =====: 2632:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2632-block  0
call    0 never executed
call    1 never executed
        -: 2633:      // This failure was reported already.
    =====: 2634:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2634-block  0
call    0 never executed
    $$$$$: 2634-block  1
call    1 never executed
        -: 2635:      // This exception type can only be thrown by a failed Google
        -: 2636:      // Test assertion with the intention of letting another testing
        -: 2637:      // framework catch it.  Therefore we just re-throw it.
    =====: 2638:      throw;
call    0 never executed
    =====: 2639:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2639-block  0
call    0 never executed
    $$$$$: 2639-block  1
call    1 never executed
    =====: 2640:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2640-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2640-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2640-block  2
call    8 never executed
    $$$$$: 2640-block  3
        -: 2641:          TestPartResult::kFatalFailure,
    =====: 2642:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2643:    } catch (...) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
        -: 2646:          FormatCxxExceptionMessage(nullptr, location));
        -: 2647:    }
    =====: 2648:    return static_cast<Result>(0);
    $$$$$: 2648-block  0
        -: 2649:#else
        -: 2650:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2651:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2652:  } else {
    #####: 2653:    return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:  }
        -: 2655:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 18 returned 100% blocks executed 18%
       18: 2603:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2604:                                           const char* location) {
        -: 2605:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2606:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2607:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2608:  // after the exception is caught and either report or re-throw the
        -: 2609:  // exception based on the flag's value:
        -: 2610:  //
        -: 2611:  // try {
        -: 2612:  //   // Perform the test method.
        -: 2613:  // } catch (...) {
        -: 2614:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2615:  //     // Report the exception as failure.
        -: 2616:  //   else
        -: 2617:  //     throw;  // Re-throws the original exception.
        -: 2618:  // }
        -: 2619:  //
        -: 2620:  // However, the purpose of this flag is to allow the program to drop into
        -: 2621:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2622:  // control enters the catch block, the exception origin information is
        -: 2623:  // lost and the debugger will stop the program at the point of the
        -: 2624:  // re-throw in this function -- instead of at the point of the original
        -: 2625:  // throw statement in the code under test.  For this reason, we perform
        -: 2626:  // the check early, sacrificing the ability to affect Google Test's
        -: 2627:  // exception handling in the method where the exception is thrown.
       18: 2628:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       18: 2628-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0
        -: 2629:#if GTEST_HAS_EXCEPTIONS
        -: 2630:    try {
       18: 2631:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       18: 2631-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2631-block  1
    =====: 2632:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2632-block  0
call    0 never executed
call    1 never executed
        -: 2633:      // This failure was reported already.
    =====: 2634:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2634-block  0
call    0 never executed
    $$$$$: 2634-block  1
call    1 never executed
        -: 2635:      // This exception type can only be thrown by a failed Google
        -: 2636:      // Test assertion with the intention of letting another testing
        -: 2637:      // framework catch it.  Therefore we just re-throw it.
    =====: 2638:      throw;
call    0 never executed
    =====: 2639:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2639-block  0
call    0 never executed
    $$$$$: 2639-block  1
call    1 never executed
    =====: 2640:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2640-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2640-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2640-block  2
call    8 never executed
    $$$$$: 2640-block  3
        -: 2641:          TestPartResult::kFatalFailure,
    =====: 2642:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2643:    } catch (...) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
        -: 2646:          FormatCxxExceptionMessage(nullptr, location));
        -: 2647:    }
    =====: 2648:    return static_cast<Result>(0);
    $$$$$: 2648-block  0
        -: 2649:#else
        -: 2650:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2651:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2652:  } else {
    #####: 2653:    return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:  }
        -: 2655:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 72 returned 100% blocks executed 18%
       72: 2603:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2604:                                           const char* location) {
        -: 2605:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2606:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2607:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2608:  // after the exception is caught and either report or re-throw the
        -: 2609:  // exception based on the flag's value:
        -: 2610:  //
        -: 2611:  // try {
        -: 2612:  //   // Perform the test method.
        -: 2613:  // } catch (...) {
        -: 2614:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2615:  //     // Report the exception as failure.
        -: 2616:  //   else
        -: 2617:  //     throw;  // Re-throws the original exception.
        -: 2618:  // }
        -: 2619:  //
        -: 2620:  // However, the purpose of this flag is to allow the program to drop into
        -: 2621:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2622:  // control enters the catch block, the exception origin information is
        -: 2623:  // lost and the debugger will stop the program at the point of the
        -: 2624:  // re-throw in this function -- instead of at the point of the original
        -: 2625:  // throw statement in the code under test.  For this reason, we perform
        -: 2626:  // the check early, sacrificing the ability to affect Google Test's
        -: 2627:  // exception handling in the method where the exception is thrown.
       72: 2628:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       72: 2628-block  0
call    0 returned 72
call    1 returned 72
branch  2 taken 72 (fallthrough)
branch  3 taken 0
        -: 2629:#if GTEST_HAS_EXCEPTIONS
        -: 2630:    try {
       72: 2631:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       72: 2631-block  0
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
       72: 2631-block  1
    =====: 2632:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2632-block  0
call    0 never executed
call    1 never executed
        -: 2633:      // This failure was reported already.
    =====: 2634:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2634-block  0
call    0 never executed
    $$$$$: 2634-block  1
call    1 never executed
        -: 2635:      // This exception type can only be thrown by a failed Google
        -: 2636:      // Test assertion with the intention of letting another testing
        -: 2637:      // framework catch it.  Therefore we just re-throw it.
    =====: 2638:      throw;
call    0 never executed
    =====: 2639:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2639-block  0
call    0 never executed
    $$$$$: 2639-block  1
call    1 never executed
    =====: 2640:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2640-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2640-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2640-block  2
call    8 never executed
    $$$$$: 2640-block  3
        -: 2641:          TestPartResult::kFatalFailure,
    =====: 2642:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2643:    } catch (...) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
        -: 2646:          FormatCxxExceptionMessage(nullptr, location));
        -: 2647:    }
    =====: 2648:    return static_cast<Result>(0);
    $$$$$: 2648-block  0
        -: 2649:#else
        -: 2650:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2651:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2652:  } else {
    #####: 2653:    return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:  }
        -: 2655:}
------------------
        -: 2656:
        -: 2657:}  // namespace internal
        -: 2658:
        -: 2659:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 18 returned 100% blocks executed 90%
       18: 2660:void Test::Run() {
      18*: 2661:  if (!HasSameFixtureClass()) return;
       18: 2661-block  0
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
    %%%%%: 2661-block  1
        -: 2662:
       18: 2663:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       18: 2663-block  0
call    0 returned 18
       18: 2664:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 18
call    1 returned 18
       18: 2665:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 18
        -: 2666:  // We will run the test only if SetUp() was successful and didn't call
        -: 2667:  // GTEST_SKIP().
      18*: 2668:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0
       18: 2668-block  0
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0
       18: 2668-block  1
    %%%%%: 2668-block  2
       18: 2668-block  3
branch  6 taken 18 (fallthrough)
branch  7 taken 0
       18: 2669:    impl->os_stack_trace_getter()->UponLeavingGTest();
       18: 2669-block  0
call    0 returned 18
call    1 returned 18
       18: 2670:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 18
        -: 2671:                                                  "the test body");
        -: 2672:  }
        -: 2673:
        -: 2674:  // However, we want to clean up as much as possible.  Hence we will
        -: 2675:  // always call TearDown(), even if SetUp() or the test body has
        -: 2676:  // failed.
       18: 2677:  impl->os_stack_trace_getter()->UponLeavingGTest();
       18: 2677-block  0
call    0 returned 18
call    1 returned 18
       18: 2678:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 18
        -: 2679:                                                "TearDown()");
        -: 2680:}
        -: 2681:
        -: 2682:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 37 returned 100% blocks executed 100%
       37: 2683:bool Test::HasFatalFailure() {
       37: 2684:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       37: 2684-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
        -: 2685:}
        -: 2686:
        -: 2687:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2688:bool Test::HasNonfatalFailure() {
        -: 2689:  return internal::GetUnitTestImpl()
        -: 2690:      ->current_test_result()
    #####: 2691:      ->HasNonfatalFailure();
    %%%%%: 2691-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2692:}
        -: 2693:
        -: 2694:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 37 returned 100% blocks executed 100%
       37: 2695:bool Test::IsSkipped() {
       37: 2696:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       37: 2696-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
        -: 2697:}
        -: 2698:
        -: 2699:// class TestInfo
        -: 2700:
        -: 2701:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2702:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 18 returned 100% blocks executed 31%
       18: 2703:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2704:                   const std::string& a_name, const char* a_type_param,
        -: 2705:                   const char* a_value_param,
        -: 2706:                   internal::CodeLocation a_code_location,
        -: 2707:                   internal::TypeId fixture_class_id,
       18: 2708:                   internal::TestFactoryBase* factory)
        -: 2709:    : test_suite_name_(a_test_suite_name),
        -: 2710:      name_(a_name),
    #####: 2711:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2711-block  1
call    3 never executed
    #####: 2712:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2712-block  1
call    3 never executed
        -: 2713:      location_(a_code_location),
        -: 2714:      fixture_class_id_(fixture_class_id),
        -: 2715:      should_run_(false),
        -: 2716:      is_disabled_(false),
        -: 2717:      matches_filter_(false),
        -: 2718:      is_in_another_shard_(false),
        -: 2719:      factory_(factory),
      18*: 2720:      result_() {}
       18: 2720-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18: 2720-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 18
    %%%%%: 2720-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2720-block  3
       18: 2720-block  4
       18: 2720-block  5
call   10 returned 18
branch 11 taken 0 (fallthrough)
branch 12 taken 18
    %%%%%: 2720-block  6
call   13 never executed
       18: 2720-block  7
branch 14 taken 0 (fallthrough)
branch 15 taken 18
    %%%%%: 2720-block  8
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 2720-block  9
       18: 2720-block 10
       18: 2720-block 11
call   20 returned 18
branch 21 taken 0 (fallthrough)
branch 22 taken 18
    %%%%%: 2720-block 12
call   23 never executed
       18: 2720-block 13
call   24 returned 18
branch 25 taken 18 (fallthrough)
branch 26 taken 0 (throw)
       18: 2720-block 14
call   27 returned 18
branch 28 taken 18 (fallthrough)
branch 29 taken 0 (throw)
       18: 2720-block 15
    $$$$$: 2720-block 16
branch 30 never executed
branch 31 never executed
    $$$$$: 2720-block 17
call   32 never executed
    $$$$$: 2720-block 18
    $$$$$: 2720-block 19
branch 33 never executed
branch 34 never executed
    $$$$$: 2720-block 20
call   35 never executed
    $$$$$: 2720-block 21
    $$$$$: 2720-block 22
call   36 never executed
    $$$$$: 2720-block 23
call   37 never executed
    $$$$$: 2720-block 24
call   38 never executed
    $$$$$: 2720-block 25
call   39 never executed
    $$$$$: 2720-block 26
call   40 never executed
        -: 2721:
        -: 2722:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 18 returned 100% blocks executed 100%
       18: 2723:TestInfo::~TestInfo() { delete factory_; }
       18: 2723-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 2723-block  1
call    2 returned 18
       18: 2723-block  2
call    3 returned 18
call    4 returned 18
call    5 returned 18
call    6 returned 18
call    7 returned 18
call    8 returned 18
        -: 2724:
        -: 2725:namespace internal {
        -: 2726:
        -: 2727:// Creates a new TestInfo object and registers it with Google Test;
        -: 2728:// returns the created object.
        -: 2729://
        -: 2730:// Arguments:
        -: 2731://
        -: 2732://   test_suite_name:  name of the test suite
        -: 2733://   name:             name of the test
        -: 2734://   type_param:       the name of the test's type parameter, or NULL if
        -: 2735://                     this is not a typed or a type-parameterized test.
        -: 2736://   value_param:      text representation of the test's value parameter,
        -: 2737://                     or NULL if this is not a value-parameterized test.
        -: 2738://   code_location:    code location where the test is defined
        -: 2739://   fixture_class_id: ID of the test fixture class
        -: 2740://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2741://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2742://   factory:          pointer to the factory that creates a test object.
        -: 2743://                     The newly created TestInfo instance will assume
        -: 2744://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 18 returned 100% blocks executed 52%
       18: 2745:TestInfo* MakeAndRegisterTestInfo(
        -: 2746:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2747:    const char* value_param, CodeLocation code_location,
        -: 2748:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2749:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2750:  TestInfo* const test_info =
        -: 2751:      new TestInfo(test_suite_name, name, type_param, value_param,
       18: 2752:                   code_location, fixture_class_id, factory);
       18: 2752-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18: 2752-block  1
call    4 returned 18
call    5 returned 18
branch  6 taken 18 (fallthrough)
branch  7 taken 0 (throw)
       18: 2752-block  2
call    8 returned 18
branch  9 taken 18 (fallthrough)
branch 10 taken 0 (throw)
       18: 2752-block  3
call   11 returned 18
branch 12 taken 18 (fallthrough)
branch 13 taken 0 (throw)
       18: 2752-block  4
call   14 returned 18
branch 15 taken 18 (fallthrough)
branch 16 taken 0 (throw)
       18: 2752-block  5
call   17 returned 18
call   18 returned 18
call   19 returned 18
call   20 returned 18
call   21 returned 18
    $$$$$: 2752-block  6
call   22 never executed
    $$$$$: 2752-block  7
call   23 never executed
    $$$$$: 2752-block  8
    $$$$$: 2752-block  9
call   24 never executed
    $$$$$: 2752-block 10
    $$$$$: 2752-block 11
call   25 never executed
    $$$$$: 2752-block 12
    $$$$$: 2752-block 13
call   26 never executed
    $$$$$: 2752-block 14
    $$$$$: 2752-block 15
call   27 never executed
       18: 2753:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 18
call    1 returned 18
       18: 2754:  return test_info;
       18: 2754-block  0
        -: 2755:}
        -: 2756:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2757:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2758:                                CodeLocation code_location) {
    #####: 2759:  Message errors;
    %%%%%: 2759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2759-block  1
call    3 never executed
        -: 2760:  errors
    #####: 2761:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2761-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2761-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2761-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2762:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2763:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2763-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2763-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2764:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2764-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2765:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2766:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2766-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2767:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2767-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2768:      << "test suites.";
    %%%%%: 2768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2769:
    #####: 2770:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2770-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 2770-block  2
call   10 never executed
    $$$$$: 2770-block  3
    $$$$$: 2770-block  4
call   11 never executed
    $$$$$: 2770-block  5
        -: 2771:                                          code_location.line)
    #####: 2772:                    << " " << errors.GetString();
    %%%%%: 2772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2772-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2772-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2772-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2772-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2772-block  5
call   14 never executed
    $$$$$: 2772-block  6
    #####: 2773:}
        -: 2774:}  // namespace internal
        -: 2775:
        -: 2776:namespace {
        -: 2777:
        -: 2778:// A predicate that checks the test name of a TestInfo against a known
        -: 2779:// value.
        -: 2780://
        -: 2781:// This is used for implementation of the TestSuite class only.  We put
        -: 2782:// it in the anonymous namespace to prevent polluting the outer
        -: 2783:// namespace.
        -: 2784://
        -: 2785:// TestNameIs is copyable.
        -: 2786:class TestNameIs {
        -: 2787: public:
        -: 2788:  // Constructor.
        -: 2789:  //
        -: 2790:  // TestNameIs has NO default constructor.
        -: 2791:  explicit TestNameIs(const char* name) : name_(name) {}
        -: 2792:
        -: 2793:  // Returns true if and only if the test name of test_info matches name_.
        -: 2794:  bool operator()(const TestInfo* test_info) const {
        -: 2795:    return test_info && test_info->name() == name_;
        -: 2796:  }
        -: 2797:
        -: 2798: private:
        -: 2799:  std::string name_;
        -: 2800:};
        -: 2801:
        -: 2802:}  // namespace
        -: 2803:
        -: 2804:namespace internal {
        -: 2805:
        -: 2806:// This method expands all parameterized tests registered with macros TEST_P
        -: 2807:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2808:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2809:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2810:  if (!parameterized_tests_registered_) {
        1: 2810-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2811:    parameterized_test_registry_.RegisterTests();
        1: 2811-block  0
call    0 returned 1
        1: 2812:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2813:    parameterized_tests_registered_ = true;
        -: 2814:  }
        1: 2815:}
        -: 2816:
        -: 2817:}  // namespace internal
        -: 2818:
        -: 2819:// Creates the test object, runs it, records its result, and then
        -: 2820:// deletes it.
function _ZN7testing8TestInfo3RunEv called 18 returned 100% blocks executed 86%
       18: 2821:void TestInfo::Run() {
       18: 2822:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
       18: 2822-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2822-block  1
call    3 returned 18
call    4 returned 18
       18: 2823:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 2824:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2824-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2824-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2824-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2825:    return;
    %%%%%: 2825-block  0
        -: 2826:  }
        -: 2827:
        -: 2828:  // Tells UnitTest where to store test result.
       18: 2829:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       18: 2829-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2830:  impl->set_current_test_info(this);
       18: 2830-block  0
call    0 returned 18
        -: 2831:
        -: 2832:  // Notifies the unit test event listeners that a test is about to start.
       18: 2833:  repeater->OnTestStart(*this);
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2834:  result_.set_start_timestamp(internal::GetTimeInMillis());
       18: 2834-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2834-block  1
call    3 returned 18
       18: 2835:  internal::Timer timer;
call    0 returned 18
       18: 2836:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2836-block  0
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0 (throw)
        -: 2837:
        -: 2838:  // Creates the test object.
       36: 2839:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       18: 2840:      factory_, &internal::TestFactoryBase::CreateTest,
       18: 2840-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
        -: 2841:      "the test fixture's constructor");
        -: 2842:
        -: 2843:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2844:  // GTEST_SKIP().
        -: 2845:  // Note that the object will not be null
      18*: 2846:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
       18: 2846-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2846-block  1
branch  3 taken 18 (fallthrough)
branch  4 taken 0
       18: 2846-block  2
call    5 returned 18
branch  6 taken 18 (fallthrough)
branch  7 taken 0 (throw)
       18: 2846-block  3
branch  8 taken 18 (fallthrough)
branch  9 taken 0
       18: 2846-block  4
    %%%%%: 2846-block  5
       18: 2846-block  6
branch 10 taken 18 (fallthrough)
branch 11 taken 0
        -: 2847:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2848:    // exception handling code.
       18: 2849:    test->Run();
       18: 2849-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
        -: 2850:  }
        -: 2851:
       18: 2852:  if (test != nullptr) {
       18: 2852-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
        -: 2853:    // Deletes the test object.
       18: 2854:    impl->os_stack_trace_getter()->UponLeavingGTest();
       18: 2854-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2854-block  1
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0 (throw)
       18: 2855:    internal::HandleExceptionsInMethodIfSupported(
       18: 2855-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
        -: 2856:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2857:  }
        -: 2858:
       18: 2859:  result_.set_elapsed_time(timer.Elapsed());
       18: 2859-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 2859-block  1
call    3 returned 18
        -: 2860:
        -: 2861:  // Notifies the unit test event listener that a test has just finished.
       18: 2862:  repeater->OnTestEnd(*this);
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
        -: 2863:
        -: 2864:  // Tells UnitTest to stop associating assertion results to this
        -: 2865:  // test.
       18: 2866:  impl->set_current_test_info(nullptr);
       18: 2866-block  0
call    0 returned 18
        -: 2867:}
        -: 2868:
        -: 2869:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2870:void TestInfo::Skip() {
    #####: 2871:  if (!should_run_) return;
    %%%%%: 2871-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2871-block  1
        -: 2872:
    #####: 2873:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2873-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2874:  impl->set_current_test_info(this);
    %%%%%: 2874-block  0
call    0 never executed
        -: 2875:
    #####: 2876:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2876-block  0
call    3 never executed
call    4 never executed
        -: 2877:
        -: 2878:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2879:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2880:
        -: 2881:  const TestPartResult test_part_result =
    #####: 2882:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2882-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 2882-block  1
call    6 never executed
    #####: 2883:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2883-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2884:      test_part_result);
    %%%%%: 2884-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2885:
        -: 2886:  // Notifies the unit test event listener that a test has just finished.
    #####: 2887:  repeater->OnTestEnd(*this);
    %%%%%: 2887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2888:  impl->set_current_test_info(nullptr);
    %%%%%: 2888-block  0
call    0 never executed
        -: 2889:}
        -: 2890:
        -: 2891:// class TestSuite
        -: 2892:
        -: 2893:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2894:int TestSuite::successful_test_count() const {
        1: 2895:  return CountIf(test_info_list_, TestPassed);
        1: 2895-block  0
call    0 returned 1
        -: 2896:}
        -: 2897:
        -: 2898:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2899:int TestSuite::skipped_test_count() const {
        1: 2900:  return CountIf(test_info_list_, TestSkipped);
        1: 2900-block  0
call    0 returned 1
        -: 2901:}
        -: 2902:
        -: 2903:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 2 returned 100% blocks executed 100%
        2: 2904:int TestSuite::failed_test_count() const {
        2: 2905:  return CountIf(test_info_list_, TestFailed);
        2: 2905-block  0
call    0 returned 2
        -: 2906:}
        -: 2907:
        -: 2908:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2909:int TestSuite::reportable_disabled_test_count() const {
        1: 2910:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2910-block  0
call    0 returned 1
        -: 2911:}
        -: 2912:
        -: 2913:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2914:int TestSuite::disabled_test_count() const {
    #####: 2915:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2915-block  0
call    0 never executed
        -: 2916:}
        -: 2917:
        -: 2918:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2919:int TestSuite::reportable_test_count() const {
    #####: 2920:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2920-block  0
call    0 never executed
        -: 2921:}
        -: 2922:
        -: 2923:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 4 returned 100% blocks executed 100%
        4: 2924:int TestSuite::test_to_run_count() const {
        4: 2925:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2925-block  0
call    0 returned 4
        -: 2926:}
        -: 2927:
        -: 2928:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 19 returned 100% blocks executed 100%
       19: 2929:int TestSuite::total_test_count() const {
       19: 2930:  return static_cast<int>(test_info_list_.size());
       19: 2930-block  0
call    0 returned 19
        -: 2931:}
        -: 2932:
        -: 2933:// Creates a TestSuite with the given name.
        -: 2934://
        -: 2935:// Arguments:
        -: 2936://
        -: 2937://   a_name:       name of the test suite
        -: 2938://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2939://                 this is not a typed or a type-parameterized test suite.
        -: 2940://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2941://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 1 returned 100% blocks executed 36%
        1: 2942:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2943:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2944:                     internal::TearDownTestSuiteFunc tear_down_tc)
        -: 2945:    : name_(a_name),
    #####: 2946:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2946-block  1
call    3 never executed
        -: 2947:      set_up_tc_(set_up_tc),
        -: 2948:      tear_down_tc_(tear_down_tc),
        -: 2949:      should_run_(false),
        -: 2950:      start_timestamp_(0),
       1*: 2951:      elapsed_time_(0) {}
        1: 2951-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2951-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%: 2951-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2951-block  3
        1: 2951-block  4
        1: 2951-block  5
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%: 2951-block  6
call   14 never executed
        1: 2951-block  7
call   15 returned 1
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1: 2951-block  8
    $$$$$: 2951-block  9
call   20 never executed
    $$$$$: 2951-block 10
call   21 never executed
    $$$$$: 2951-block 11
branch 22 never executed
branch 23 never executed
    $$$$$: 2951-block 12
call   24 never executed
    $$$$$: 2951-block 13
    $$$$$: 2951-block 14
call   25 never executed
    $$$$$: 2951-block 15
call   26 never executed
    $$$$$: 2951-block 16
call   27 never executed
    $$$$$: 2951-block 17
call   28 never executed
        -: 2952:
        -: 2953:// Destructor of TestSuite.
        2: 2954:TestSuite::~TestSuite() {
        -: 2955:  // Deletes every Test in the collection.
        1: 2956:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 2957:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 1 returned 100% blocks executed 100%
        1: 2954:TestSuite::~TestSuite() {
        -: 2955:  // Deletes every Test in the collection.
        -: 2956:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2957:}
        1: 2957-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 1 returned 100% blocks executed 100%
        1: 2954:TestSuite::~TestSuite() {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 2955:  // Deletes every Test in the collection.
        1: 2956:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2956-block  0
call    0 returned 1
        1: 2957:}
------------------
        -: 2958:
        -: 2959:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2960:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2961:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2962:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2962-block  0
call    0 never executed
    #####: 2963:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2963-block  0
call    2 never executed
    %%%%%: 2963-block  1
    %%%%%: 2963-block  2
        -: 2964:}
        -: 2965:
        -: 2966:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2967:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 18 returned 100% blocks executed 86%
       18: 2968:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       18: 2969:  const int index = GetElementOr(test_indices_, i, -1);
       18: 2969-block  0
call    0 returned 18
      18*: 2970:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 2970-block  0
call    2 returned 18
    %%%%%: 2970-block  1
       18: 2970-block  2
        -: 2971:}
        -: 2972:
        -: 2973:// Adds a test to this test suite.  Will delete the test upon
        -: 2974:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 18 returned 100% blocks executed 100%
       18: 2975:void TestSuite::AddTestInfo(TestInfo* test_info) {
       18: 2976:  test_info_list_.push_back(test_info);
       18: 2976-block  0
call    0 returned 18
       18: 2977:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18: 2978:}
       18: 2978-block  0
        -: 2979:
        -: 2980:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 1 returned 100% blocks executed 70%
        1: 2981:void TestSuite::Run() {
       1*: 2982:  if (!should_run_) return;
        1: 2982-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2982-block  1
        -: 2983:
        1: 2984:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2984-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2985:  impl->set_current_test_suite(this);
        1: 2985-block  0
call    0 returned 1
        -: 2986:
        1: 2987:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2987-block  0
call    3 returned 1
call    4 returned 1
        -: 2988:
        -: 2989:  // Call both legacy and the new API
        1: 2990:  repeater->OnTestSuiteStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2991://  Legacy API is deprecated but still available
        -: 2992:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 2993:  repeater->OnTestCaseStart(*this);
        1: 2993-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2994:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 2995:
        1: 2996:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2996-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2996-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2997:  internal::HandleExceptionsInMethodIfSupported(
        1: 2997-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2998:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 2999:
        1: 3000:  const bool skip_all = ad_hoc_test_result().Failed();
        1: 3000-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 3001:
        1: 3002:  start_timestamp_ = internal::GetTimeInMillis();
        1: 3002-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3003:  internal::Timer timer;
        1: 3003-block  0
call    0 returned 1
       19: 3004:  for (int i = 0; i < total_test_count(); i++) {
       19: 3004-block  0
call    0 returned 19
branch  1 taken 18 (fallthrough)
branch  2 taken 1
       18: 3004-block  1
       18: 3005:    if (skip_all) {
       18: 3005-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 3006:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3006-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3007:    } else {
       18: 3008:      GetMutableTestInfo(i)->Run();
       18: 3008-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 3008-block  1
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0 (throw)
        -: 3009:    }
      18*: 3010:    if (GTEST_FLAG_GET(fail_fast) &&
       18: 3010-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    %%%%%: 3010-block  1
       18: 3010-block  2
       18: 3010-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 18
    #####: 3011:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3011-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3011-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3011-block  2
branch  7 never executed
branch  8 never executed
    #####: 3012:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3012-block  0
    %%%%%: 3012-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3012-block  2
    #####: 3013:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3013-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3014:      }
    #####: 3015:      break;
    %%%%%: 3015-block  0
        -: 3016:    }
        -: 3017:  }
        1: 3018:  elapsed_time_ = timer.Elapsed();
        1: 3018-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3019:
        1: 3020:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3020-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3020-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3021:  internal::HandleExceptionsInMethodIfSupported(
        1: 3021-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3022:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3023:
        -: 3024:  // Call both legacy and the new API
        1: 3025:  repeater->OnTestSuiteEnd(*this);
        1: 3025-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3026://  Legacy API is deprecated but still available
        -: 3027:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3028:  repeater->OnTestCaseEnd(*this);
        1: 3028-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3029:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3030:
        1: 3031:  impl->set_current_test_suite(nullptr);
        1: 3031-block  0
call    0 returned 1
        -: 3032:}
        -: 3033:
        -: 3034:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3035:void TestSuite::Skip() {
    #####: 3036:  if (!should_run_) return;
    %%%%%: 3036-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3036-block  1
        -: 3037:
    #####: 3038:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3038-block  0
call    0 never executed
    #####: 3039:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3040:
    #####: 3041:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3042:
        -: 3043:  // Call both legacy and the new API
    #####: 3044:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3045://  Legacy API is deprecated but still available
        -: 3046:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3047:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3048:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3049:
    #####: 3050:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3051:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3051-block  0
call    0 never executed
call    1 never executed
        -: 3052:  }
        -: 3053:
        -: 3054:  // Call both legacy and the new API
    #####: 3055:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3055-block  0
call    0 never executed
        -: 3056:  // Legacy API is deprecated but still available
        -: 3057:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3058:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3059:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3060:
    #####: 3061:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3062:}
        -: 3063:
        -: 3064:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3065:void TestSuite::ClearResult() {
        1: 3066:  ad_hoc_test_result_.Clear();
        1: 3066-block  0
call    0 returned 1
        1: 3067:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
        1: 3068:}
        -: 3069:
        -: 3070:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3071:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3072:  Shuffle(random, &test_indices_);
    %%%%%: 3072-block  0
call    0 never executed
    #####: 3073:}
        -: 3074:
        -: 3075:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3076:void TestSuite::UnshuffleTests() {
       19: 3077:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3077-block  0
       19: 3077-block  1
call    0 returned 19
branch  1 taken 18 (fallthrough)
branch  2 taken 1
       18: 3078:    test_indices_[i] = static_cast<int>(i);
       18: 3078-block  0
call    0 returned 18
        -: 3079:  }
        1: 3080:}
        -: 3081:
        -: 3082:// Formats a countable noun.  Depending on its quantity, either the
        -: 3083:// singular form or the plural form is used. e.g.
        -: 3084://
        -: 3085:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3086:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 7 returned 100% blocks executed 71%
        7: 3087:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3088:                                       const char* plural_form) {
       14: 3089:  return internal::StreamableToString(count) + " " +
        7: 3089-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3089-block  1
call    4 returned 7
call    5 returned 7
    $$$$$: 3089-block  2
call    6 never executed
    $$$$$: 3089-block  3
    $$$$$: 3089-block  4
call    7 never executed
       21: 3090:         (count == 1 ? singular_form : plural_form);
        7: 3090-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2: 3090-block  1
        5: 3090-block  2
        7: 3090-block  3
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7: 3090-block  4
        -: 3091:}
        -: 3092:
        -: 3093:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3094:static std::string FormatTestCount(int test_count) {
        3: 3095:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3095-block  0
call    0 returned 3
        -: 3096:}
        -: 3097:
        -: 3098:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3099:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3100:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3100-block  0
call    0 returned 2
        -: 3101:}
        -: 3102:
        -: 3103:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3104:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3105:// to "Failure", as the user usually doesn't care about the difference
        -: 3106:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3107:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3108:  switch (type) {
    %%%%%: 3108-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3109:    case TestPartResult::kSkip:
    #####: 3110:      return "Skipped\n";
    %%%%%: 3110-block  0
    #####: 3111:    case TestPartResult::kSuccess:
    #####: 3112:      return "Success";
    %%%%%: 3112-block  0
        -: 3113:
    #####: 3114:    case TestPartResult::kNonFatalFailure:
        -: 3115:    case TestPartResult::kFatalFailure:
        -: 3116:#ifdef _MSC_VER
        -: 3117:      return "error: ";
        -: 3118:#else
    #####: 3119:      return "Failure\n";
    %%%%%: 3119-block  0
        -: 3120:#endif
    #####: 3121:    default:
    #####: 3122:      return "Unknown result type";
    %%%%%: 3122-block  0
        -: 3123:  }
        -: 3124:}
        -: 3125:
        -: 3126:namespace internal {
        -: 3127:namespace {
        -: 3128:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3129:}  // namespace
        -: 3130:
        -: 3131:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3132:static std::string PrintTestPartResultToString(
        -: 3133:    const TestPartResult& test_part_result) {
    #####: 3134:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3134-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3134-block  1
call    7 never executed
    $$$$$: 3134-block  2
    $$$$$: 3134-block  3
call    8 never executed
        -: 3135:                           test_part_result.file_name(),
    #####: 3136:                           test_part_result.line_number())
    %%%%%: 3136-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3137:                    << " "
    %%%%%: 3137-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3138:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3138-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3138-block  1
    #####: 3139:                    << test_part_result.message())
    %%%%%: 3139-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3139-block  1
call    4 never executed
    $$$$$: 3139-block  2
    #####: 3140:      .GetString();
    %%%%%: 3140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3140-block  1
        -: 3141:}
        -: 3142:
        -: 3143:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3144:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3145:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3145-block  1
call    3 never executed
    $$$$$: 3145-block  2
call    4 never executed
    #####: 3146:  printf("%s\n", result.c_str());
    %%%%%: 3146-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3147:  fflush(stdout);
    %%%%%: 3147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3148:  // If the test program runs in Visual Studio or a debugger, the
        -: 3149:  // following statements add the test part result message to the Output
        -: 3150:  // window such that the user can double-click on it to jump to the
        -: 3151:  // corresponding source code location; otherwise they do nothing.
        -: 3152:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3153:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3154:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3155:  // want the same message printed twice.
        -: 3156:  ::OutputDebugStringA(result.c_str());
        -: 3157:  ::OutputDebugStringA("\n");
        -: 3158:#endif
    #####: 3159:}
        -: 3160:
        -: 3161:// class PrettyUnitTestResultPrinter
        -: 3162:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3163:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3164:
        -: 3165:// Returns the character attribute for the given color.
        -: 3166:static WORD GetColorAttribute(GTestColor color) {
        -: 3167:  switch (color) {
        -: 3168:    case GTestColor::kRed:
        -: 3169:      return FOREGROUND_RED;
        -: 3170:    case GTestColor::kGreen:
        -: 3171:      return FOREGROUND_GREEN;
        -: 3172:    case GTestColor::kYellow:
        -: 3173:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3174:    default:
        -: 3175:      return 0;
        -: 3176:  }
        -: 3177:}
        -: 3178:
        -: 3179:static int GetBitOffset(WORD color_mask) {
        -: 3180:  if (color_mask == 0) return 0;
        -: 3181:
        -: 3182:  int bitOffset = 0;
        -: 3183:  while ((color_mask & 1) == 0) {
        -: 3184:    color_mask >>= 1;
        -: 3185:    ++bitOffset;
        -: 3186:  }
        -: 3187:  return bitOffset;
        -: 3188:}
        -: 3189:
        -: 3190:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3191:  // Let's reuse the BG
        -: 3192:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3193:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3194:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3195:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3196:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3197:
        -: 3198:  WORD new_color =
        -: 3199:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3200:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3201:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3202:
        -: 3203:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3204:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3205:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3206:  }
        -: 3207:  return new_color;
        -: 3208:}
        -: 3209:
        -: 3210:#else
        -: 3211:
        -: 3212:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3213:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3214:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3215:  switch (color) {
    %%%%%: 3215-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3216:    case GTestColor::kRed:
    #####: 3217:      return "1";
    %%%%%: 3217-block  0
    #####: 3218:    case GTestColor::kGreen:
    #####: 3219:      return "2";
    %%%%%: 3219-block  0
    #####: 3220:    case GTestColor::kYellow:
    #####: 3221:      return "3";
    %%%%%: 3221-block  0
    #####: 3222:    default:
    #####: 3223:      return nullptr;
    %%%%%: 3223-block  0
        -: 3224:  }
        -: 3225:}
        -: 3226:
        -: 3227:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3228:
        -: 3229:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 37%
        1: 3230:bool ShouldUseColor(bool stdout_is_tty) {
        2: 3231:  std::string c = GTEST_FLAG_GET(color);
        1: 3231-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3231-block  1
call    3 returned 1
        1: 3232:  const char* const gtest_color = c.c_str();
        1: 3232-block  0
call    0 returned 1
        -: 3233:
        1: 3234:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3235:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3236:    // On Windows the TERM variable is usually not set, but the
        -: 3237:    // console there does support colors.
        -: 3238:    return stdout_is_tty;
        -: 3239:#else
        -: 3240:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3241:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3241-block  0
call    0 never executed
        -: 3242:    const bool term_supports_color =
    #####: 3243:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3244:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3244-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3245:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 3245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3246:        String::CStringEquals(term, "screen") ||
    %%%%%: 3246-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3247:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3247-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3248:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3249:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3249-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3250:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3250-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3251:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3251-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3252:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3252-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3252-block  1
    %%%%%: 3252-block  2
    #####: 3253:        String::CStringEquals(term, "cygwin");
    %%%%%: 3253-block  0
call    0 never executed
    #####: 3254:    return stdout_is_tty && term_supports_color;
    %%%%%: 3254-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3254-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3254-block  2
    %%%%%: 3254-block  3
    %%%%%: 3254-block  4
        -: 3255:#endif  // GTEST_OS_WINDOWS
        -: 3256:  }
        -: 3257:
        2: 3258:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3258-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 3259:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 3260:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3260-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3260-block  1
        1: 3260-block  2
        2: 3261:         String::CStringEquals(gtest_color, "1");
        1: 3261-block  0
call    0 returned 1
        1: 3261-block  1
        -: 3262:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3263:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3264:  // be conservative.
        -: 3265:}
        -: 3266:
        -: 3267:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3268:// cannot simply emit special characters and have the terminal change colors.
        -: 3269:// This routine must actually emit the characters rather than return a string
        -: 3270:// that would be colored when printed, as can be done on Linux.
        -: 3271:
        -: 3272:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 43 returned 100% blocks executed 58%
       43: 3273:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3274:  va_list args;
       43: 3275:  va_start(args, fmt);
        -: 3276:
        -: 3277:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 3278:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 3279:  const bool use_color = AlwaysFalse();
        -: 3280:#else
        -: 3281:  static const bool in_color_mode =
       43: 3282:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       43: 3282-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 42
        1: 3282-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3282-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3282-block  3
call   10 returned 1
    $$$$$: 3282-block  4
branch 11 never executed
branch 12 never executed
    $$$$$: 3282-block  5
call   13 never executed
      43*: 3283:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       43: 3283-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    %%%%%: 3283-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3283-block  2
       43: 3283-block  3
        -: 3284:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS
        -: 3285:
       43: 3286:  if (!use_color) {
       43: 3286-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 3287:    vprintf(fmt, args);
       43: 3287-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 3288:    va_end(args);
       43: 3289:    return;
       43: 3289-block  0
        -: 3290:  }
        -: 3291:
        -: 3292:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3293:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3294:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3295:
        -: 3296:  // Gets the current text color.
        -: 3297:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3298:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3299:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3300:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3301:
        -: 3302:  // We need to flush the stream buffers into the console before each
        -: 3303:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3304:  // printed but has not yet reached the console.
        -: 3305:  fflush(stdout);
        -: 3306:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3307:
        -: 3308:  vprintf(fmt, args);
        -: 3309:
        -: 3310:  fflush(stdout);
        -: 3311:  // Restores the text color.
        -: 3312:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3313:#else
    #####: 3314:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3314-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3315:  vprintf(fmt, args);
    %%%%%: 3315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3316:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3317:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3318:  va_end(args);
    %%%%%: 3318-block  0
        -: 3319:}
        -: 3320:
        -: 3321:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3322:// output to label the type parameter and value parameter for a test.
        -: 3323:static const char kTypeParamLabel[] = "TypeParam";
        -: 3324:static const char kValueParamLabel[] = "GetParam()";
        -: 3325:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3326:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3327:  const char* const type_param = test_info.type_param();
    %%%%%: 3327-block  0
call    0 never executed
    #####: 3328:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3329:
    #####: 3330:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3330-block  0
branch  2 never executed
branch  3 never executed
    #####: 3331:    printf(", where ");
    %%%%%: 3331-block  0
call    0 never executed
    #####: 3332:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3333:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3333-block  0
call    0 never executed
    #####: 3334:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3334-block  0
call    2 never executed
        -: 3335:    }
    #####: 3336:    if (value_param != nullptr) {
    %%%%%: 3336-block  0
branch  0 never executed
branch  1 never executed
    #####: 3337:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3337-block  0
call    0 never executed
        -: 3338:    }
        -: 3339:  }
    #####: 3340:}
        -: 3341:
        -: 3342:// This class implements the TestEventListener interface.
        -: 3343://
        -: 3344:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3345:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3346: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 1 returned 100% blocks executed 100%
        1: 3347:  PrettyUnitTestResultPrinter() {}
        1: 3347-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 36 returned 100% blocks executed 100%
       36: 3348:  static void PrintTestName(const char* test_suite, const char* test) {
       36: 3349:    printf("%s.%s", test_suite, test);
       36: 3349-block  0
call    0 returned 36
       36: 3350:  }
        -: 3351:
        -: 3352:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3353:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3354:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3355:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3356:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3357:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3358:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3359:#else
        -: 3360:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3361:#endif  // OnTestCaseStart
        -: 3362:
        -: 3363:  void OnTestStart(const TestInfo& test_info) override;
        -: 3364:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3365:
        -: 3366:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3367:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3368:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3369:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3370:#else
        -: 3371:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3372:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3373:
        -: 3374:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3375:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3376:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3377:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3378:
        -: 3379: private:
        -: 3380:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3381:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3382:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3383:};
        -: 3384:
        -: 3385:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 59%
        1: 3386:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3387:    const UnitTest& unit_test, int iteration) {
        1: 3388:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3388-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3389:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3389-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3390:
        2: 3391:  std::string f = GTEST_FLAG_GET(filter);
        1: 3391-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3391-block  1
call    3 returned 1
    $$$$$: 3391-block  2
call    4 never executed
        1: 3392:  const char* const filter = f.c_str();
        1: 3392-block  0
call    0 returned 1
        -: 3393:
        -: 3394:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3395:  // tests may be skipped.
        1: 3396:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3397:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3398:                  filter);
        -: 3399:  }
        -: 3400:
        1: 3401:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3401-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3401-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3402:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3402-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3403:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3403-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3404:                  static_cast<int>(shard_index) + 1,
        -: 3405:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3406:  }
        -: 3407:
        1: 3408:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3408-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3409:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3409-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3410:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3411:                  unit_test.random_seed());
        -: 3412:  }
        -: 3413:
        1: 3414:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3414-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3415:  printf("Running %s from %s.\n",
        1: 3415-block  0
call    0 returned 1
        1: 3415-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3416:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3416-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3416-block  1
call    6 returned 1
    $$$$$: 3416-block  2
call    7 never executed
    $$$$$: 3416-block  3
        2: 3417:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3417-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3417-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3417-block  2
call    7 never executed
    $$$$$: 3417-block  3
        1: 3418:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3419:}
        -: 3420:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3421:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3422:    const UnitTest& /*unit_test*/) {
        1: 3423:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3423-block  0
call    0 returned 1
        1: 3424:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3425:  fflush(stdout);
call    0 returned 1
        1: 3426:}
        -: 3427:
        -: 3428:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 76%
        1: 3429:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3430:  const std::string counts =
        2: 3431:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3431-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3431-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3431-block  2
call    6 returned 1
    $$$$$: 3431-block  3
call    7 never executed
        1: 3432:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3432-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3433:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3433-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3434:  if (test_case.type_param() == nullptr) {
        1: 3434-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3435:    printf("\n");
        1: 3435-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3436:  } else {
    #####: 3437:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3437-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3438:  }
        1: 3439:  fflush(stdout);
        1: 3439-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3440:}
        -: 3441:#else
        -: 3442:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3443:    const TestSuite& test_suite) {
        -: 3444:  const std::string counts =
        -: 3445:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3446:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3447:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3448:  if (test_suite.type_param() == nullptr) {
        -: 3449:    printf("\n");
        -: 3450:  } else {
        -: 3451:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3452:  }
        -: 3453:  fflush(stdout);
        -: 3454:}
        -: 3455:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3456:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 18 returned 100% blocks executed 100%
       18: 3457:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       18: 3458:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       18: 3458-block  0
call    0 returned 18
       18: 3459:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 18
call    1 returned 18
call    2 returned 18
       18: 3460:  printf("\n");
call    0 returned 18
       18: 3461:  fflush(stdout);
call    0 returned 18
       18: 3462:}
        -: 3463:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3464:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3465:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3465-block  0
call    0 never executed
    #####: 3466:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3467:  printf("\n");
call    0 never executed
    #####: 3468:  fflush(stdout);
call    0 never executed
    #####: 3469:}
        -: 3470:
        -: 3471:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3472:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3473:    const TestPartResult& result) {
    #####: 3474:  switch (result.type()) {
    %%%%%: 3474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3475:    // If the test part succeeded, we don't need to do anything.
    #####: 3476:    case TestPartResult::kSuccess:
    #####: 3477:      return;
    %%%%%: 3477-block  0
    #####: 3478:    default:
        -: 3479:      // Print failure message from the assertion
        -: 3480:      // (e.g. expected this and got that).
    #####: 3481:      PrintTestPartResult(result);
    %%%%%: 3481-block  0
call    0 never executed
    #####: 3482:      fflush(stdout);
call    0 never executed
        -: 3483:  }
        -: 3484:}
        -: 3485:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 18 returned 100% blocks executed 68%
       18: 3486:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       18: 3487:  if (test_info.result()->Passed()) {
       18: 3487-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0
       18: 3488:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       18: 3488-block  0
call    0 returned 18
    #####: 3489:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3489-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3490:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3490-block  0
call    0 never executed
        -: 3491:  } else {
    #####: 3492:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3492-block  0
call    0 never executed
        -: 3493:  }
       18: 3494:  PrintTestName(test_info.test_suite_name(), test_info.name());
       18: 3494-block  0
call    0 returned 18
call    1 returned 18
call    2 returned 18
      18*: 3495:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 18
call    1 returned 18
branch  2 taken 0 (fallthrough)
branch  3 taken 18
    %%%%%: 3495-block  0
call    4 never executed
        -: 3496:
       18: 3497:  if (GTEST_FLAG_GET(print_time)) {
       18: 3497-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 3498:    printf(" (%s ms)\n",
       18: 3498-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       36: 3499:           internal::StreamableToString(test_info.result()->elapsed_time())
       18: 3499-block  0
call    0 returned 18
call    1 returned 18
call    2 returned 18
branch  3 taken 18 (fallthrough)
branch  4 taken 0 (throw)
       18: 3499-block  1
call    5 returned 18
    $$$$$: 3499-block  2
call    6 never executed
    $$$$$: 3499-block  3
        -: 3500:               .c_str());
        -: 3501:  } else {
    #####: 3502:    printf("\n");
    %%%%%: 3502-block  0
call    0 never executed
        -: 3503:  }
       18: 3504:  fflush(stdout);
       18: 3504-block  0
call    0 returned 18
       18: 3505:}
        -: 3506:
        -: 3507:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 70%
        1: 3508:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3509:  if (!GTEST_FLAG_GET(print_time)) return;
        1: 3509-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3509-block  1
        -: 3510:
        -: 3511:  const std::string counts =
        2: 3512:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3512-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3512-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3512-block  2
call    6 returned 1
    $$$$$: 3512-block  3
call    7 never executed
        1: 3513:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3513-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3514:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        1: 3514-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 3515:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3515-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3515-block  1
call    4 returned 1
    $$$$$: 3515-block  2
call    5 never executed
    $$$$$: 3515-block  3
    $$$$$: 3515-block  4
        1: 3516:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3517:}
        -: 3518:#else
        -: 3519:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3520:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3521:
        -: 3522:  const std::string counts =
        -: 3523:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3524:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3525:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3526:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3527:  fflush(stdout);
        -: 3528:}
        -: 3529:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3530:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3531:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3532:    const UnitTest& /*unit_test*/) {
        1: 3533:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3533-block  0
call    0 returned 1
        1: 3534:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3535:  fflush(stdout);
call    0 returned 1
        1: 3536:}
        -: 3537:
        -: 3538:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3539:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3540:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3540-block  0
call    0 never executed
    #####: 3541:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3542:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3542-block  0
call    5 never executed
    $$$$$: 3542-block  1
call    6 never executed
        -: 3543:
    #####: 3544:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3544-block  1
    #####: 3545:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3545-block  0
call    0 never executed
    #####: 3546:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3546-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3546-block  1
    %%%%%: 3546-block  2
    %%%%%: 3546-block  3
branch  6 never executed
branch  7 never executed
    #####: 3547:      continue;
    %%%%%: 3547-block  0
        -: 3548:    }
    #####: 3549:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3549-block  0
    %%%%%: 3549-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3549-block  2
    #####: 3550:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3550-block  0
call    0 never executed
    #####: 3551:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3551-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3551-block  1
    %%%%%: 3551-block  2
    %%%%%: 3551-block  3
branch  7 never executed
branch  8 never executed
    #####: 3552:        continue;
    %%%%%: 3552-block  0
        -: 3553:      }
    #####: 3554:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3554-block  0
call    0 never executed
    #####: 3555:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3556:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3557:      printf("\n");
call    0 never executed
        -: 3558:    }
        -: 3559:  }
    #####: 3560:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3560-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3560-block  1
    %%%%%: 3560-block  2
    %%%%%: 3560-block  3
call    2 never executed
        -: 3561:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3562:}
        -: 3563:
        -: 3564:// Internal helper for printing the list of test suite failures not covered by
        -: 3565:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3566:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3567:    const UnitTest& unit_test) {
    #####: 3568:  int suite_failure_count = 0;
    #####: 3569:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3569-block  0
    %%%%%: 3569-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3569-block  2
    #####: 3570:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3570-block  0
call    0 never executed
    #####: 3571:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3572:      continue;
    %%%%%: 3572-block  0
        -: 3573:    }
    #####: 3574:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3575:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3575-block  0
call    0 never executed
    #####: 3576:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3577:      ++suite_failure_count;
        -: 3578:    }
        -: 3579:  }
    #####: 3580:  if (suite_failure_count > 0) {
    %%%%%: 3580-block  0
branch  0 never executed
branch  1 never executed
    #####: 3581:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3581-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3581-block  1
    %%%%%: 3581-block  2
    %%%%%: 3581-block  3
call    2 never executed
        -: 3582:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3583:  }
    #####: 3584:}
        -: 3585:
        -: 3586:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3587:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3588:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3588-block  0
call    0 never executed
    #####: 3589:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3590:    return;
    %%%%%: 3590-block  0
        -: 3591:  }
        -: 3592:
    #####: 3593:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3593-block  0
    %%%%%: 3593-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3593-block  2
    #####: 3594:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3594-block  0
call    0 never executed
    #####: 3595:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3595-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3595-block  1
    %%%%%: 3595-block  2
    %%%%%: 3595-block  3
branch  6 never executed
branch  7 never executed
    #####: 3596:      continue;
    %%%%%: 3596-block  0
        -: 3597:    }
    #####: 3598:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3598-block  0
    %%%%%: 3598-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3598-block  2
    #####: 3599:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3599-block  0
call    0 never executed
    #####: 3600:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3600-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3600-block  1
    %%%%%: 3600-block  2
    %%%%%: 3600-block  3
branch  7 never executed
branch  8 never executed
    #####: 3601:        continue;
    %%%%%: 3601-block  0
        -: 3602:      }
    #####: 3603:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3603-block  0
call    0 never executed
    #####: 3604:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3605:      printf("\n");
call    0 never executed
        -: 3606:    }
        -: 3607:  }
        -: 3608:}
        -: 3609:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3610:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3611:                                                     int /*iteration*/) {
        1: 3612:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3612-block  0
call    0 returned 1
        2: 3613:  printf("%s from %s ran.",
call    0 returned 1
        1: 3613-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3614:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3614-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3614-block  1
call    6 returned 1
    $$$$$: 3614-block  2
call    7 never executed
    $$$$$: 3614-block  3
        2: 3615:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3615-block  0
call    3 never executed
    $$$$$: 3615-block  1
call    4 never executed
        1: 3616:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3617:    printf(" (%s ms total)",
        1: 3617-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3618:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3618-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3618-block  1
call    4 returned 1
    $$$$$: 3618-block  2
call    5 never executed
    $$$$$: 3618-block  3
    $$$$$: 3618-block  4
call    6 never executed
        -: 3619:  }
        1: 3620:  printf("\n");
        1: 3620-block  0
call    0 returned 1
        1: 3621:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3622:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3622-block  0
call    6 returned 1
    $$$$$: 3622-block  1
call    7 never executed
    $$$$$: 3622-block  2
call    8 never executed
        -: 3623:
        1: 3624:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3625:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3626:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3626-block  0
call    0 never executed
    #####: 3627:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3627-block  0
call    5 never executed
    $$$$$: 3627-block  1
call    6 never executed
    #####: 3628:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3629:  }
        -: 3630:
        1: 3631:  if (!unit_test.Passed()) {
        1: 3631-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3632:    PrintFailedTests(unit_test);
    %%%%%: 3632-block  0
call    0 never executed
    #####: 3633:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3634:  }
        -: 3635:
        1: 3636:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3636-block  0
call    0 returned 1
       1*: 3637:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3637-block  0
branch  2 never executed
branch  3 never executed
    #####: 3638:    if (unit_test.Passed()) {
    %%%%%: 3638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3639:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3639-block  0
call    0 never executed
        -: 3640:    }
    #####: 3641:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3641-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3641-block  1
    %%%%%: 3641-block  2
    %%%%%: 3641-block  3
call    2 never executed
        -: 3642:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3643:  }
        -: 3644:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3645:  fflush(stdout);
        1: 3645-block  0
call    0 returned 1
        1: 3646:}
        -: 3647:
        -: 3648:// End PrettyUnitTestResultPrinter
        -: 3649:
        -: 3650:// This class implements the TestEventListener interface.
        -: 3651://
        -: 3652:// Class BriefUnitTestResultPrinter is copyable.
        -: 3653:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3654: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC2Ev called 0 returned 0% blocks executed 0%
    #####: 3655:  BriefUnitTestResultPrinter() {}
    %%%%%: 3655-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3656:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3657:    printf("%s.%s", test_suite, test);
    %%%%%: 3657-block  0
call    0 never executed
    #####: 3658:  }
        -: 3659:
        -: 3660:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3661:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3662:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3663:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3664:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3665:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3666:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3667:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3668:#else
        -: 3669:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3670:#endif  // OnTestCaseStart
        -: 3671:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3672:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3673:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3674:
        -: 3675:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3676:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3677:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3678:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3679:#else
        -: 3680:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3681:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3682:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3683:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3684:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3685:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3686:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3687:};
        -: 3688:
        -: 3689:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3690:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3691:    const TestPartResult& result) {
    #####: 3692:  switch (result.type()) {
    %%%%%: 3692-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3693:    // If the test part succeeded, we don't need to do anything.
    #####: 3694:    case TestPartResult::kSuccess:
    #####: 3695:      return;
    %%%%%: 3695-block  0
    #####: 3696:    default:
        -: 3697:      // Print failure message from the assertion
        -: 3698:      // (e.g. expected this and got that).
    #####: 3699:      PrintTestPartResult(result);
    %%%%%: 3699-block  0
call    0 never executed
    #####: 3700:      fflush(stdout);
call    0 never executed
        -: 3701:  }
        -: 3702:}
        -: 3703:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3704:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3705:  if (test_info.result()->Failed()) {
    %%%%%: 3705-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3706:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3706-block  0
call    0 never executed
    #####: 3707:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3708:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3709:
    #####: 3710:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3711:      printf(" (%s ms)\n",
    %%%%%: 3711-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3712:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3712-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3712-block  1
call    5 never executed
    $$$$$: 3712-block  2
call    6 never executed
    $$$$$: 3712-block  3
        -: 3713:                 .c_str());
        -: 3714:    } else {
    #####: 3715:      printf("\n");
    %%%%%: 3715-block  0
call    0 never executed
        -: 3716:    }
    #####: 3717:    fflush(stdout);
    %%%%%: 3717-block  0
call    0 never executed
        -: 3718:  }
    #####: 3719:}
    %%%%%: 3719-block  0
        -: 3720:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3721:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3722:                                                    int /*iteration*/) {
    #####: 3723:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3723-block  0
call    0 never executed
    #####: 3724:  printf("%s from %s ran.",
call    0 never executed
    %%%%%: 3724-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3725:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3725-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3725-block  1
call    6 never executed
    $$$$$: 3725-block  2
call    7 never executed
    $$$$$: 3725-block  3
    #####: 3726:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3726-block  0
call    3 never executed
    $$$$$: 3726-block  1
call    4 never executed
    #####: 3727:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3728:    printf(" (%s ms total)",
    %%%%%: 3728-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3729:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3729-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3729-block  1
call    4 never executed
    $$$$$: 3729-block  2
call    5 never executed
    $$$$$: 3729-block  3
    $$$$$: 3729-block  4
call    6 never executed
        -: 3730:  }
    #####: 3731:  printf("\n");
    %%%%%: 3731-block  0
call    0 never executed
    #####: 3732:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3733:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3733-block  0
call    6 never executed
    $$$$$: 3733-block  1
call    7 never executed
    $$$$$: 3733-block  2
call    8 never executed
        -: 3734:
    #####: 3735:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3736:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3737:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3737-block  0
call    0 never executed
    #####: 3738:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3738-block  0
call    5 never executed
    $$$$$: 3738-block  1
call    6 never executed
        -: 3739:  }
        -: 3740:
    #####: 3741:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3741-block  0
call    0 never executed
    #####: 3742:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3742-block  0
branch  2 never executed
branch  3 never executed
    #####: 3743:    if (unit_test.Passed()) {
    %%%%%: 3743-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3744:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3744-block  0
call    0 never executed
        -: 3745:    }
    #####: 3746:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3746-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3746-block  1
    %%%%%: 3746-block  2
    %%%%%: 3746-block  3
call    2 never executed
        -: 3747:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3748:  }
        -: 3749:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3750:  fflush(stdout);
    %%%%%: 3750-block  0
call    0 never executed
    #####: 3751:}
        -: 3752:
        -: 3753:// End BriefUnitTestResultPrinter
        -: 3754:
        -: 3755:// class TestEventRepeater
        -: 3756://
        -: 3757:// This class forwards events to other event listeners.
        -: 3758:class TestEventRepeater : public TestEventListener {
        -: 3759: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 1 returned 100% blocks executed 100%
        1: 3760:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3760-block  0
call    0 returned 1
call    1 returned 1
        -: 3761:  ~TestEventRepeater() override;
        -: 3762:  void Append(TestEventListener* listener);
        -: 3763:  TestEventListener* Release(TestEventListener* listener);
        -: 3764:
        -: 3765:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3766:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3767:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3767-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3768:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3769:
        -: 3770:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3771:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3772:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3773:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3774://  Legacy API is deprecated but still available
        -: 3775:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3776:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3777:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3778:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3779:  void OnTestStart(const TestInfo& test_info) override;
        -: 3780:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3781:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3782:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3783://  Legacy API is deprecated but still available
        -: 3784:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3785:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3786:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3787:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3788:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3789:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3790:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3791:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3792:
        -: 3793: private:
        -: 3794:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3795:  // in death test child processes.
        -: 3796:  bool forwarding_enabled_;
        -: 3797:  // The list of listeners that receive events.
        -: 3798:  std::vector<TestEventListener*> listeners_;
        -: 3799:
        -: 3800:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3801:};
        -: 3802:
        2: 3803:TestEventRepeater::~TestEventRepeater() {
        1: 3804:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3805:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
        1: 3803:TestEventRepeater::~TestEventRepeater() {
        -: 3804:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3805:}
        1: 3805-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        1: 3803:TestEventRepeater::~TestEventRepeater() {
call    0 returned 1
call    1 returned 1
        1: 3804:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3804-block  0
call    0 returned 1
        1: 3805:}
------------------
        -: 3806:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3807:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3808:  listeners_.push_back(listener);
        1: 3808-block  0
call    0 returned 1
        1: 3809:}
        -: 3810:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3811:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3812:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3812-block  0
        1: 3812-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3812-block  2
    #####: 3813:    if (listeners_[i] == listener) {
    %%%%%: 3813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3814:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3814-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3814-block  1
    $$$$$: 3814-block  2
    #####: 3815:      return listener;
    %%%%%: 3815-block  0
        -: 3816:    }
        -: 3817:  }
        -: 3818:
        1: 3819:  return nullptr;
        1: 3819-block  0
        -: 3820:}
        -: 3821:
        -: 3822:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3823:// This defines a member that forwards the call to all listeners.
        -: 3824:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3825:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3826:    if (forwarding_enabled_) {                          \
        -: 3827:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3828:        listeners_[i]->Name(parameter);                 \
        -: 3829:      }                                                 \
        -: 3830:    }                                                   \
        -: 3831:  }
        -: 3832:// This defines a member that forwards the call to all listeners in reverse
        -: 3833:// order.
        -: 3834:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3835:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3836:    if (forwarding_enabled_) {                          \
        -: 3837:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3838:        listeners_[i - 1]->Name(parameter);             \
        -: 3839:      }                                                 \
        -: 3840:    }                                                   \
        -: 3841:  }
        -: 3842:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3843:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3843-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3843-block  1
        2: 3843-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3843-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3844:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3844-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3844-block  1
        2: 3844-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3844-block  3
call    5 returned 1
call    6 returned 1
        -: 3845://  Legacy API is deprecated but still available
        -: 3846:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3847:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3847-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3847-block  1
        2: 3847-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3847-block  3
call    5 returned 1
call    6 returned 1
        -: 3848:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3849:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3849-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3849-block  1
        2: 3849-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3849-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 18 returned 100% blocks executed 100%
       36: 3850:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       18: 3850-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 3850-block  1
       36: 3850-block  2
call    2 returned 36
branch  3 taken 18 (fallthrough)
branch  4 taken 18
       18: 3850-block  3
call    5 returned 18
call    6 returned 18
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3851:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3851-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3851-block  1
    %%%%%: 3851-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3851-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3852:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3852-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3852-block  1
    %%%%%: 3852-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3852-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3853:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3853-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3853-block  1
        2: 3853-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3853-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3854:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3854-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3854-block  1
call    2 returned 1
        2: 3854-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3854-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3855:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3855-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3855-block  1
call    2 returned 1
        2: 3855-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3855-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 18 returned 100% blocks executed 100%
       36: 3856:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       18: 3856-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 3856-block  1
call    2 returned 18
       36: 3856-block  2
branch  3 taken 18 (fallthrough)
branch  4 taken 18
       18: 3856-block  3
call    5 returned 18
call    6 returned 18
        -: 3857://  Legacy API is deprecated but still available
        -: 3858:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3859:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3859-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3859-block  1
call    2 returned 1
        2: 3859-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3859-block  3
call    5 returned 1
call    6 returned 1
        -: 3860:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3861:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3861-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3861-block  1
call    2 returned 1
        2: 3861-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3861-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3862:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3862-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3862-block  1
call    2 returned 1
        2: 3862-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3862-block  3
call    5 returned 1
call    6 returned 1
        -: 3863:
        -: 3864:#undef GTEST_REPEATER_METHOD_
        -: 3865:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3866:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3867:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3868:                                             int iteration) {
        1: 3869:  if (forwarding_enabled_) {
        1: 3869-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3870:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3870-block  0
        2: 3870-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3871:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3871-block  0
call    0 returned 1
call    1 returned 1
        -: 3872:    }
        -: 3873:  }
        1: 3874:}
        -: 3875:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3876:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3877:                                           int iteration) {
        1: 3878:  if (forwarding_enabled_) {
        1: 3878-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3879:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3879-block  0
call    0 returned 1
        2: 3879-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3880:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3880-block  0
call    0 returned 1
call    1 returned 1
        -: 3881:    }
        -: 3882:  }
        1: 3883:}
        -: 3884:
        -: 3885:// End TestEventRepeater
        -: 3886:
        -: 3887:// This class generates an XML output file.
        -: 3888:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3889: public:
        -: 3890:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3891:
        -: 3892:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3893:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3894:
        -: 3895:  // Prints an XML summary of all unit tests.
        -: 3896:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3897:                                const std::vector<TestSuite*>& test_suites);
        -: 3898:
        -: 3899: private:
        -: 3900:  // Is c a whitespace character that is normalized to a space character
        -: 3901:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3902:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3903:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3903-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3903-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3903-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3903-block  3
    %%%%%: 3903-block  4
    %%%%%: 3903-block  5
        -: 3904:  }
        -: 3905:
        -: 3906:  // May c appear in a well-formed XML document?
        -: 3907:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3908:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3909:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3909-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3909-block  2
    %%%%%: 3909-block  3
    %%%%%: 3909-block  4
        -: 3910:  }
        -: 3911:
        -: 3912:  // Returns an XML-escaped copy of the input string str.  If
        -: 3913:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3914:  // value, and normalizable whitespace is preserved by replacing it
        -: 3915:  // with character references.
        -: 3916:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3917:
        -: 3918:  // Returns the given string with all characters invalid in XML removed.
        -: 3919:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3920:
        -: 3921:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3922:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3923:    return EscapeXml(str, true);
    %%%%%: 3923-block  0
call    0 never executed
        -: 3924:  }
        -: 3925:
        -: 3926:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3927:  static std::string EscapeXmlText(const char* str) {
        -: 3928:    return EscapeXml(str, false);
        -: 3929:  }
        -: 3930:
        -: 3931:  // Verifies that the given attribute belongs to the given element and
        -: 3932:  // streams the attribute as XML.
        -: 3933:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3934:                                 const std::string& element_name,
        -: 3935:                                 const std::string& name,
        -: 3936:                                 const std::string& value);
        -: 3937:
        -: 3938:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3939:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3940:
        -: 3941:  // Streams a test suite XML stanza containing the given test result.
        -: 3942:  //
        -: 3943:  // Requires: result.Failed()
        -: 3944:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3945:                                              const TestResult& result);
        -: 3946:
        -: 3947:  // Streams an XML representation of a TestResult object.
        -: 3948:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3949:                                  const TestResult& result);
        -: 3950:
        -: 3951:  // Streams an XML representation of a TestInfo object.
        -: 3952:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3953:                                const char* test_suite_name,
        -: 3954:                                const TestInfo& test_info);
        -: 3955:
        -: 3956:  // Prints an XML representation of a TestSuite object
        -: 3957:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3958:                                const TestSuite& test_suite);
        -: 3959:
        -: 3960:  // Prints an XML summary of unit_test to output stream out.
        -: 3961:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3962:                               const UnitTest& unit_test);
        -: 3963:
        -: 3964:  // Produces a string representing the test properties in a result as space
        -: 3965:  // delimited XML attributes based on the property key="value" pairs.
        -: 3966:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3967:  // to delimit this attribute from prior attributes.
        -: 3968:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3969:
        -: 3970:  // Streams an XML representation of the test properties of a TestResult
        -: 3971:  // object.
        -: 3972:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3973:                                      const TestResult& result);
        -: 3974:
        -: 3975:  // The output file.
        -: 3976:  const std::string output_file_;
        -: 3977:
        -: 3978:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 3979:};
        -: 3980:
        -: 3981:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3982:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3983:    : output_file_(output_file) {
    %%%%%: 3983-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3983-block  1
call    5 never executed
    $$$$$: 3983-block  2
call    6 never executed
    $$$$$: 3983-block  3
    $$$$$: 3983-block  4
call    7 never executed
    $$$$$: 3983-block  5
call    8 never executed
    #####: 3984:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3985:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3985-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3985-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3985-block  2
call    7 never executed
    $$$$$: 3985-block  3
call    8 never executed
    $$$$$: 3985-block  4
        -: 3986:  }
    #####: 3987:}
    %%%%%: 3987-block  0
        -: 3988:
        -: 3989:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3990:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3991:                                                  int /*iteration*/) {
    #####: 3992:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3992-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3993:  std::stringstream stream;
    %%%%%: 3993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3993-block  1
call    3 never executed
    $$$$$: 3993-block  2
call    4 never executed
    #####: 3994:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3994-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3995:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3995-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3995-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3995-block  2
call    7 never executed
    $$$$$: 3995-block  3
call    8 never executed
    $$$$$: 3995-block  4
    #####: 3996:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3997:}
        -: 3998:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 3999:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4000:    const std::vector<TestSuite*>& test_suites) {
    #####: 4001:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4001-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4002:  std::stringstream stream;
    %%%%%: 4002-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4002-block  1
call    3 never executed
    $$$$$: 4002-block  2
call    4 never executed
    #####: 4003:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4004:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4004-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4004-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4004-block  2
call    7 never executed
    $$$$$: 4004-block  3
call    8 never executed
    $$$$$: 4004-block  4
    #####: 4005:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4006:}
        -: 4007:
        -: 4008:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4009:// is true, the text is meant to appear as an attribute value, and
        -: 4010:// normalizable whitespace is preserved by replacing it with character
        -: 4011:// references.
        -: 4012://
        -: 4013:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4014:// It is expected that most, if not all, of the text processed by this
        -: 4015:// module will consist of ordinary English text.
        -: 4016:// If this module is ever modified to produce version 1.1 XML output,
        -: 4017:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4018:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4019:                                                bool is_attribute) {
    #####: 4020:  Message m;
    %%%%%: 4020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4020-block  1
call    3 never executed
    $$$$$: 4020-block  2
call    4 never executed
        -: 4021:
    #####: 4022:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4022-block  0
    %%%%%: 4022-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4022-block  2
    #####: 4023:    const char ch = str[i];
    %%%%%: 4023-block  0
call    0 never executed
    #####: 4024:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4025:      case '<':
    #####: 4026:        m << "&lt;";
    %%%%%: 4026-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4027:        break;
    %%%%%: 4027-block  0
    #####: 4028:      case '>':
    #####: 4029:        m << "&gt;";
    %%%%%: 4029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4030:        break;
    %%%%%: 4030-block  0
    #####: 4031:      case '&':
    #####: 4032:        m << "&amp;";
    %%%%%: 4032-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4033:        break;
    %%%%%: 4033-block  0
    #####: 4034:      case '\'':
    #####: 4035:        if (is_attribute)
    %%%%%: 4035-block  0
branch  0 never executed
branch  1 never executed
    #####: 4036:          m << "&apos;";
    %%%%%: 4036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4037:        else
    #####: 4038:          m << '\'';
    %%%%%: 4038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4038-block  1
    $$$$$: 4038-block  2
    #####: 4039:        break;
    %%%%%: 4039-block  0
    #####: 4040:      case '"':
    #####: 4041:        if (is_attribute)
    %%%%%: 4041-block  0
branch  0 never executed
branch  1 never executed
    #####: 4042:          m << "&quot;";
    %%%%%: 4042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4043:        else
    #####: 4044:          m << '"';
    %%%%%: 4044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4044-block  1
    $$$$$: 4044-block  2
    #####: 4045:        break;
    %%%%%: 4045-block  0
    #####: 4046:      default:
    #####: 4047:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4047-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4048:          if (is_attribute &&
    %%%%%: 4048-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4048-block  1
    %%%%%: 4048-block  2
    %%%%%: 4048-block  3
branch  4 never executed
branch  5 never executed
    #####: 4049:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4049-block  0
call    0 never executed
    #####: 4050:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4050-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4050-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4050-block  3
call    9 never executed
    $$$$$: 4050-block  4
call   10 never executed
    $$$$$: 4050-block  5
    #####: 4051:              << ";";
    %%%%%: 4051-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4052:          else
    #####: 4053:            m << ch;
    %%%%%: 4053-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4054:        }
    #####: 4055:        break;
    %%%%%: 4055-block  0
        -: 4056:    }
        -: 4057:  }
        -: 4058:
    #####: 4059:  return m.GetString();
    %%%%%: 4059-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4059-block  1
        -: 4060:}
        -: 4061:
        -: 4062:// Returns the given string with all characters invalid in XML removed.
        -: 4063:// Currently invalid characters are dropped from the string. An
        -: 4064:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4065:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4066:    const std::string& str) {
    #####: 4067:  std::string output;
    %%%%%: 4067-block  0
call    0 never executed
    #####: 4068:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4069:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4069-block  0
call    0 never executed
    %%%%%: 4069-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4069-block  2
call    5 never executed
    #####: 4070:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4070-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4071:      output.push_back(*it);
    %%%%%: 4071-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4072:
    #####: 4073:  return output;
    %%%%%: 4073-block  0
    %%%%%: 4073-block  1
        -: 4074:}
        -: 4075:
        -: 4076:// The following routines generate an XML representation of a UnitTest
        -: 4077:// object.
        -: 4078://
        -: 4079:// This is how Google Test concepts map to the DTD:
        -: 4080://
        -: 4081:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4082://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4083://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4084://       <failure message="...">...</failure>
        -: 4085://       <failure message="...">...</failure>
        -: 4086://       <failure message="...">...</failure>
        -: 4087://                                     <-- individual assertion failures
        -: 4088://     </testcase>
        -: 4089://   </testsuite>
        -: 4090:// </testsuites>
        -: 4091:
        -: 4092:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4093:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4094:  ::std::stringstream ss;
    %%%%%: 4094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4094-block  1
call    3 never executed
    $$$$$: 4094-block  2
call    4 never executed
    #####: 4095:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4096:  return ss.str();
    %%%%%: 4096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4096-block  1
        -: 4097:}
        -: 4098:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4099:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4100:#if defined(_MSC_VER)
        -: 4101:  return localtime_s(out, &seconds) == 0;
        -: 4102:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4103:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4104:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4105:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4106:  if (tm_ptr == nullptr) return false;
        -: 4107:  *out = *tm_ptr;
        -: 4108:  return true;
        -: 4109:#elif defined(__STDC_LIB_EXT1__)
        -: 4110:  // Uses localtime_s when available as localtime_r is only available from
        -: 4111:  // C23 standard.
        -: 4112:  return localtime_s(&seconds, out) != nullptr;
        -: 4113:#else
    #####: 4114:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4114-block  0
call    0 never executed
        -: 4115:#endif
        -: 4116:}
        -: 4117:
        -: 4118:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4119:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4120:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4121:  struct tm time_struct;
    #####: 4122:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4122-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4123:    return "";
    %%%%%: 4123-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4123-block  1
call    4 never executed
    $$$$$: 4123-block  2
call    5 never executed
    $$$$$: 4123-block  3
        -: 4124:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4125:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4125-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4125-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4125-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4125-block  3
call   11 never executed
    $$$$$: 4125-block  4
    $$$$$: 4125-block  5
call   12 never executed
    $$$$$: 4125-block  6
    $$$$$: 4125-block  7
call   13 never executed
    $$$$$: 4125-block  8
    $$$$$: 4125-block  9
    #####: 4126:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4126-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4126-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4126-block  3
call   12 never executed
    $$$$$: 4126-block  4
    $$$$$: 4126-block  5
call   13 never executed
    $$$$$: 4126-block  6
    $$$$$: 4126-block  7
call   14 never executed
    $$$$$: 4126-block  8
    #####: 4127:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4127-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4127-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4127-block  3
call   12 never executed
    $$$$$: 4127-block  4
    $$$$$: 4127-block  5
call   13 never executed
    $$$$$: 4127-block  6
    $$$$$: 4127-block  7
call   14 never executed
    $$$$$: 4127-block  8
    #####: 4128:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4128-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4128-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4128-block  3
call   12 never executed
    $$$$$: 4128-block  4
    $$$$$: 4128-block  5
call   13 never executed
    $$$$$: 4128-block  6
    $$$$$: 4128-block  7
call   14 never executed
    $$$$$: 4128-block  8
    #####: 4129:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4129-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4129-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4129-block  3
call   12 never executed
    $$$$$: 4129-block  4
    $$$$$: 4129-block  5
call   13 never executed
    $$$$$: 4129-block  6
    $$$$$: 4129-block  7
call   14 never executed
    $$$$$: 4129-block  8
    #####: 4130:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4130-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4130-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4130-block  3
call    9 never executed
    $$$$$: 4130-block  4
    $$$$$: 4130-block  5
call   10 never executed
    $$$$$: 4130-block  6
    #####: 4131:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4131-block  2
call    7 never executed
    $$$$$: 4131-block  3
        -: 4132:}
        -: 4133:
        -: 4134:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4135:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4136:                                                     const char* data) {
    #####: 4137:  const char* segment = data;
    #####: 4138:  *stream << "<![CDATA[";
    %%%%%: 4138-block  0
call    0 never executed
        -: 4139:  for (;;) {
    #####: 4140:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4141:    if (next_segment != nullptr) {
    %%%%%: 4141-block  0
branch  0 never executed
branch  1 never executed
        -: 4142:      stream->write(segment,
    #####: 4143:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4143-block  0
call    0 never executed
    #####: 4144:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4145:      segment = next_segment + strlen("]]>");
        -: 4146:    } else {
    #####: 4147:      *stream << segment;
    %%%%%: 4147-block  0
call    0 never executed
    #####: 4148:      break;
        -: 4149:    }
    #####: 4150:  }
    %%%%%: 4150-block  0
    #####: 4151:  *stream << "]]>";
    %%%%%: 4151-block  0
call    0 never executed
    #####: 4152:}
        -: 4153:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4154:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4155:    std::ostream* stream, const std::string& element_name,
        -: 4156:    const std::string& name, const std::string& value) {
        -: 4157:  const std::vector<std::string>& allowed_names =
    #####: 4158:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4158-block  1
call    3 never executed
        -: 4159:
    #####: 4160:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4160-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4160-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4160-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4160-block  3
call   13 never executed
    %%%%%: 4160-block  4
call   14 never executed
    $$$$$: 4160-block  5
    $$$$$: 4160-block  6
call   15 never executed
    $$$$$: 4160-block  7
        -: 4161:               allowed_names.end())
        -: 4162:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4163:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4163-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4163-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4163-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4163-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4163-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4164:
    #####: 4165:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4165-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4165-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4165-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4165-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4165-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4165-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4165-block  7
call   20 never executed
    $$$$$: 4165-block  8
    #####: 4166:}
        -: 4167:
        -: 4168:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4169:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4170:    ::std::ostream* stream, const TestResult& result) {
        -: 4171:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4172:  *stream << "  <testsuite";
    %%%%%: 4172-block  0
call    0 never executed
    #####: 4173:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4173-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4173-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4173-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4173-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4173-block  4
call   21 never executed
    $$$$$: 4173-block  5
    $$$$$: 4173-block  6
call   22 never executed
    $$$$$: 4173-block  7
    $$$$$: 4173-block  8
call   23 never executed
    $$$$$: 4173-block  9
    $$$$$: 4173-block 10
call   24 never executed
    $$$$$: 4173-block 11
    $$$$$: 4173-block 12
call   25 never executed
    $$$$$: 4173-block 13
    $$$$$: 4173-block 14
call   26 never executed
    $$$$$: 4173-block 15
call   27 never executed
    #####: 4174:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4174-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4174-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4174-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4174-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4174-block  4
call   21 never executed
    $$$$$: 4174-block  5
    $$$$$: 4174-block  6
call   22 never executed
    $$$$$: 4174-block  7
    $$$$$: 4174-block  8
call   23 never executed
    $$$$$: 4174-block  9
    $$$$$: 4174-block 10
call   24 never executed
    $$$$$: 4174-block 11
    $$$$$: 4174-block 12
call   25 never executed
    $$$$$: 4174-block 13
    $$$$$: 4174-block 14
call   26 never executed
    $$$$$: 4174-block 15
call   27 never executed
    #####: 4175:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4175-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4175-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4175-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4175-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4175-block  4
call   21 never executed
    $$$$$: 4175-block  5
    $$$$$: 4175-block  6
call   22 never executed
    $$$$$: 4175-block  7
    $$$$$: 4175-block  8
call   23 never executed
    $$$$$: 4175-block  9
    $$$$$: 4175-block 10
call   24 never executed
    $$$$$: 4175-block 11
    $$$$$: 4175-block 12
call   25 never executed
    $$$$$: 4175-block 13
    $$$$$: 4175-block 14
call   26 never executed
    $$$$$: 4175-block 15
call   27 never executed
    #####: 4176:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4176-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4176-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4176-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4176-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4176-block  4
call   21 never executed
    $$$$$: 4176-block  5
    $$$$$: 4176-block  6
call   22 never executed
    $$$$$: 4176-block  7
    $$$$$: 4176-block  8
call   23 never executed
    $$$$$: 4176-block  9
    $$$$$: 4176-block 10
call   24 never executed
    $$$$$: 4176-block 11
    $$$$$: 4176-block 12
call   25 never executed
    $$$$$: 4176-block 13
    $$$$$: 4176-block 14
call   26 never executed
    $$$$$: 4176-block 15
call   27 never executed
    #####: 4177:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4177-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4177-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4177-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4177-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4177-block  4
call   21 never executed
    $$$$$: 4177-block  5
    $$$$$: 4177-block  6
call   22 never executed
    $$$$$: 4177-block  7
    $$$$$: 4177-block  8
call   23 never executed
    $$$$$: 4177-block  9
    $$$$$: 4177-block 10
call   24 never executed
    $$$$$: 4177-block 11
    $$$$$: 4177-block 12
call   25 never executed
    $$$$$: 4177-block 13
    $$$$$: 4177-block 14
call   26 never executed
    $$$$$: 4177-block 15
call   27 never executed
    #####: 4178:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4178-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4178-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4178-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4178-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4178-block  4
call   21 never executed
    $$$$$: 4178-block  5
    $$$$$: 4178-block  6
call   22 never executed
    $$$$$: 4178-block  7
    $$$$$: 4178-block  8
call   23 never executed
    $$$$$: 4178-block  9
    $$$$$: 4178-block 10
call   24 never executed
    $$$$$: 4178-block 11
    $$$$$: 4178-block 12
call   25 never executed
    $$$$$: 4178-block 13
    $$$$$: 4178-block 14
call   26 never executed
    $$$$$: 4178-block 15
call   27 never executed
    #####: 4179:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4179-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4179-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4179-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4179-block  3
call   15 never executed
    $$$$$: 4179-block  4
    $$$$$: 4179-block  5
call   16 never executed
    $$$$$: 4179-block  6
    $$$$$: 4179-block  7
call   17 never executed
    $$$$$: 4179-block  8
    $$$$$: 4179-block  9
call   18 never executed
    $$$$$: 4179-block 10
    #####: 4180:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4180-block  0
call    3 never executed
    $$$$$: 4180-block  1
call    4 never executed
    #####: 4181:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4181-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4181-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4181-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4181-block  3
call   15 never executed
    $$$$$: 4181-block  4
    $$$$$: 4181-block  5
call   16 never executed
    $$$$$: 4181-block  6
    $$$$$: 4181-block  7
call   17 never executed
    $$$$$: 4181-block  8
    $$$$$: 4181-block  9
call   18 never executed
    $$$$$: 4181-block 10
        -: 4182:      stream, "testsuite", "timestamp",
    #####: 4183:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4183-block  0
call    3 never executed
    $$$$$: 4183-block  1
call    4 never executed
    #####: 4184:  *stream << ">";
call    0 never executed
        -: 4185:
        -: 4186:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4187:  *stream << "    <testcase";
call    0 never executed
    #####: 4188:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4188-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4188-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4188-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4188-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4188-block  4
call   21 never executed
    $$$$$: 4188-block  5
    $$$$$: 4188-block  6
call   22 never executed
    $$$$$: 4188-block  7
    $$$$$: 4188-block  8
call   23 never executed
    $$$$$: 4188-block  9
    $$$$$: 4188-block 10
call   24 never executed
    $$$$$: 4188-block 11
    $$$$$: 4188-block 12
call   25 never executed
    $$$$$: 4188-block 13
    $$$$$: 4188-block 14
call   26 never executed
    $$$$$: 4188-block 15
call   27 never executed
    #####: 4189:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4189-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4189-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4189-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4189-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4189-block  4
call   21 never executed
    $$$$$: 4189-block  5
    $$$$$: 4189-block  6
call   22 never executed
    $$$$$: 4189-block  7
    $$$$$: 4189-block  8
call   23 never executed
    $$$$$: 4189-block  9
    $$$$$: 4189-block 10
call   24 never executed
    $$$$$: 4189-block 11
    $$$$$: 4189-block 12
call   25 never executed
    $$$$$: 4189-block 13
    $$$$$: 4189-block 14
call   26 never executed
    $$$$$: 4189-block 15
call   27 never executed
    #####: 4190:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4190-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4190-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4190-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4190-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4190-block  4
call   21 never executed
    $$$$$: 4190-block  5
    $$$$$: 4190-block  6
call   22 never executed
    $$$$$: 4190-block  7
    $$$$$: 4190-block  8
call   23 never executed
    $$$$$: 4190-block  9
    $$$$$: 4190-block 10
call   24 never executed
    $$$$$: 4190-block 11
    $$$$$: 4190-block 12
call   25 never executed
    $$$$$: 4190-block 13
    $$$$$: 4190-block 14
call   26 never executed
    $$$$$: 4190-block 15
call   27 never executed
    #####: 4191:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4191-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4191-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4191-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4191-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4191-block  4
call   21 never executed
    $$$$$: 4191-block  5
    $$$$$: 4191-block  6
call   22 never executed
    $$$$$: 4191-block  7
    $$$$$: 4191-block  8
call   23 never executed
    $$$$$: 4191-block  9
    $$$$$: 4191-block 10
call   24 never executed
    $$$$$: 4191-block 11
    $$$$$: 4191-block 12
call   25 never executed
    $$$$$: 4191-block 13
    $$$$$: 4191-block 14
call   26 never executed
    $$$$$: 4191-block 15
call   27 never executed
    #####: 4192:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4192-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4192-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4192-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4192-block  3
call   15 never executed
    $$$$$: 4192-block  4
    $$$$$: 4192-block  5
call   16 never executed
    $$$$$: 4192-block  6
    $$$$$: 4192-block  7
call   17 never executed
    $$$$$: 4192-block  8
    $$$$$: 4192-block  9
call   18 never executed
    $$$$$: 4192-block 10
    #####: 4193:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4193-block  0
call    3 never executed
    $$$$$: 4193-block  1
call    4 never executed
    #####: 4194:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4194-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4194-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4194-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4194-block  3
call   15 never executed
    $$$$$: 4194-block  4
    $$$$$: 4194-block  5
call   16 never executed
    $$$$$: 4194-block  6
    $$$$$: 4194-block  7
call   17 never executed
    $$$$$: 4194-block  8
    $$$$$: 4194-block  9
call   18 never executed
    $$$$$: 4194-block 10
        -: 4195:      stream, "testcase", "timestamp",
    #####: 4196:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4196-block  0
call    3 never executed
        -: 4197:
        -: 4198:  // Output the actual test result.
    #####: 4199:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4200:
        -: 4201:  // Complete the test suite.
    #####: 4202:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4203:}
        -: 4204:
        -: 4205:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4206:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4207:                                                 const char* test_suite_name,
        -: 4208:                                                 const TestInfo& test_info) {
    #####: 4209:  const TestResult& result = *test_info.result();
    %%%%%: 4209-block  0
call    0 never executed
    #####: 4210:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4210-block  0
    $$$$$: 4210-block  1
call    4 never executed
        -: 4211:
    #####: 4212:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4213:    return;
    %%%%%: 4213-block  0
        -: 4214:  }
        -: 4215:
    #####: 4216:  *stream << "    <testcase";
    %%%%%: 4216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4217:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4217-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4217-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4217-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4217-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4217-block  4
call   16 never executed
    $$$$$: 4217-block  5
    $$$$$: 4217-block  6
call   17 never executed
    $$$$$: 4217-block  7
    $$$$$: 4217-block  8
call   18 never executed
    $$$$$: 4217-block  9
    $$$$$: 4217-block 10
call   19 never executed
    $$$$$: 4217-block 11
        -: 4218:
    #####: 4219:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4220:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4220-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4220-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4220-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4220-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4220-block  4
call   16 never executed
    $$$$$: 4220-block  5
    $$$$$: 4220-block  6
call   17 never executed
    $$$$$: 4220-block  7
    $$$$$: 4220-block  8
call   18 never executed
    $$$$$: 4220-block  9
    $$$$$: 4220-block 10
call   19 never executed
    $$$$$: 4220-block 11
        -: 4221:                       test_info.value_param());
        -: 4222:  }
    #####: 4223:  if (test_info.type_param() != nullptr) {
    %%%%%: 4223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4224:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4224-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4224-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4224-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4224-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4224-block  4
call   16 never executed
    $$$$$: 4224-block  5
    $$$$$: 4224-block  6
call   17 never executed
    $$$$$: 4224-block  7
    $$$$$: 4224-block  8
call   18 never executed
    $$$$$: 4224-block  9
    $$$$$: 4224-block 10
call   19 never executed
    $$$$$: 4224-block 11
        -: 4225:                       test_info.type_param());
        -: 4226:  }
        -: 4227:
    #####: 4228:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4228-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4228-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4228-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4228-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4228-block  4
call   16 never executed
    $$$$$: 4228-block  5
    $$$$$: 4228-block  6
call   17 never executed
    $$$$$: 4228-block  7
    $$$$$: 4228-block  8
call   18 never executed
    $$$$$: 4228-block  9
    $$$$$: 4228-block 10
call   19 never executed
    $$$$$: 4228-block 11
    #####: 4229:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4229-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4229-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4229-block  3
call    9 never executed
    $$$$$: 4229-block  4
    $$$$$: 4229-block  5
call   10 never executed
    $$$$$: 4229-block  6
    #####: 4230:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4230-block  0
call    5 never executed
    $$$$$: 4230-block  1
    $$$$$: 4230-block  2
    #####: 4231:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4232:    *stream << " />\n";
    %%%%%: 4232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4233:    return;
    %%%%%: 4233-block  0
        -: 4234:  }
        -: 4235:
    #####: 4236:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4236-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4236-block  1
    %%%%%: 4236-block  2
    %%%%%: 4236-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4236-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4236-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4236-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4236-block  7
call   17 never executed
    $$$$$: 4236-block  8
    $$$$$: 4236-block  9
call   18 never executed
    $$$$$: 4236-block 10
    $$$$$: 4236-block 11
call   19 never executed
    $$$$$: 4236-block 12
    $$$$$: 4236-block 13
call   20 never executed
    $$$$$: 4236-block 14
    #####: 4237:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4238:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4238-block  0
    %%%%%: 4238-block  1
    %%%%%: 4238-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4238-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4238-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4238-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4238-block  6
call   17 never executed
    $$$$$: 4238-block  7
    $$$$$: 4238-block  8
call   18 never executed
    $$$$$: 4238-block  9
    $$$$$: 4238-block 10
call   19 never executed
    $$$$$: 4238-block 11
    $$$$$: 4238-block 12
call   20 never executed
    $$$$$: 4238-block 13
    #####: 4239:                     test_info.should_run()
call    0 never executed
    #####: 4240:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4240-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4240-block  2
    %%%%%: 4240-block  3
        -: 4241:                         : "suppressed");
    #####: 4242:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4242-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4242-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4242-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4242-block  3
call    9 never executed
    $$$$$: 4242-block  4
    $$$$$: 4242-block  5
call   10 never executed
    $$$$$: 4242-block  6
    #####: 4243:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4243-block  0
call    5 never executed
    $$$$$: 4243-block  1
    #####: 4244:  OutputXmlAttribute(
    %%%%%: 4244-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4244-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4244-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4244-block  3
call    9 never executed
    $$$$$: 4244-block  4
    $$$$$: 4244-block  5
call   10 never executed
    $$$$$: 4244-block  6
        -: 4245:      stream, kTestsuite, "timestamp",
    #####: 4246:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4246-block  0
call    5 never executed
    $$$$$: 4246-block  1
    #####: 4247:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4247-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4247-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4247-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4247-block  3
call   15 never executed
    $$$$$: 4247-block  4
    $$$$$: 4247-block  5
call   16 never executed
    $$$$$: 4247-block  6
    $$$$$: 4247-block  7
call   17 never executed
    $$$$$: 4247-block  8
    $$$$$: 4247-block  9
call   18 never executed
    $$$$$: 4247-block 10
        -: 4248:
    #####: 4249:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4250:}
        -: 4251:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4252:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4253:                                                   const TestResult& result) {
    #####: 4254:  int failures = 0;
    #####: 4255:  int skips = 0;
    #####: 4256:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4256-block  0
    %%%%%: 4256-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4256-block  2
    #####: 4257:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4257-block  0
call    0 never executed
    #####: 4258:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4259:      if (++failures == 1 && skips == 0) {
    %%%%%: 4259-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4259-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4259-block  2
    %%%%%: 4259-block  3
    %%%%%: 4259-block  4
branch  4 never executed
branch  5 never executed
    #####: 4260:        *stream << ">\n";
    %%%%%: 4260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4261:      }
        -: 4262:      const std::string location =
        -: 4263:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4264:                                                          part.line_number());
    %%%%%: 4264-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4264-block  1
call    6 never executed
    #####: 4265:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4265-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4265-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4265-block  2
    $$$$$: 4265-block  3
call    8 never executed
    #####: 4266:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4266-block  0
call    0 never executed
    $$$$$: 4266-block  1
call    1 never executed
    $$$$$: 4266-block  2
    #####: 4267:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4267-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4267-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4267-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4268:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4268-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4268-block  1
call    7 never executed
    $$$$$: 4268-block  2
    $$$$$: 4268-block  3
call    8 never executed
    #####: 4269:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4269-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4269-block  1
call    7 never executed
    $$$$$: 4269-block  2
call    8 never executed
    $$$$$: 4269-block  3
    #####: 4270:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4271:    } else if (part.skipped()) {
    %%%%%: 4271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4272:      if (++skips == 1 && failures == 0) {
    %%%%%: 4272-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4272-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4272-block  2
    %%%%%: 4272-block  3
    %%%%%: 4272-block  4
branch  4 never executed
branch  5 never executed
    #####: 4273:        *stream << ">\n";
    %%%%%: 4273-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4274:      }
        -: 4275:      const std::string location =
        -: 4276:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4277:                                                          part.line_number());
    %%%%%: 4277-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4277-block  1
call    6 never executed
    #####: 4278:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4278-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4278-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4278-block  2
    $$$$$: 4278-block  3
call    8 never executed
        -: 4279:      *stream << "      <skipped message=\""
    #####: 4280:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4280-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4280-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4280-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4280-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4280-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4280-block  5
call   20 never executed
    $$$$$: 4280-block  6
    $$$$$: 4280-block  7
call   21 never executed
    $$$$$: 4280-block  8
    $$$$$: 4280-block  9
call   22 never executed
    $$$$$: 4280-block 10
    #####: 4281:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4281-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4281-block  1
call    7 never executed
    $$$$$: 4281-block  2
    $$$$$: 4281-block  3
call    8 never executed
    #####: 4282:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4282-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4282-block  1
call    7 never executed
    $$$$$: 4282-block  2
call    8 never executed
    $$$$$: 4282-block  3
    #####: 4283:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4284:    }
        -: 4285:  }
        -: 4286:
    #####: 4287:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4287-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4287-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4287-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4287-block  3
    %%%%%: 4287-block  4
    %%%%%: 4287-block  5
branch  7 never executed
branch  8 never executed
    #####: 4288:    *stream << " />\n";
    %%%%%: 4288-block  0
call    0 never executed
        -: 4289:  } else {
    #####: 4290:    if (failures == 0 && skips == 0) {
    %%%%%: 4290-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4290-block  1
branch  2 never executed
branch  3 never executed
    #####: 4291:      *stream << ">\n";
    %%%%%: 4291-block  0
call    0 never executed
        -: 4292:    }
    #####: 4293:    OutputXmlTestProperties(stream, result);
    %%%%%: 4293-block  0
call    0 never executed
    #####: 4294:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4295:  }
    #####: 4296:}
    %%%%%: 4296-block  0
        -: 4297:
        -: 4298:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4299:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4300:                                                 const TestSuite& test_suite) {
    #####: 4301:  const std::string kTestsuite = "testsuite";
    %%%%%: 4301-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4301-block  1
call    4 never executed
    $$$$$: 4301-block  2
    $$$$$: 4301-block  3
call    5 never executed
    #####: 4302:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4302-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4303:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4303-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4303-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4303-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4303-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4303-block  4
call   16 never executed
    $$$$$: 4303-block  5
    $$$$$: 4303-block  6
call   17 never executed
    $$$$$: 4303-block  7
    $$$$$: 4303-block  8
call   18 never executed
    $$$$$: 4303-block  9
    $$$$$: 4303-block 10
call   19 never executed
    $$$$$: 4303-block 11
    #####: 4304:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4304-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4304-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4304-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4304-block  3
call    9 never executed
    $$$$$: 4304-block  4
    $$$$$: 4304-block  5
call   10 never executed
    $$$$$: 4304-block  6
    #####: 4305:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4305-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4305-block  1
call    7 never executed
    $$$$$: 4305-block  2
    $$$$$: 4305-block  3
    #####: 4306:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4307:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4307-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4307-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4307-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4307-block  3
call    9 never executed
    $$$$$: 4307-block  4
    $$$$$: 4307-block  5
call   10 never executed
    $$$$$: 4307-block  6
    #####: 4308:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4308-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4308-block  2
call    7 never executed
    $$$$$: 4308-block  3
    $$$$$: 4308-block  4
    #####: 4309:    OutputXmlAttribute(
    %%%%%: 4309-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4309-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4309-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4309-block  3
call    9 never executed
    $$$$$: 4309-block  4
    $$$$$: 4309-block  5
call   10 never executed
    $$$$$: 4309-block  6
        -: 4310:        stream, kTestsuite, "disabled",
    #####: 4311:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4311-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4311-block  1
call    7 never executed
    $$$$$: 4311-block  2
    $$$$$: 4311-block  3
    #####: 4312:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4312-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4312-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4312-block  3
call    9 never executed
    $$$$$: 4312-block  4
    $$$$$: 4312-block  5
call   10 never executed
    $$$$$: 4312-block  6
    #####: 4313:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4313-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4313-block  1
call    7 never executed
    $$$$$: 4313-block  2
    $$$$$: 4313-block  3
        -: 4314:
    #####: 4315:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4315-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4315-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4315-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4315-block  3
call   15 never executed
    $$$$$: 4315-block  4
    $$$$$: 4315-block  5
call   16 never executed
    $$$$$: 4315-block  6
    $$$$$: 4315-block  7
call   17 never executed
    $$$$$: 4315-block  8
    $$$$$: 4315-block  9
call   18 never executed
    $$$$$: 4315-block 10
        -: 4316:
    #####: 4317:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4317-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4317-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4317-block  3
call    9 never executed
    $$$$$: 4317-block  4
    $$$$$: 4317-block  5
call   10 never executed
    $$$$$: 4317-block  6
    #####: 4318:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4318-block  0
call    5 never executed
    $$$$$: 4318-block  1
    #####: 4319:    OutputXmlAttribute(
    %%%%%: 4319-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4319-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4319-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4319-block  3
call    9 never executed
    $$$$$: 4319-block  4
    $$$$$: 4319-block  5
call   10 never executed
    $$$$$: 4319-block  6
        -: 4320:        stream, kTestsuite, "timestamp",
    #####: 4321:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4321-block  0
call    5 never executed
    $$$$$: 4321-block  1
    #####: 4322:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4322-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4322-block  1
call    7 never executed
    $$$$$: 4322-block  2
call    8 never executed
    $$$$$: 4322-block  3
        -: 4323:  }
    #####: 4324:  *stream << ">\n";
    %%%%%: 4324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4325:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4325-block  0
    %%%%%: 4325-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4325-block  2
    #####: 4326:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4326-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4327:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4327-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4328:  }
    #####: 4329:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4329-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4329-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4330:}
        -: 4331:
        -: 4332:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4333:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4334:                                                const UnitTest& unit_test) {
    #####: 4335:  const std::string kTestsuites = "testsuites";
    %%%%%: 4335-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4335-block  1
call    4 never executed
    $$$$$: 4335-block  2
    $$$$$: 4335-block  3
call    5 never executed
        -: 4336:
    #####: 4337:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4338:  *stream << "<" << kTestsuites;
    %%%%%: 4338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4339:
    #####: 4340:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4340-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4340-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4340-block  3
call    9 never executed
    $$$$$: 4340-block  4
    $$$$$: 4340-block  5
call   10 never executed
    $$$$$: 4340-block  6
    #####: 4341:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4341-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4341-block  2
call    7 never executed
    $$$$$: 4341-block  3
    $$$$$: 4341-block  4
    #####: 4342:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4342-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4342-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4342-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4342-block  3
call    9 never executed
    $$$$$: 4342-block  4
    $$$$$: 4342-block  5
call   10 never executed
    $$$$$: 4342-block  6
    #####: 4343:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4343-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4343-block  1
call    7 never executed
    $$$$$: 4343-block  2
    $$$$$: 4343-block  3
    #####: 4344:  OutputXmlAttribute(
    %%%%%: 4344-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4344-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4344-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4344-block  3
call    9 never executed
    $$$$$: 4344-block  4
    $$$$$: 4344-block  5
call   10 never executed
    $$$$$: 4344-block  6
        -: 4345:      stream, kTestsuites, "disabled",
    #####: 4346:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4346-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4346-block  1
call    7 never executed
    $$$$$: 4346-block  2
    $$$$$: 4346-block  3
    #####: 4347:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4347-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4347-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4347-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4347-block  3
call   15 never executed
    $$$$$: 4347-block  4
    $$$$$: 4347-block  5
call   16 never executed
    $$$$$: 4347-block  6
    $$$$$: 4347-block  7
call   17 never executed
    $$$$$: 4347-block  8
    $$$$$: 4347-block  9
call   18 never executed
    $$$$$: 4347-block 10
    #####: 4348:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4348-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4348-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4348-block  3
call    9 never executed
    $$$$$: 4348-block  4
    $$$$$: 4348-block  5
call   10 never executed
    $$$$$: 4348-block  6
    #####: 4349:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4349-block  0
call    5 never executed
    $$$$$: 4349-block  1
    #####: 4350:  OutputXmlAttribute(
    %%%%%: 4350-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4350-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4350-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4350-block  3
call    9 never executed
    $$$$$: 4350-block  4
    $$$$$: 4350-block  5
call   10 never executed
    $$$$$: 4350-block  6
        -: 4351:      stream, kTestsuites, "timestamp",
    #####: 4352:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4352-block  0
call    5 never executed
    $$$$$: 4352-block  1
        -: 4353:
    #####: 4354:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4355:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4355-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4355-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4355-block  3
call    9 never executed
    $$$$$: 4355-block  4
    $$$$$: 4355-block  5
call   10 never executed
    $$$$$: 4355-block  6
    #####: 4356:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4356-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4356-block  1
call    5 never executed
    $$$$$: 4356-block  2
    $$$$$: 4356-block  3
        -: 4357:  }
    #####: 4358:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4358-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4358-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4358-block  2
call    7 never executed
    $$$$$: 4358-block  3
call    8 never executed
    $$$$$: 4358-block  4
        -: 4359:
    #####: 4360:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4360-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4360-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4360-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4360-block  3
call   15 never executed
    $$$$$: 4360-block  4
    $$$$$: 4360-block  5
call   16 never executed
    $$$$$: 4360-block  6
    $$$$$: 4360-block  7
call   17 never executed
    $$$$$: 4360-block  8
    $$$$$: 4360-block  9
call   18 never executed
    $$$$$: 4360-block 10
    #####: 4361:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4362:
    #####: 4363:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4363-block  0
    %%%%%: 4363-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4363-block  2
    #####: 4364:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4364-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4364-block  2
branch  6 never executed
branch  7 never executed
    #####: 4365:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4366:  }
        -: 4367:
        -: 4368:  // If there was a test failure outside of one of the test suites (like in a
        -: 4369:  // test environment) include that in the output.
    #####: 4370:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4370-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4370-block  1
branch  4 never executed
branch  5 never executed
    #####: 4371:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4371-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4372:  }
        -: 4373:
    #####: 4374:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4374-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4374-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4374-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4375:}
        -: 4376:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4377:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4378:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4379:  const std::string kTestsuites = "testsuites";
    %%%%%: 4379-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4379-block  1
call    4 never executed
    $$$$$: 4379-block  2
    $$$$$: 4379-block  3
call    5 never executed
        -: 4380:
    #####: 4381:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4382:  *stream << "<" << kTestsuites;
    %%%%%: 4382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4383:
    #####: 4384:  int total_tests = 0;
    #####: 4385:  for (auto test_suite : test_suites) {
    %%%%%: 4385-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4385-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4385-block  2
call    5 never executed
    #####: 4386:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4387:  }
    #####: 4388:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4388-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4388-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4388-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4388-block  3
call    9 never executed
    $$$$$: 4388-block  4
    $$$$$: 4388-block  5
call   10 never executed
    $$$$$: 4388-block  6
    #####: 4389:                     StreamableToString(total_tests));
    %%%%%: 4389-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4389-block  1
call    4 never executed
    $$$$$: 4389-block  2
    #####: 4390:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4390-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4390-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4390-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4390-block  3
call   15 never executed
    $$$$$: 4390-block  4
    $$$$$: 4390-block  5
call   16 never executed
    $$$$$: 4390-block  6
    $$$$$: 4390-block  7
call   17 never executed
    $$$$$: 4390-block  8
    $$$$$: 4390-block  9
call   18 never executed
    $$$$$: 4390-block 10
    #####: 4391:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4392:
    #####: 4393:  for (auto test_suite : test_suites) {
    %%%%%: 4393-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4393-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4393-block  2
call    5 never executed
    %%%%%: 4393-block  3
call    6 never executed
    #####: 4394:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4395:  }
    #####: 4396:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4396-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4396-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4396-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4397:}
        -: 4398:
        -: 4399:// Produces a string representing the test properties in a result as space
        -: 4400:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4401:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4402:    const TestResult& result) {
    #####: 4403:  Message attributes;
    %%%%%: 4403-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4403-block  1
call    3 never executed
    $$$$$: 4403-block  2
call    4 never executed
    #####: 4404:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4404-block  0
    %%%%%: 4404-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4405:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4406:    attributes << " " << property.key() << "="
    %%%%%: 4406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4406-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4406-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4406-block  3
    #####: 4407:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4407-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4407-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4407-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4407-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4407-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4407-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4407-block  6
call   20 never executed
    $$$$$: 4407-block  7
    $$$$$: 4407-block  8
call   21 never executed
    $$$$$: 4407-block  9
    $$$$$: 4407-block 10
call   22 never executed
    $$$$$: 4407-block 11
        -: 4408:  }
    #####: 4409:  return attributes.GetString();
    %%%%%: 4409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4409-block  1
        -: 4410:}
        -: 4411:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4412:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4413:    std::ostream* stream, const TestResult& result) {
    #####: 4414:  const std::string kProperties = "properties";
    %%%%%: 4414-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4414-block  1
    $$$$$: 4414-block  2
call    4 never executed
    #####: 4415:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4415-block  0
    $$$$$: 4415-block  1
call    4 never executed
        -: 4416:
    #####: 4417:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4418:    return;
    %%%%%: 4418-block  0
        -: 4419:  }
        -: 4420:
    #####: 4421:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4421-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4421-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4422:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4422-block  0
    %%%%%: 4422-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4422-block  2
    #####: 4423:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4423-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4424:    *stream << "        <" << kProperty;
    %%%%%: 4424-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4424-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4425:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4425-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4425-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4425-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4425-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4425-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4425-block  6
call   20 never executed
    $$$$$: 4425-block  7
    $$$$$: 4425-block  8
call   21 never executed
    $$$$$: 4425-block  9
    $$$$$: 4425-block 10
call   22 never executed
    $$$$$: 4425-block 11
    #####: 4426:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4426-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4426-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4426-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4426-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4426-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4426-block  5
call   20 never executed
    $$$$$: 4426-block  6
    $$$$$: 4426-block  7
call   21 never executed
    $$$$$: 4426-block  8
    $$$$$: 4426-block  9
call   22 never executed
    $$$$$: 4426-block 10
    #####: 4427:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4428:  }
    #####: 4429:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4429-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4429-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4430:}
        -: 4431:
        -: 4432:// End XmlUnitTestResultPrinter
        -: 4433:
        -: 4434:// This class generates an JSON output file.
        -: 4435:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4436: public:
        -: 4437:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4438:
        -: 4439:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4440:
        -: 4441:  // Prints an JSON summary of all unit tests.
        -: 4442:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4443:                                const std::vector<TestSuite*>& test_suites);
        -: 4444:
        -: 4445: private:
        -: 4446:  // Returns an JSON-escaped copy of the input string str.
        -: 4447:  static std::string EscapeJson(const std::string& str);
        -: 4448:
        -: 4449:  //// Verifies that the given attribute belongs to the given element and
        -: 4450:  //// streams the attribute as JSON.
        -: 4451:  static void OutputJsonKey(std::ostream* stream,
        -: 4452:                            const std::string& element_name,
        -: 4453:                            const std::string& name, const std::string& value,
        -: 4454:                            const std::string& indent, bool comma = true);
        -: 4455:  static void OutputJsonKey(std::ostream* stream,
        -: 4456:                            const std::string& element_name,
        -: 4457:                            const std::string& name, int value,
        -: 4458:                            const std::string& indent, bool comma = true);
        -: 4459:
        -: 4460:  // Streams a test suite JSON stanza containing the given test result.
        -: 4461:  //
        -: 4462:  // Requires: result.Failed()
        -: 4463:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4464:                                               const TestResult& result);
        -: 4465:
        -: 4466:  // Streams a JSON representation of a TestResult object.
        -: 4467:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4468:                                   const TestResult& result);
        -: 4469:
        -: 4470:  // Streams a JSON representation of a TestInfo object.
        -: 4471:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4472:                                 const char* test_suite_name,
        -: 4473:                                 const TestInfo& test_info);
        -: 4474:
        -: 4475:  // Prints a JSON representation of a TestSuite object
        -: 4476:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4477:                                 const TestSuite& test_suite);
        -: 4478:
        -: 4479:  // Prints a JSON summary of unit_test to output stream out.
        -: 4480:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4481:                                const UnitTest& unit_test);
        -: 4482:
        -: 4483:  // Produces a string representing the test properties in a result as
        -: 4484:  // a JSON dictionary.
        -: 4485:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4486:                                          const std::string& indent);
        -: 4487:
        -: 4488:  // The output file.
        -: 4489:  const std::string output_file_;
        -: 4490:
        -: 4491:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 4492:};
        -: 4493:
        -: 4494:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4495:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4496:    : output_file_(output_file) {
    %%%%%: 4496-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4496-block  1
call    5 never executed
    $$$$$: 4496-block  2
call    6 never executed
    $$$$$: 4496-block  3
    $$$$$: 4496-block  4
call    7 never executed
    $$$$$: 4496-block  5
call    8 never executed
    #####: 4497:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4498:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4498-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4498-block  2
call    7 never executed
    $$$$$: 4498-block  3
call    8 never executed
    $$$$$: 4498-block  4
        -: 4499:  }
    #####: 4500:}
    %%%%%: 4500-block  0
        -: 4501:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4502:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4503:                                                   int /*iteration*/) {
    #####: 4504:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4504-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4505:  std::stringstream stream;
    %%%%%: 4505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4505-block  1
call    3 never executed
    $$$$$: 4505-block  2
call    4 never executed
    #####: 4506:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4507:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4507-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4507-block  2
call    7 never executed
    $$$$$: 4507-block  3
call    8 never executed
    $$$$$: 4507-block  4
    #####: 4508:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4509:}
        -: 4510:
        -: 4511:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4512:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4513:  Message m;
    %%%%%: 4513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4513-block  1
call    3 never executed
    $$$$$: 4513-block  2
call    4 never executed
        -: 4514:
    #####: 4515:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4515-block  0
    %%%%%: 4515-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4515-block  2
    #####: 4516:    const char ch = str[i];
    %%%%%: 4516-block  0
call    0 never executed
    #####: 4517:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4518:      case '\\':
        -: 4519:      case '"':
        -: 4520:      case '/':
    #####: 4521:        m << '\\' << ch;
    %%%%%: 4521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4521-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4521-block  2
    #####: 4522:        break;
    %%%%%: 4522-block  0
    #####: 4523:      case '\b':
    #####: 4524:        m << "\\b";
    %%%%%: 4524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4525:        break;
    %%%%%: 4525-block  0
    #####: 4526:      case '\t':
    #####: 4527:        m << "\\t";
    %%%%%: 4527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4528:        break;
    %%%%%: 4528-block  0
    #####: 4529:      case '\n':
    #####: 4530:        m << "\\n";
    %%%%%: 4530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4531:        break;
    %%%%%: 4531-block  0
    #####: 4532:      case '\f':
    #####: 4533:        m << "\\f";
    %%%%%: 4533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4534:        break;
    %%%%%: 4534-block  0
    #####: 4535:      case '\r':
    #####: 4536:        m << "\\r";
    %%%%%: 4536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4537:        break;
    %%%%%: 4537-block  0
    #####: 4538:      default:
    #####: 4539:        if (ch < ' ') {
    %%%%%: 4539-block  0
branch  0 never executed
branch  1 never executed
    #####: 4540:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4540-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4540-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4540-block  3
call    9 never executed
    $$$$$: 4540-block  4
call   10 never executed
    $$$$$: 4540-block  5
        -: 4541:        } else {
    #####: 4542:          m << ch;
    %%%%%: 4542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4543:        }
    #####: 4544:        break;
    %%%%%: 4544-block  0
        -: 4545:    }
        -: 4546:  }
        -: 4547:
    #####: 4548:  return m.GetString();
    %%%%%: 4548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4548-block  1
        -: 4549:}
        -: 4550:
        -: 4551:// The following routines generate an JSON representation of a UnitTest
        -: 4552:// object.
        -: 4553:
        -: 4554:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEl called 0 returned 0% blocks executed 0%
    #####: 4555:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4556:  ::std::stringstream ss;
    %%%%%: 4556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4556-block  1
call    3 never executed
    $$$$$: 4556-block  2
call    4 never executed
    #####: 4557:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4558:  return ss.str();
    %%%%%: 4558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4558-block  1
        -: 4559:}
        -: 4560:
        -: 4561:// Converts the given epoch time in milliseconds to a date string in the
        -: 4562:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339El called 0 returned 0% blocks executed 0%
    #####: 4563:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4564:  struct tm time_struct;
    #####: 4565:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4566:    return "";
    %%%%%: 4566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4566-block  1
call    4 never executed
    $$$$$: 4566-block  2
call    5 never executed
    $$$$$: 4566-block  3
        -: 4567:  // YYYY-MM-DDThh:mm:ss
    #####: 4568:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4568-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4568-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4568-block  3
call   11 never executed
    $$$$$: 4568-block  4
    $$$$$: 4568-block  5
call   12 never executed
    $$$$$: 4568-block  6
    $$$$$: 4568-block  7
call   13 never executed
    $$$$$: 4568-block  8
    $$$$$: 4568-block  9
    #####: 4569:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4569-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4569-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4569-block  3
call   12 never executed
    $$$$$: 4569-block  4
    $$$$$: 4569-block  5
call   13 never executed
    $$$$$: 4569-block  6
    $$$$$: 4569-block  7
call   14 never executed
    $$$$$: 4569-block  8
    #####: 4570:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4570-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4570-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4570-block  3
call   12 never executed
    $$$$$: 4570-block  4
    $$$$$: 4570-block  5
call   13 never executed
    $$$$$: 4570-block  6
    $$$$$: 4570-block  7
call   14 never executed
    $$$$$: 4570-block  8
    #####: 4571:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4571-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4571-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4571-block  3
call   12 never executed
    $$$$$: 4571-block  4
    $$$$$: 4571-block  5
call   13 never executed
    $$$$$: 4571-block  6
    $$$$$: 4571-block  7
call   14 never executed
    $$$$$: 4571-block  8
    #####: 4572:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4572-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4572-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4572-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4572-block  4
call   13 never executed
    $$$$$: 4572-block  5
    $$$$$: 4572-block  6
call   14 never executed
    $$$$$: 4572-block  7
    $$$$$: 4572-block  8
call   15 never executed
    $$$$$: 4572-block  9
    #####: 4573:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4573-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4573-block  2
call    7 never executed
    $$$$$: 4573-block  3
        -: 4574:}
        -: 4575:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4576:static inline std::string Indent(size_t width) {
    #####: 4577:  return std::string(width, ' ');
    %%%%%: 4577-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4577-block  1
call    4 never executed
    %%%%%: 4577-block  2
    $$$$$: 4577-block  3
call    5 never executed
        -: 4578:}
        -: 4579:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4580:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4581:                                              const std::string& element_name,
        -: 4582:                                              const std::string& name,
        -: 4583:                                              const std::string& value,
        -: 4584:                                              const std::string& indent,
        -: 4585:                                              bool comma) {
        -: 4586:  const std::vector<std::string>& allowed_names =
    #####: 4587:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4587-block  1
call    3 never executed
    $$$$$: 4587-block  2
call    4 never executed
        -: 4588:
    #####: 4589:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4589-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4589-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4589-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4589-block  3
call   13 never executed
    %%%%%: 4589-block  4
call   14 never executed
    $$$$$: 4589-block  5
    $$$$$: 4589-block  6
call   15 never executed
    $$$$$: 4589-block  7
        -: 4590:               allowed_names.end())
        -: 4591:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4592:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4592-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4592-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4592-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4592-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4592-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4593:
    #####: 4594:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4594-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4594-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4594-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4594-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4594-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4594-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4594-block  7
call   21 never executed
    $$$$$: 4594-block  8
call   22 never executed
    $$$$$: 4594-block  9
    #####: 4595:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4595-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4596:}
        -: 4597:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4598:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4599:    std::ostream* stream, const std::string& element_name,
        -: 4600:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4601:  const std::vector<std::string>& allowed_names =
    #####: 4602:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4602-block  1
call    3 never executed
    $$$$$: 4602-block  2
call    4 never executed
        -: 4603:
    #####: 4604:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4604-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4604-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4604-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4604-block  3
call   13 never executed
    %%%%%: 4604-block  4
call   14 never executed
    $$$$$: 4604-block  5
    $$$$$: 4604-block  6
call   15 never executed
    $$$$$: 4604-block  7
        -: 4605:               allowed_names.end())
        -: 4606:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4607:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4607-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4607-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4607-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4607-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4607-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4608:
    #####: 4609:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4609-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4609-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4609-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4609-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4609-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4609-block  6
call   18 never executed
    $$$$$: 4609-block  7
call   19 never executed
    $$$$$: 4609-block  8
    #####: 4610:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4610-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4611:}
        -: 4612:
        -: 4613:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4614:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4615:    ::std::ostream* stream, const TestResult& result) {
        -: 4616:  // Output the boilerplate for a new test suite.
    #####: 4617:  *stream << Indent(4) << "{\n";
    %%%%%: 4617-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4617-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4617-block  2
call    7 never executed
    $$$$$: 4617-block  3
call    8 never executed
    $$$$$: 4617-block  4
call    9 never executed
    #####: 4618:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4618-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4618-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4618-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4618-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4618-block  4
call   23 never executed
    $$$$$: 4618-block  5
    $$$$$: 4618-block  6
call   24 never executed
    $$$$$: 4618-block  7
    $$$$$: 4618-block  8
call   25 never executed
    $$$$$: 4618-block  9
    $$$$$: 4618-block 10
call   26 never executed
    $$$$$: 4618-block 11
    $$$$$: 4618-block 12
call   27 never executed
    $$$$$: 4618-block 13
    $$$$$: 4618-block 14
call   28 never executed
    $$$$$: 4618-block 15
    $$$$$: 4618-block 16
call   29 never executed
    $$$$$: 4618-block 17
call   30 never executed
    #####: 4619:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4619-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4619-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4619-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4619-block  3
call   17 never executed
    $$$$$: 4619-block  4
    $$$$$: 4619-block  5
call   18 never executed
    $$$$$: 4619-block  6
    $$$$$: 4619-block  7
call   19 never executed
    $$$$$: 4619-block  8
    $$$$$: 4619-block  9
call   20 never executed
    $$$$$: 4619-block 10
    $$$$$: 4619-block 11
call   21 never executed
    $$$$$: 4619-block 12
call   22 never executed
    #####: 4620:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4621:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4621-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4621-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4621-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4621-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4621-block  4
call   17 never executed
    $$$$$: 4621-block  5
    $$$$$: 4621-block  6
call   18 never executed
    $$$$$: 4621-block  7
    $$$$$: 4621-block  8
call   19 never executed
    $$$$$: 4621-block  9
    $$$$$: 4621-block 10
call   20 never executed
    $$$$$: 4621-block 11
    $$$$$: 4621-block 12
call   21 never executed
    $$$$$: 4621-block 13
call   22 never executed
    #####: 4622:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4622-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4622-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4622-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4622-block  3
call   17 never executed
    $$$$$: 4622-block  4
    $$$$$: 4622-block  5
call   18 never executed
    $$$$$: 4622-block  6
    $$$$$: 4622-block  7
call   19 never executed
    $$$$$: 4622-block  8
    $$$$$: 4622-block  9
call   20 never executed
    $$$$$: 4622-block 10
    $$$$$: 4622-block 11
call   21 never executed
    $$$$$: 4622-block 12
call   22 never executed
    #####: 4623:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4623-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4623-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4623-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4623-block  3
call   17 never executed
    $$$$$: 4623-block  4
    $$$$$: 4623-block  5
call   18 never executed
    $$$$$: 4623-block  6
    $$$$$: 4623-block  7
call   19 never executed
    $$$$$: 4623-block  8
    $$$$$: 4623-block  9
call   20 never executed
    $$$$$: 4623-block 10
    $$$$$: 4623-block 11
call   21 never executed
    $$$$$: 4623-block 12
call   22 never executed
    #####: 4624:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4624-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4624-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4624-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4624-block  3
call   17 never executed
    $$$$$: 4624-block  4
    $$$$$: 4624-block  5
call   18 never executed
    $$$$$: 4624-block  6
    $$$$$: 4624-block  7
call   19 never executed
    $$$$$: 4624-block  8
    $$$$$: 4624-block  9
call   20 never executed
    $$$$$: 4624-block 10
    $$$$$: 4624-block 11
call   21 never executed
    $$$$$: 4624-block 12
call   22 never executed
    #####: 4625:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4625-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4625-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4625-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4625-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4625-block  4
call   15 never executed
    $$$$$: 4625-block  5
    $$$$$: 4625-block  6
call   16 never executed
    $$$$$: 4625-block  7
    $$$$$: 4625-block  8
call   17 never executed
    $$$$$: 4625-block  9
    $$$$$: 4625-block 10
call   18 never executed
    $$$$$: 4625-block 11
    #####: 4626:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4626-block  0
call    5 never executed
    $$$$$: 4626-block  1
    #####: 4627:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4627-block  0
call    2 never executed
    $$$$$: 4627-block  1
call    3 never executed
    #####: 4628:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4628-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4628-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4628-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4628-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4628-block  4
call   15 never executed
    $$$$$: 4628-block  5
    $$$$$: 4628-block  6
call   16 never executed
    $$$$$: 4628-block  7
    $$$$$: 4628-block  8
call   17 never executed
    $$$$$: 4628-block  9
    $$$$$: 4628-block 10
call   18 never executed
    $$$$$: 4628-block 11
    #####: 4629:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4629-block  0
call    5 never executed
    $$$$$: 4629-block  1
    #####: 4630:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4630-block  0
call    2 never executed
    $$$$$: 4630-block  1
call    3 never executed
        -: 4631:  }
    #####: 4632:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4632-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4632-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4632-block  2
call    7 never executed
    $$$$$: 4632-block  3
call    8 never executed
    $$$$$: 4632-block  4
call    9 never executed
        -: 4633:
        -: 4634:  // Output the boilerplate for a new test case.
    #####: 4635:  *stream << Indent(8) << "{\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4635-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4635-block  1
call    7 never executed
    $$$$$: 4635-block  2
call    8 never executed
    $$$$$: 4635-block  3
call    9 never executed
    #####: 4636:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4636-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4636-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4636-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4636-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4636-block  4
call   23 never executed
    $$$$$: 4636-block  5
    $$$$$: 4636-block  6
call   24 never executed
    $$$$$: 4636-block  7
    $$$$$: 4636-block  8
call   25 never executed
    $$$$$: 4636-block  9
    $$$$$: 4636-block 10
call   26 never executed
    $$$$$: 4636-block 11
    $$$$$: 4636-block 12
call   27 never executed
    $$$$$: 4636-block 13
    $$$$$: 4636-block 14
call   28 never executed
    $$$$$: 4636-block 15
    $$$$$: 4636-block 16
call   29 never executed
    $$$$$: 4636-block 17
call   30 never executed
    #####: 4637:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4637-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4637-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4637-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4637-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4637-block  4
call   23 never executed
    $$$$$: 4637-block  5
    $$$$$: 4637-block  6
call   24 never executed
    $$$$$: 4637-block  7
    $$$$$: 4637-block  8
call   25 never executed
    $$$$$: 4637-block  9
    $$$$$: 4637-block 10
call   26 never executed
    $$$$$: 4637-block 11
    $$$$$: 4637-block 12
call   27 never executed
    $$$$$: 4637-block 13
    $$$$$: 4637-block 14
call   28 never executed
    $$$$$: 4637-block 15
    $$$$$: 4637-block 16
call   29 never executed
    $$$$$: 4637-block 17
call   30 never executed
    #####: 4638:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4638-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4638-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4638-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4638-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4638-block  4
call   23 never executed
    $$$$$: 4638-block  5
    $$$$$: 4638-block  6
call   24 never executed
    $$$$$: 4638-block  7
    $$$$$: 4638-block  8
call   25 never executed
    $$$$$: 4638-block  9
    $$$$$: 4638-block 10
call   26 never executed
    $$$$$: 4638-block 11
    $$$$$: 4638-block 12
call   27 never executed
    $$$$$: 4638-block 13
    $$$$$: 4638-block 14
call   28 never executed
    $$$$$: 4638-block 15
    $$$$$: 4638-block 16
call   29 never executed
    $$$$$: 4638-block 17
call   30 never executed
    #####: 4639:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4639-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4639-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4639-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4639-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4639-block  4
call   15 never executed
    $$$$$: 4639-block  5
    $$$$$: 4639-block  6
call   16 never executed
    $$$$$: 4639-block  7
    $$$$$: 4639-block  8
call   17 never executed
    $$$$$: 4639-block  9
    $$$$$: 4639-block 10
call   18 never executed
    $$$$$: 4639-block 11
    #####: 4640:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4640-block  0
call    5 never executed
    $$$$$: 4640-block  1
    #####: 4641:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4641-block  0
call    2 never executed
    $$$$$: 4641-block  1
call    3 never executed
    #####: 4642:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4642-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4642-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4642-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4642-block  4
call   15 never executed
    $$$$$: 4642-block  5
    $$$$$: 4642-block  6
call   16 never executed
    $$$$$: 4642-block  7
    $$$$$: 4642-block  8
call   17 never executed
    $$$$$: 4642-block  9
    $$$$$: 4642-block 10
call   18 never executed
    $$$$$: 4642-block 11
    #####: 4643:                FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4643-block  0
call    5 never executed
    $$$$$: 4643-block  1
    #####: 4644:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4644-block  0
call    2 never executed
    $$$$$: 4644-block  1
call    3 never executed
    #####: 4645:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4645-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4645-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4645-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4645-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4645-block  4
call   23 never executed
    $$$$$: 4645-block  5
    $$$$$: 4645-block  6
call   24 never executed
    $$$$$: 4645-block  7
    $$$$$: 4645-block  8
call   25 never executed
    $$$$$: 4645-block  9
    $$$$$: 4645-block 10
call   26 never executed
    $$$$$: 4645-block 11
    $$$$$: 4645-block 12
call   27 never executed
    $$$$$: 4645-block 13
    $$$$$: 4645-block 14
call   28 never executed
    $$$$$: 4645-block 15
    $$$$$: 4645-block 16
call   29 never executed
    $$$$$: 4645-block 17
call   30 never executed
    #####: 4646:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4646-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4646-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4646-block  2
call    9 never executed
    $$$$$: 4646-block  3
    $$$$$: 4646-block  4
call   10 never executed
    $$$$$: 4646-block  5
call   11 never executed
        -: 4647:
        -: 4648:  // Output the actual test result.
    #####: 4649:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4650:
        -: 4651:  // Finish the test suite.
    #####: 4652:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4652-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4652-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4652-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4652-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4652-block  4
call   17 never executed
call   18 never executed
    $$$$$: 4652-block  5
call   19 never executed
    $$$$$: 4652-block  6
    $$$$$: 4652-block  7
call   20 never executed
    #####: 4653:}
        -: 4654:
        -: 4655:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4656:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4657:                                                   const char* test_suite_name,
        -: 4658:                                                   const TestInfo& test_info) {
    #####: 4659:  const TestResult& result = *test_info.result();
    %%%%%: 4659-block  0
call    0 never executed
    #####: 4660:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4660-block  0
    $$$$$: 4660-block  1
call    4 never executed
    #####: 4661:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4661-block  0
call    3 never executed
        -: 4662:
    #####: 4663:  *stream << Indent(8) << "{\n";
    %%%%%: 4663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4663-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4663-block  3
call    9 never executed
    $$$$$: 4663-block  4
call   10 never executed
    $$$$$: 4663-block  5
    #####: 4664:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4664-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4664-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4664-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4664-block  3
call   16 never executed
    $$$$$: 4664-block  4
    $$$$$: 4664-block  5
call   17 never executed
    $$$$$: 4664-block  6
    $$$$$: 4664-block  7
call   18 never executed
    $$$$$: 4664-block  8
    $$$$$: 4664-block  9
call   19 never executed
    $$$$$: 4664-block 10
        -: 4665:
    #####: 4666:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4667:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4667-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4667-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4667-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4667-block  4
call   16 never executed
    $$$$$: 4667-block  5
    $$$$$: 4667-block  6
call   17 never executed
    $$$$$: 4667-block  7
    $$$$$: 4667-block  8
call   18 never executed
    $$$$$: 4667-block  9
    $$$$$: 4667-block 10
call   19 never executed
    $$$$$: 4667-block 11
        -: 4668:                  kIndent);
        -: 4669:  }
    #####: 4670:  if (test_info.type_param() != nullptr) {
    %%%%%: 4670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4671:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4671-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4671-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4671-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4671-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4671-block  4
call   16 never executed
    $$$$$: 4671-block  5
    $$$$$: 4671-block  6
call   17 never executed
    $$$$$: 4671-block  7
    $$$$$: 4671-block  8
call   18 never executed
    $$$$$: 4671-block  9
    $$$$$: 4671-block 10
call   19 never executed
    $$$$$: 4671-block 11
        -: 4672:                  kIndent);
        -: 4673:  }
        -: 4674:
    #####: 4675:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4675-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4675-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4675-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4675-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4675-block  4
call   16 never executed
    $$$$$: 4675-block  5
    $$$$$: 4675-block  6
call   17 never executed
    $$$$$: 4675-block  7
    $$$$$: 4675-block  8
call   18 never executed
    $$$$$: 4675-block  9
    $$$$$: 4675-block 10
call   19 never executed
    $$$$$: 4675-block 11
    #####: 4676:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4676-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4676-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4676-block  2
call   10 never executed
    $$$$$: 4676-block  3
    $$$$$: 4676-block  4
call   11 never executed
    $$$$$: 4676-block  5
    #####: 4677:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4678:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4678-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4678-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4678-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4678-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4678-block  4
call   12 never executed
    $$$$$: 4678-block  5
call   13 never executed
    $$$$$: 4678-block  6
    #####: 4679:    return;
        -: 4680:  } else {
    #####: 4681:    *stream << ",\n";
    %%%%%: 4681-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4682:  }
        -: 4683:
    #####: 4684:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4684-block  1
    %%%%%: 4684-block  2
    %%%%%: 4684-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4684-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4684-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4684-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4684-block  7
call   17 never executed
    $$$$$: 4684-block  8
    $$$$$: 4684-block  9
call   18 never executed
    $$$$$: 4684-block 10
    $$$$$: 4684-block 11
call   19 never executed
    $$$$$: 4684-block 12
    $$$$$: 4684-block 13
call   20 never executed
    $$$$$: 4684-block 14
    #####: 4685:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4686:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4686-block  0
    %%%%%: 4686-block  1
    %%%%%: 4686-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4686-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4686-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4686-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4686-block  6
call   17 never executed
    $$$$$: 4686-block  7
    $$$$$: 4686-block  8
call   18 never executed
    $$$$$: 4686-block  9
    $$$$$: 4686-block 10
call   19 never executed
    $$$$$: 4686-block 11
    $$$$$: 4686-block 12
call   20 never executed
    $$$$$: 4686-block 13
    #####: 4687:                test_info.should_run()
call    0 never executed
    #####: 4688:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4688-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4688-block  2
    %%%%%: 4688-block  3
        -: 4689:                    : "SUPPRESSED",
        -: 4690:                kIndent);
    #####: 4691:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4691-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4691-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4691-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4691-block  3
call    9 never executed
    $$$$$: 4691-block  4
    $$$$$: 4691-block  5
call   10 never executed
    $$$$$: 4691-block  6
    #####: 4692:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4692-block  0
call    5 never executed
    $$$$$: 4692-block  1
        -: 4693:                kIndent);
    #####: 4694:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4694-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4694-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4694-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4694-block  3
call    9 never executed
    $$$$$: 4694-block  4
    $$$$$: 4694-block  5
call   10 never executed
    $$$$$: 4694-block  6
    #####: 4695:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4695-block  0
call    5 never executed
    $$$$$: 4695-block  1
    #####: 4696:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4696-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4696-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4696-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4696-block  3
call   15 never executed
    $$$$$: 4696-block  4
    $$$$$: 4696-block  5
call   16 never executed
    $$$$$: 4696-block  6
    $$$$$: 4696-block  7
call   17 never executed
    $$$$$: 4696-block  8
    $$$$$: 4696-block  9
call   18 never executed
    $$$$$: 4696-block 10
        -: 4697:                false);
    #####: 4698:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4698-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4698-block  1
call    6 never executed
    $$$$$: 4698-block  2
call    7 never executed
    $$$$$: 4698-block  3
        -: 4699:
    #####: 4700:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4701:}
        -: 4702:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4703:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4704:                                                     const TestResult& result) {
    #####: 4705:  const std::string kIndent = Indent(10);
    %%%%%: 4705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4705-block  1
call    3 never executed
        -: 4706:
    #####: 4707:  int failures = 0;
    #####: 4708:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4708-block  0
    %%%%%: 4708-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4708-block  2
    #####: 4709:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4709-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4710:    if (part.failed()) {
    %%%%%: 4710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4711:      *stream << ",\n";
    %%%%%: 4711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4712:      if (++failures == 1) {
    %%%%%: 4712-block  0
branch  0 never executed
branch  1 never executed
        -: 4713:        *stream << kIndent << "\""
        -: 4714:                << "failures"
    #####: 4715:                << "\": [\n";
    %%%%%: 4715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4715-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4715-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4715-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4716:      }
        -: 4717:      const std::string location =
        -: 4718:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4719:                                                          part.line_number());
    %%%%%: 4719-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4719-block  1
call    6 never executed
    #####: 4720:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4720-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4720-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4720-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 4720-block  3
call   11 never executed
    $$$$$: 4720-block  4
    $$$$$: 4720-block  5
    $$$$$: 4720-block  6
call   12 never executed
        -: 4721:      *stream << kIndent << "  {\n"
        -: 4722:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4723:              << kIndent << "    \"type\": \"\"\n"
    #####: 4724:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4724-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4724-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4724-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4724-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4724-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4724-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4724-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4724-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4724-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 4725:    }
        -: 4726:  }
        -: 4727:
    #####: 4728:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4728-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4728-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4728-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4728-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4729:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4729-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4729-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4729-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4729-block  4
call   12 never executed
call   13 never executed
    $$$$$: 4729-block  5
call   14 never executed
    $$$$$: 4729-block  6
    #####: 4730:}
        -: 4731:
        -: 4732:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4733:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4734:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4735:  const std::string kTestsuite = "testsuite";
    %%%%%: 4735-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4735-block  1
    $$$$$: 4735-block  2
call    5 never executed
    #####: 4736:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4736-block  0
call    3 never executed
        -: 4737:
    #####: 4738:  *stream << Indent(4) << "{\n";
    %%%%%: 4738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4738-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4738-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4738-block  3
call    9 never executed
    $$$$$: 4738-block  4
call   10 never executed
    $$$$$: 4738-block  5
    #####: 4739:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4739-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4739-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4739-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4739-block  3
call   16 never executed
    $$$$$: 4739-block  4
    $$$$$: 4739-block  5
call   17 never executed
    $$$$$: 4739-block  6
    $$$$$: 4739-block  7
call   18 never executed
    $$$$$: 4739-block  8
    $$$$$: 4739-block  9
call   19 never executed
    $$$$$: 4739-block 10
    #####: 4740:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4740-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4740-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4740-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4740-block  3
call   12 never executed
    $$$$$: 4740-block  4
    $$$$$: 4740-block  5
call   13 never executed
    $$$$$: 4740-block  6
        -: 4741:                kIndent);
    #####: 4742:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4743:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4743-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4743-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4743-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4743-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4743-block  4
call   12 never executed
    $$$$$: 4743-block  5
    $$$$$: 4743-block  6
call   13 never executed
    $$$$$: 4743-block  7
        -: 4744:                  test_suite.failed_test_count(), kIndent);
    #####: 4745:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4745-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4745-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4745-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4745-block  3
call   12 never executed
    $$$$$: 4745-block  4
    $$$$$: 4745-block  5
call   13 never executed
    $$$$$: 4745-block  6
        -: 4746:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4747:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4747-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4747-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4747-block  2
call    9 never executed
    $$$$$: 4747-block  3
    $$$$$: 4747-block  4
call   10 never executed
    $$$$$: 4747-block  5
    #####: 4748:    OutputJsonKey(
    %%%%%: 4748-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4748-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4748-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4748-block  3
call    9 never executed
    $$$$$: 4748-block  4
    $$$$$: 4748-block  5
call   10 never executed
    $$$$$: 4748-block  6
        -: 4749:        stream, kTestsuite, "timestamp",
    #####: 4750:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4750-block  0
call    5 never executed
    $$$$$: 4750-block  1
        -: 4751:        kIndent);
    #####: 4752:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4752-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4752-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4752-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4752-block  3
call    9 never executed
    $$$$$: 4752-block  4
    $$$$$: 4752-block  5
call   10 never executed
    $$$$$: 4752-block  6
    #####: 4753:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4753-block  0
call    5 never executed
    $$$$$: 4753-block  1
        -: 4754:                  kIndent, false);
    #####: 4755:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4755-block  0
call    4 never executed
    $$$$$: 4755-block  1
call    5 never executed
    $$$$$: 4755-block  2
    #####: 4756:            << ",\n";
    %%%%%: 4756-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4756-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4757:  }
        -: 4758:
    #####: 4759:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4759-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4759-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4759-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4760:
    #####: 4761:  bool comma = false;
    #####: 4762:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4762-block  0
    %%%%%: 4762-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4762-block  2
    #####: 4763:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4763-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4764:      if (comma) {
    %%%%%: 4764-block  0
branch  0 never executed
branch  1 never executed
    #####: 4765:        *stream << ",\n";
    %%%%%: 4765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4766:      } else {
    #####: 4767:        comma = true;
    %%%%%: 4767-block  0
        -: 4768:      }
    #####: 4769:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4769-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4770:    }
        -: 4771:  }
    #####: 4772:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4772-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4772-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4772-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4772-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4772-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4772-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4772-block  7
call   20 never executed
    $$$$$: 4772-block  8
    #####: 4773:}
        -: 4774:
        -: 4775:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4776:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4777:                                                  const UnitTest& unit_test) {
    #####: 4778:  const std::string kTestsuites = "testsuites";
    %%%%%: 4778-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4778-block  1
    $$$$$: 4778-block  2
call    5 never executed
    #####: 4779:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4779-block  0
call    3 never executed
    $$$$$: 4779-block  1
call    4 never executed
    #####: 4780:  *stream << "{\n";
    %%%%%: 4780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4781:
    #####: 4782:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4782-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4782-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4782-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4782-block  4
call   12 never executed
    $$$$$: 4782-block  5
    $$$$$: 4782-block  6
call   13 never executed
    $$$$$: 4782-block  7
        -: 4783:                kIndent);
    #####: 4784:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4784-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4784-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4784-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4784-block  3
call   12 never executed
    $$$$$: 4784-block  4
    $$$$$: 4784-block  5
call   13 never executed
    $$$$$: 4784-block  6
        -: 4785:                kIndent);
    #####: 4786:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4786-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4786-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4786-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4786-block  3
call   12 never executed
    $$$$$: 4786-block  4
    $$$$$: 4786-block  5
call   13 never executed
    $$$$$: 4786-block  6
        -: 4787:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4788:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4788-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4788-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4788-block  2
call    9 never executed
    $$$$$: 4788-block  3
    $$$$$: 4788-block  4
call   10 never executed
    $$$$$: 4788-block  5
    #####: 4789:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4790:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4790-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4790-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4790-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4790-block  3
call   10 never executed
    $$$$$: 4790-block  4
    $$$$$: 4790-block  5
call   11 never executed
    $$$$$: 4790-block  6
        -: 4791:                  kIndent);
        -: 4792:  }
    #####: 4793:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4793-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4793-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4793-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4793-block  3
call    9 never executed
    $$$$$: 4793-block  4
    $$$$$: 4793-block  5
call   10 never executed
    $$$$$: 4793-block  6
    #####: 4794:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4794-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4794-block  1
call    5 never executed
    $$$$$: 4794-block  2
        -: 4795:                kIndent);
    #####: 4796:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4796-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4796-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4796-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4796-block  3
call    9 never executed
    $$$$$: 4796-block  4
    $$$$$: 4796-block  5
call   10 never executed
    $$$$$: 4796-block  6
    #####: 4797:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4797-block  0
call    5 never executed
    $$$$$: 4797-block  1
        -: 4798:                false);
        -: 4799:
    #####: 4800:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4800-block  0
call    4 never executed
    $$$$$: 4800-block  1
call    5 never executed
    $$$$$: 4800-block  2
    #####: 4801:          << ",\n";
    %%%%%: 4801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4801-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4802:
    #####: 4803:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4803-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4803-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4803-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4803-block  3
call   15 never executed
    $$$$$: 4803-block  4
    $$$$$: 4803-block  5
call   16 never executed
    $$$$$: 4803-block  6
    $$$$$: 4803-block  7
call   17 never executed
    $$$$$: 4803-block  8
    $$$$$: 4803-block  9
call   18 never executed
    $$$$$: 4803-block 10
    #####: 4804:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4804-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4804-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4804-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4805:
    #####: 4806:  bool comma = false;
    #####: 4807:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4807-block  0
    %%%%%: 4807-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4807-block  2
    #####: 4808:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4808-block  2
branch  6 never executed
branch  7 never executed
    #####: 4809:      if (comma) {
    %%%%%: 4809-block  0
branch  0 never executed
branch  1 never executed
    #####: 4810:        *stream << ",\n";
    %%%%%: 4810-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4811:      } else {
    #####: 4812:        comma = true;
    %%%%%: 4812-block  0
        -: 4813:      }
    #####: 4814:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4814-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4815:    }
        -: 4816:  }
        -: 4817:
        -: 4818:  // If there was a test failure outside of one of the test suites (like in a
        -: 4819:  // test environment) include that in the output.
    #####: 4820:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4820-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4820-block  1
branch  4 never executed
branch  5 never executed
    #####: 4821:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4821-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4822:  }
        -: 4823:
        -: 4824:  *stream << "\n"
        -: 4825:          << kIndent << "]\n"
    #####: 4826:          << "}\n";
    %%%%%: 4826-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4826-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4826-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4826-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4827:}
        -: 4828:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4829:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4830:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4831:  const std::string kTestsuites = "testsuites";
    %%%%%: 4831-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4831-block  1
    $$$$$: 4831-block  2
call    5 never executed
    #####: 4832:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4832-block  0
call    3 never executed
    $$$$$: 4832-block  1
call    4 never executed
    #####: 4833:  *stream << "{\n";
    %%%%%: 4833-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4834:  int total_tests = 0;
    #####: 4835:  for (auto test_suite : test_suites) {
    %%%%%: 4835-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4835-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4835-block  2
call    5 never executed
    #####: 4836:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4837:  }
    #####: 4838:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4838-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4838-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4838-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4838-block  3
call    9 never executed
    $$$$$: 4838-block  4
    $$$$$: 4838-block  5
call   10 never executed
    $$$$$: 4838-block  6
        -: 4839:
    #####: 4840:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4840-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4840-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4840-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4840-block  3
call   15 never executed
    $$$$$: 4840-block  4
    $$$$$: 4840-block  5
call   16 never executed
    $$$$$: 4840-block  6
    $$$$$: 4840-block  7
call   17 never executed
    $$$$$: 4840-block  8
    $$$$$: 4840-block  9
call   18 never executed
    $$$$$: 4840-block 10
    #####: 4841:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4841-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4841-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4841-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4842:
    #####: 4843:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4843-block  0
    %%%%%: 4843-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4843-block  2
    #####: 4844:    if (i != 0) {
    %%%%%: 4844-block  0
branch  0 never executed
branch  1 never executed
    #####: 4845:      *stream << ",\n";
    %%%%%: 4845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4846:    }
    #####: 4847:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4847-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4848:  }
        -: 4849:
        -: 4850:  *stream << "\n"
        -: 4851:          << kIndent << "]\n"
    #####: 4852:          << "}\n";
    %%%%%: 4852-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4852-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4852-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4852-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4853:}
        -: 4854:// Produces a string representing the test properties in a result as
        -: 4855:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4856:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4857:    const TestResult& result, const std::string& indent) {
    #####: 4858:  Message attributes;
    %%%%%: 4858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4858-block  1
call    3 never executed
    $$$$$: 4858-block  2
call    4 never executed
    #####: 4859:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4859-block  0
    %%%%%: 4859-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4860:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4860-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4861:    attributes << ",\n"
    %%%%%: 4861-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4862:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4862-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4862-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4862-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4862-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4862-block  4
    #####: 4863:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4863-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4863-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4863-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4863-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4863-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4863-block  6
call   20 never executed
    $$$$$: 4863-block  7
    $$$$$: 4863-block  8
call   21 never executed
    $$$$$: 4863-block  9
    $$$$$: 4863-block 10
call   22 never executed
    $$$$$: 4863-block 11
        -: 4864:  }
    #####: 4865:  return attributes.GetString();
    %%%%%: 4865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4865-block  1
        -: 4866:}
        -: 4867:
        -: 4868:// End JsonUnitTestResultPrinter
        -: 4869:
        -: 4870:#if GTEST_CAN_STREAM_RESULTS_
        -: 4871:
        -: 4872:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4873:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4874:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4875:// in both time and space -- important as the input str may contain an
        -: 4876:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4877:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4878:  std::string result;
    %%%%%: 4878-block  0
call    0 never executed
    #####: 4879:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4880:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4880-block  0
    %%%%%: 4880-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4880-block  2
    #####: 4881:    switch (ch) {
    %%%%%: 4881-block  0
branch  0 never executed
branch  1 never executed
    #####: 4882:      case '%':
        -: 4883:      case '=':
        -: 4884:      case '&':
        -: 4885:      case '\n':
    #####: 4886:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4886-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4886-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4886-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4886-block  4
call   11 never executed
    $$$$$: 4886-block  5
    $$$$$: 4886-block  6
call   12 never executed
    $$$$$: 4886-block  7
    #####: 4887:        break;
    #####: 4888:      default:
    #####: 4889:        result.push_back(ch);
    %%%%%: 4889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4890:        break;
    %%%%%: 4890-block  0
        -: 4891:    }
        -: 4892:  }
    #####: 4893:  return result;
    %%%%%: 4893-block  0
    %%%%%: 4893-block  1
        -: 4894:}
        -: 4895:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4896:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4897:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4897-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4897-block  2
call    6 never executed
    %%%%%: 4897-block  3
call    7 never executed
    $$$$$: 4897-block  4
call    8 never executed
    $$$$$: 4897-block  5
    #####: 4898:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4898-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4899:
        -: 4900:  addrinfo hints;
    #####: 4901:  memset(&hints, 0, sizeof(hints));
    #####: 4902:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
    #####: 4903:  hints.ai_socktype = SOCK_STREAM;
    #####: 4904:  addrinfo* servinfo = nullptr;
        -: 4905:
        -: 4906:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4907:  // the given host name.
        -: 4908:  const int error_num =
    #####: 4909:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    %%%%%: 4909-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4910:  if (error_num != 0) {
    %%%%%: 4910-block  0
branch  0 never executed
branch  1 never executed
    #####: 4911:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4911-block  1
call    3 never executed
    %%%%%: 4911-block  2
call    4 never executed
    $$$$$: 4911-block  3
call    5 never executed
    $$$$$: 4911-block  4
    #####: 4912:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4912-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4913:  }
        -: 4914:
        -: 4915:  // Loop through all the results and connect to the first we can.
    #####: 4916:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 4916-block  0
    %%%%%: 4916-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4916-block  2
branch  2 never executed
branch  3 never executed
    #####: 4917:       cur_addr = cur_addr->ai_next) {
    %%%%%: 4917-block  0
    #####: 4918:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
    %%%%%: 4918-block  0
call    0 never executed
        -: 4919:                     cur_addr->ai_protocol);
    #####: 4920:    if (sockfd_ != -1) {
branch  0 never executed
branch  1 never executed
        -: 4921:      // Connect the client socket to the server socket.
    #####: 4922:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 4922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4922-block  1
branch  3 never executed
branch  4 never executed
    #####: 4923:        close(sockfd_);
    %%%%%: 4923-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4924:        sockfd_ = -1;
    %%%%%: 4924-block  0
        -: 4925:      }
        -: 4926:    }
        -: 4927:  }
        -: 4928:
    #####: 4929:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 4929-block  0
call    0 never executed
        -: 4930:
    #####: 4931:  if (sockfd_ == -1) {
branch  0 never executed
branch  1 never executed
    #####: 4932:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 4932-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4932-block  1
call    3 never executed
    %%%%%: 4932-block  2
call    4 never executed
    $$$$$: 4932-block  3
call    5 never executed
    $$$$$: 4932-block  4
    #####: 4933:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4933-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4933-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4933-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4934:  }
    #####: 4935:}
    %%%%%: 4935-block  0
        -: 4936:
        -: 4937:// End of class Streaming Listener
        -: 4938:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4939:
        -: 4940:// class OsStackTraceGetter
        -: 4941:
        -: 4942:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4943:    "... " GTEST_NAME_ " internal frames ...";
        -: 4944:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4945:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4946:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4947:#if GTEST_HAS_ABSL
        -: 4948:  std::string result;
        -: 4949:
        -: 4950:  if (max_depth <= 0) {
        -: 4951:    return result;
        -: 4952:  }
        -: 4953:
        -: 4954:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4955:
        -: 4956:  std::vector<void*> raw_stack(max_depth);
        -: 4957:  // Skips the frames requested by the caller, plus this function.
        -: 4958:  const int raw_stack_size =
        -: 4959:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4960:
        -: 4961:  void* caller_frame = nullptr;
        -: 4962:  {
        -: 4963:    MutexLock lock(&mutex_);
        -: 4964:    caller_frame = caller_frame_;
        -: 4965:  }
        -: 4966:
        -: 4967:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4968:    if (raw_stack[i] == caller_frame &&
        -: 4969:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4970:      // Add a marker to the trace and stop adding frames.
        -: 4971:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4972:      break;
        -: 4973:    }
        -: 4974:
        -: 4975:    char tmp[1024];
        -: 4976:    const char* symbol = "(unknown)";
        -: 4977:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4978:      symbol = tmp;
        -: 4979:    }
        -: 4980:
        -: 4981:    char line[1024];
        -: 4982:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4983:    result += line;
        -: 4984:  }
        -: 4985:
        -: 4986:  return result;
        -: 4987:
        -: 4988:#else   // !GTEST_HAS_ABSL
        -: 4989:  static_cast<void>(max_depth);
        -: 4990:  static_cast<void>(skip_count);
    #####: 4991:  return "";
    %%%%%: 4991-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4991-block  1
call    4 never executed
    %%%%%: 4991-block  2
    $$$$$: 4991-block  3
call    5 never executed
        -: 4992:#endif  // GTEST_HAS_ABSL
        -: 4993:}
        -: 4994:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 92 returned 100% blocks executed 100%
       92: 4995:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4996:#if GTEST_HAS_ABSL
        -: 4997:  void* caller_frame = nullptr;
        -: 4998:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 4999:    caller_frame = nullptr;
        -: 5000:  }
        -: 5001:
        -: 5002:  MutexLock lock(&mutex_);
        -: 5003:  caller_frame_ = caller_frame;
        -: 5004:#endif  // GTEST_HAS_ABSL
       92: 5005:}
        -: 5006:
        -: 5007:// A helper class that creates the premature-exit file in its
        -: 5008:// constructor and deletes the file in its destructor.
        -: 5009:class ScopedPrematureExitFile {
        -: 5010: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 1 returned 100% blocks executed 50%
        1: 5011:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 5012:      : premature_exit_filepath_(
       1*: 5013:            premature_exit_filepath ? premature_exit_filepath : "") {
        1: 5013-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5013-block  1
        1: 5013-block  2
        1: 5013-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5013-block  4
call    6 returned 1
    $$$$$: 5013-block  5
call    7 never executed
    $$$$$: 5013-block  6
call    8 never executed
    $$$$$: 5013-block  7
call    9 never executed
        -: 5014:    // If a path to the premature-exit file is specified...
        1: 5015:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5016:      // create the file with a single "0" character in it.  I/O
        -: 5017:      // errors are ignored as there's nothing better we can do and we
        -: 5018:      // don't want to fail the test because of this.
    #####: 5019:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5019-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5020:      fwrite("0", 1, 1, pfile);
    %%%%%: 5020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5021:      fclose(pfile);
    %%%%%: 5021-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5022:    }
        1: 5023:  }
        1: 5023-block  0
        -: 5024:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 1 returned 100% blocks executed 27%
        1: 5025:  ~ScopedPrematureExitFile() {
        1: 5025-block  0
call    0 returned 1
        -: 5026:#if !defined GTEST_OS_ESP8266
        1: 5027:    if (!premature_exit_filepath_.empty()) {
        1: 5027-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5028:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5028-block  0
call    0 never executed
call    1 never executed
    #####: 5029:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5030:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5030-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5031:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5032:                          << retval;
call    0 never executed
        -: 5033:      }
        -: 5034:    }
        -: 5035:#endif
        1: 5036:  }
        -: 5037:
        -: 5038: private:
        -: 5039:  const std::string premature_exit_filepath_;
        -: 5040:
        -: 5041:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 5042:};
        -: 5043:
        -: 5044:}  // namespace internal
        -: 5045:
        -: 5046:// class TestEventListeners
        -: 5047:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5048:TestEventListeners::TestEventListeners()
        1: 5049:    : repeater_(new internal::TestEventRepeater()),
        1: 5049-block  0
call    0 returned 1
call    1 returned 1
        -: 5050:      default_result_printer_(nullptr),
        1: 5051:      default_xml_generator_(nullptr) {}
        -: 5052:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        1: 5053:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 5053-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5053-block  1
call    2 returned 1
        -: 5054:
        -: 5055:// Returns the standard listener responsible for the default console
        -: 5056:// output.  Can be removed from the listeners list to shut down default
        -: 5057:// console output.  Note that removing this object from the listener list
        -: 5058:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5059:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5060:  repeater_->Append(listener);
        1: 5060-block  0
call    0 returned 1
        1: 5061:}
        -: 5062:
        -: 5063:// Removes the given event listener from the list and returns it.  It then
        -: 5064:// becomes the caller's responsibility to delete the listener. Returns
        -: 5065:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5066:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5067:  if (listener == default_result_printer_)
        1: 5067-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5068:    default_result_printer_ = nullptr;
        1: 5068-block  0
    #####: 5069:  else if (listener == default_xml_generator_)
    %%%%%: 5069-block  0
branch  0 never executed
branch  1 never executed
    #####: 5070:    default_xml_generator_ = nullptr;
    %%%%%: 5070-block  0
        1: 5071:  return repeater_->Release(listener);
        1: 5071-block  0
call    0 returned 1
        -: 5072:}
        -: 5073:
        -: 5074:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5075:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 20 returned 100% blocks executed 100%
       20: 5076:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       20: 5076-block  0
        -: 5077:
        -: 5078:// Sets the default_result_printer attribute to the provided listener.
        -: 5079:// The listener is also added to the listener list and previous
        -: 5080:// default_result_printer is removed from it and deleted. The listener can
        -: 5081:// also be NULL in which case it will not be added to the list. Does
        -: 5082:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5083:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5084:  if (default_result_printer_ != listener) {
        1: 5084-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5085:    // It is an error to pass this method a listener that is already in the
        -: 5086:    // list.
       1*: 5087:    delete Release(default_result_printer_);
        1: 5087-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5087-block  1
call    3 never executed
        1: 5088:    default_result_printer_ = listener;
        1: 5089:    if (listener != nullptr) Append(listener);
        1: 5089-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5089-block  1
call    2 returned 1
        -: 5090:  }
        1: 5091:}
        -: 5092:
        -: 5093:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5094:// listener is also added to the listener list and previous
        -: 5095:// default_xml_generator is removed from it and deleted. The listener can
        -: 5096:// also be NULL in which case it will not be added to the list. Does
        -: 5097:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5098:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5099:  if (default_xml_generator_ != listener) {
    %%%%%: 5099-block  0
branch  0 never executed
branch  1 never executed
        -: 5100:    // It is an error to pass this method a listener that is already in the
        -: 5101:    // list.
    #####: 5102:    delete Release(default_xml_generator_);
    %%%%%: 5102-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5102-block  1
call    3 never executed
    #####: 5103:    default_xml_generator_ = listener;
    #####: 5104:    if (listener != nullptr) Append(listener);
    %%%%%: 5104-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5104-block  1
call    2 never executed
        -: 5105:  }
    #####: 5106:}
        -: 5107:
        -: 5108:// Controls whether events will be forwarded by the repeater to the
        -: 5109:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5110:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5111:  return repeater_->forwarding_enabled();
    %%%%%: 5111-block  0
call    0 never executed
        -: 5112:}
        -: 5113:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5114:void TestEventListeners::SuppressEventForwarding() {
    #####: 5115:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5115-block  0
call    0 never executed
    #####: 5116:}
        -: 5117:
        -: 5118:// class UnitTest
        -: 5119:
        -: 5120:// Gets the singleton UnitTest object.  The first time this method is
        -: 5121:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5122:// calls will return the same object.
        -: 5123://
        -: 5124:// We don't protect this under mutex_ as a user is not supposed to
        -: 5125:// call this before main() starts, from which point on the return
        -: 5126:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 262 returned 100% blocks executed 82%
      262: 5127:UnitTest* UnitTest::GetInstance() {
        -: 5128:  // CodeGear C++Builder insists on a public destructor for the
        -: 5129:  // default implementation.  Use this implementation to keep good OO
        -: 5130:  // design with private destructor.
        -: 5131:
        -: 5132:#if defined(__BORLANDC__)
        -: 5133:  static UnitTest* const instance = new UnitTest;
        -: 5134:  return instance;
        -: 5135:#else
      262: 5136:  static UnitTest instance;
      262: 5136-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 261
        1: 5136-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5136-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5136-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5136-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5136-block  5
call   12 never executed
      262: 5137:  return &instance;
      262: 5137-block  0
      262: 5137-block  1
        -: 5138:#endif  // defined(__BORLANDC__)
        -: 5139:}
        -: 5140:
        -: 5141:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5142:int UnitTest::successful_test_suite_count() const {
    #####: 5143:  return impl()->successful_test_suite_count();
    %%%%%: 5143-block  0
call    0 never executed
call    1 never executed
        -: 5144:}
        -: 5145:
        -: 5146:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5147:int UnitTest::failed_test_suite_count() const {
    #####: 5148:  return impl()->failed_test_suite_count();
    %%%%%: 5148-block  0
call    0 never executed
call    1 never executed
        -: 5149:}
        -: 5150:
        -: 5151:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5152:int UnitTest::total_test_suite_count() const {
    #####: 5153:  return impl()->total_test_suite_count();
    %%%%%: 5153-block  0
call    0 never executed
call    1 never executed
        -: 5154:}
        -: 5155:
        -: 5156:// Gets the number of all test suites that contain at least one test
        -: 5157:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5158:int UnitTest::test_suite_to_run_count() const {
        2: 5159:  return impl()->test_suite_to_run_count();
        2: 5159-block  0
call    0 returned 2
call    1 returned 2
        -: 5160:}
        -: 5161:
        -: 5162://  Legacy API is deprecated but still available
        -: 5163:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5164:int UnitTest::successful_test_case_count() const {
    #####: 5165:  return impl()->successful_test_suite_count();
    %%%%%: 5165-block  0
call    0 never executed
call    1 never executed
        -: 5166:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5167:int UnitTest::failed_test_case_count() const {
    #####: 5168:  return impl()->failed_test_suite_count();
    %%%%%: 5168-block  0
call    0 never executed
call    1 never executed
        -: 5169:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5170:int UnitTest::total_test_case_count() const {
    #####: 5171:  return impl()->total_test_suite_count();
    %%%%%: 5171-block  0
call    0 never executed
call    1 never executed
        -: 5172:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5173:int UnitTest::test_case_to_run_count() const {
    #####: 5174:  return impl()->test_suite_to_run_count();
    %%%%%: 5174-block  0
call    0 never executed
call    1 never executed
        -: 5175:}
        -: 5176:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5177:
        -: 5178:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5179:int UnitTest::successful_test_count() const {
        1: 5180:  return impl()->successful_test_count();
        1: 5180-block  0
call    0 returned 1
call    1 returned 1
        -: 5181:}
        -: 5182:
        -: 5183:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5184:int UnitTest::skipped_test_count() const {
        1: 5185:  return impl()->skipped_test_count();
        1: 5185-block  0
call    0 returned 1
call    1 returned 1
        -: 5186:}
        -: 5187:
        -: 5188:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5189:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5189-block  0
call    0 never executed
call    1 never executed
        -: 5190:
        -: 5191:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5192:int UnitTest::reportable_disabled_test_count() const {
        1: 5193:  return impl()->reportable_disabled_test_count();
        1: 5193-block  0
call    0 returned 1
call    1 returned 1
        -: 5194:}
        -: 5195:
        -: 5196:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5197:int UnitTest::disabled_test_count() const {
    #####: 5198:  return impl()->disabled_test_count();
    %%%%%: 5198-block  0
call    0 never executed
call    1 never executed
        -: 5199:}
        -: 5200:
        -: 5201:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5202:int UnitTest::reportable_test_count() const {
    #####: 5203:  return impl()->reportable_test_count();
    %%%%%: 5203-block  0
call    0 never executed
call    1 never executed
        -: 5204:}
        -: 5205:
        -: 5206:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5207:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5207-block  0
call    0 never executed
call    1 never executed
        -: 5208:
        -: 5209:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5210:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5210-block  0
call    0 returned 2
call    1 returned 2
        -: 5211:
        -: 5212:// Gets the time of the test program start, in ms from the start of the
        -: 5213:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5214:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5215:  return impl()->start_timestamp();
    %%%%%: 5215-block  0
call    0 never executed
call    1 never executed
        -: 5216:}
        -: 5217:
        -: 5218:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5219:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5220:  return impl()->elapsed_time();
        1: 5220-block  0
call    0 returned 1
call    1 returned 1
        -: 5221:}
        -: 5222:
        -: 5223:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5224:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5225:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5225-block  0
call    0 returned 1
call    1 returned 1
        -: 5226:
        -: 5227:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5228:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5229:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5229-block  0
call    0 never executed
call    1 never executed
        -: 5230:
        -: 5231:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5232:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5233:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5234:  return impl()->GetTestSuite(i);
    %%%%%: 5234-block  0
call    0 never executed
call    1 never executed
        -: 5235:}
        -: 5236:
        -: 5237://  Legacy API is deprecated but still available
        -: 5238:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5239:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5240:  return impl()->GetTestCase(i);
    %%%%%: 5240-block  0
call    0 never executed
call    1 never executed
        -: 5241:}
        -: 5242:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5243:
        -: 5244:// Returns the TestResult containing information on test failures and
        -: 5245:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5246:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5247:  return *impl()->ad_hoc_test_result();
    %%%%%: 5247-block  0
call    0 never executed
call    1 never executed
        -: 5248:}
        -: 5249:
        -: 5250:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5251:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5252:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5253:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5253-block  0
call    0 never executed
call    1 never executed
        -: 5254:}
        -: 5255:
        -: 5256:// Returns the list of event listeners that can be used to track events
        -: 5257:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 19 returned 100% blocks executed 100%
       19: 5258:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
       19: 5258-block  0
call    0 returned 19
call    1 returned 19
        -: 5259:
        -: 5260:// Registers and returns a global test environment.  When a test
        -: 5261:// program is run, all global test environments will be set-up in the
        -: 5262:// order they were registered.  After all tests in the program have
        -: 5263:// finished, all global test environments will be torn-down in the
        -: 5264:// *reverse* order they were registered.
        -: 5265://
        -: 5266:// The UnitTest object takes ownership of the given environment.
        -: 5267://
        -: 5268:// We don't protect this under mutex_, as we only support calling it
        -: 5269:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5270:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5271:  if (env == nullptr) {
    %%%%%: 5271-block  0
branch  0 never executed
branch  1 never executed
    #####: 5272:    return nullptr;
    %%%%%: 5272-block  0
        -: 5273:  }
        -: 5274:
    #####: 5275:  impl_->environments().push_back(env);
    %%%%%: 5275-block  0
call    0 never executed
call    1 never executed
    #####: 5276:  return env;
        -: 5277:}
        -: 5278:
        -: 5279:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5280:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5281:// this to report their results.  The user code should use the
        -: 5282:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5283:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5284:                                 const char* file_name, int line_number,
        -: 5285:                                 const std::string& message,
        -: 5286:                                 const std::string& os_stack_trace)
        -: 5287:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5288:  Message msg;
    %%%%%: 5288-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5288-block  1
call    4 never executed
    #####: 5289:  msg << message;
    %%%%%: 5289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5290:
    #####: 5291:  internal::MutexLock lock(&mutex_);
    %%%%%: 5291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5291-block  1
call    4 never executed
    #####: 5292:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5292-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5293:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5293-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5293-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5294:
    #####: 5295:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5295-block  1
call    3 never executed
    %%%%%: 5295-block  2
branch  4 never executed
branch  5 never executed
    #####: 5296:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5296-block  1
call    3 never executed
    #####: 5297:      msg << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5298:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5298-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5298-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5298-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5298-block  3
call    9 never executed
    $$$$$: 5298-block  4
call   10 never executed
    $$$$$: 5298-block  5
    #####: 5299:          << trace.message;
    %%%%%: 5299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5300:    }
        -: 5301:  }
        -: 5302:
    #####: 5303:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5303-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5303-block  2
    %%%%%: 5303-block  3
    %%%%%: 5303-block  4
branch  6 never executed
branch  7 never executed
    #####: 5304:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5304-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5305:  }
        -: 5306:
        -: 5307:  const TestPartResult result = TestPartResult(
    #####: 5308:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5308-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5308-block  2
call    7 never executed
    $$$$$: 5308-block  3
    $$$$$: 5308-block  4
call    8 never executed
    #####: 5309:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5310:      result);
    %%%%%: 5310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5311:
    #####: 5312:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5312-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5312-block  1
branch  2 never executed
branch  3 never executed
        -: 5313:      result_type != TestPartResult::kSkip) {
        -: 5314:    // gtest_break_on_failure takes precedence over
        -: 5315:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5316:    // in the code (perhaps in order to use Google Test assertions
        -: 5317:    // with another testing framework) and specify the former on the
        -: 5318:    // command line for debugging.
    #####: 5319:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5319-block  0
branch  0 never executed
branch  1 never executed
        -: 5320:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5321:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5322:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5323:      // the --gtest_catch_exceptions flags are specified.
        -: 5324:      DebugBreak();
        -: 5325:#elif (!defined(__native_client__)) &&            \
        -: 5326:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5327:     (defined(__x86_64__) || defined(__i386__)))
        -: 5328:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5329:      asm("int3");
    %%%%%: 5329-block  0
call    0 never executed
        -: 5330:#else
        -: 5331:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5332:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5333:      // portability: some debuggers don't correctly trap abort().
        -: 5334:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5335:#endif  // GTEST_OS_WINDOWS
    #####: 5336:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5336-block  0
branch  0 never executed
branch  1 never executed
        -: 5337:#if GTEST_HAS_EXCEPTIONS
    #####: 5338:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5338-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5338-block  1
call    4 never executed
    $$$$$: 5338-block  2
call    5 never executed
        -: 5339:#else
        -: 5340:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5341:      // that cannot be suppressed in VC 7.1 or below.
        -: 5342:      exit(1);
        -: 5343:#endif
        -: 5344:    }
        -: 5345:  }
    #####: 5346:}
        -: 5347:
        -: 5348:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5349:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5350:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5351:// when invoked elsewhere.  If the result already contains a property with
        -: 5352:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5353:void UnitTest::RecordProperty(const std::string& key,
        -: 5354:                              const std::string& value) {
    #####: 5355:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5355-block  1
call    4 never executed
    $$$$$: 5355-block  2
call    5 never executed
    #####: 5356:}
        -: 5357:
        -: 5358:// Runs all tests in this UnitTest object and prints the result.
        -: 5359:// Returns 0 if successful, or 1 otherwise.
        -: 5360://
        -: 5361:// We don't protect this under mutex_, as we only support calling it
        -: 5362:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5363:int UnitTest::Run() {
        -: 5364:  const bool in_death_test_child_process =
        1: 5365:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        1: 5365-block  0
call    0 returned 1
        -: 5366:
        -: 5367:  // Google Test implements this protocol for catching that a test
        -: 5368:  // program exits before returning control to Google Test:
        -: 5369:  //
        -: 5370:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5371:  //      is specified by the environment variable
        -: 5372:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5373:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5374:  //
        -: 5375:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5376:  // running a Google-Test-based test program and check the existence
        -: 5377:  // of the file at the end of the test execution to see if it has
        -: 5378:  // exited prematurely.
        -: 5379:
        -: 5380:  // If we are in the child process of a death test, don't
        -: 5381:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5382:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5383:  // the file upon entering/leaving this function.  If the program
        -: 5384:  // somehow exits before this function has a chance to return, the
        -: 5385:  // premature-exit file will be left undeleted, causing a test runner
        -: 5386:  // that understands the premature-exit-file protocol to report the
        -: 5387:  // test as having failed.
        -: 5388:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5389:      in_death_test_child_process
        -: 5390:          ? nullptr
       1*: 5391:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5391-block  0
        1: 5391-block  1
call    2 returned 1
        1: 5391-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5391-block  3
call    6 never executed
        -: 5392:
        -: 5393:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5394:  // used for the duration of the program.
        1: 5395:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5395-block  0
call    0 returned 1
call    1 returned 1
        -: 5396:
        -: 5397:#if GTEST_OS_WINDOWS
        -: 5398:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5399:  // tests or this is executing in the context of death test child
        -: 5400:  // process. In either case the user does not want to see pop-up dialogs
        -: 5401:  // about crashes - they are expected.
        -: 5402:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5403:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5404:    // SetErrorMode doesn't exist on CE.
        -: 5405:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5406:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5407:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5408:
        -: 5409:#if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5410:    // Death test children can be terminated with _abort().  On Windows,
        -: 5411:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5412:    // abort message to go to stderr instead.
        -: 5413:    _set_error_mode(_OUT_TO_STDERR);
        -: 5414:#endif
        -: 5415:
        -: 5416:#if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5417:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5418:    // offering a choice to debug the aborted program. We need to suppress
        -: 5419:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5420:    // executed. Google Test will notify the user of any unexpected
        -: 5421:    // failure via stderr.
        -: 5422:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5423:      _set_abort_behavior(
        -: 5424:          0x0,                                    // Clear the following flags:
        -: 5425:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5426:
        -: 5427:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5428:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5429:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5430:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5431:    if (!IsDebuggerPresent()) {
        -: 5432:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5433:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5434:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5435:    }
        -: 5436:#endif
        -: 5437:  }
        -: 5438:#endif  // GTEST_OS_WINDOWS
        -: 5439:
        1: 5440:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5441:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5442:             "auxiliary test code (environments or event listeners)")
       1*: 5443:             ? 0
        1: 5443-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5443-block  1
    %%%%%: 5443-block  2
        2: 5444:             : 1;
        1: 5444-block  0
call    0 returned 1
        1: 5444-block  1
        -: 5445:}
        -: 5446:
        -: 5447:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5448:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5449:const char* UnitTest::original_working_dir() const {
    #####: 5450:  return impl_->original_working_dir_.c_str();
    %%%%%: 5450-block  0
call    0 never executed
        -: 5451:}
        -: 5452:
        -: 5453:// Returns the TestSuite object for the test that's currently running,
        -: 5454:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5455:const TestSuite* UnitTest::current_test_suite() const
        -: 5456:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5457:  internal::MutexLock lock(&mutex_);
    %%%%%: 5457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5458:  return impl_->current_test_suite();
    %%%%%: 5458-block  0
call    0 never executed
    %%%%%: 5458-block  1
        -: 5459:}
        -: 5460:
        -: 5461:// Legacy API is still available but deprecated
        -: 5462:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5463:const TestCase* UnitTest::current_test_case() const
        -: 5464:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5465:  internal::MutexLock lock(&mutex_);
    %%%%%: 5465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5466:  return impl_->current_test_suite();
    %%%%%: 5466-block  0
call    0 never executed
    %%%%%: 5466-block  1
        -: 5467:}
        -: 5468:#endif
        -: 5469:
        -: 5470:// Returns the TestInfo object for the test that's currently running,
        -: 5471:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5472:const TestInfo* UnitTest::current_test_info() const
        -: 5473:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5474:  internal::MutexLock lock(&mutex_);
    %%%%%: 5474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5475:  return impl_->current_test_info();
    %%%%%: 5475-block  0
call    0 never executed
    %%%%%: 5475-block  1
        -: 5476:}
        -: 5477:
        -: 5478:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5479:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5479-block  0
call    0 never executed
        -: 5480:
        -: 5481:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5482:// value-parameterized tests and instantiate and register them.
        -: 5483:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5484:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5485:  return impl_->parameterized_test_registry();
    %%%%%: 5485-block  0
call    0 never executed
        -: 5486:}
        -: 5487:
        -: 5488:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 62%
        1: 5489:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5489-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5489-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5489-block  2
    $$$$$: 5489-block  3
call    7 never executed
    $$$$$: 5489-block  4
call    8 never executed
        -: 5490:
        -: 5491:// Destructor of UnitTest.
       1*: 5492:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5492:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5492-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        1: 5492:UnitTest::~UnitTest() { delete impl_; }
        1: 5492-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5492-block  1
call    2 returned 1
        1: 5492-block  2
call    3 returned 1
------------------
        -: 5493:
        -: 5494:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5495:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5496:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5497:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5498:  internal::MutexLock lock(&mutex_);
    %%%%%: 5498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5498-block  1
call    3 never executed
    $$$$$: 5498-block  2
call    4 never executed
    #####: 5499:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5499-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5500:}
        -: 5501:
        -: 5502:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5503:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5504:  internal::MutexLock lock(&mutex_);
    %%%%%: 5504-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5504-block  1
call    4 never executed
    #####: 5505:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5505-block  1
call    3 never executed
    #####: 5506:}
        -: 5507:
        -: 5508:namespace internal {
        -: 5509:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 44%
        1: 5510:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 5511:    : parent_(parent),
        -: 5512:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5513:          default_global_test_part_result_reporter_(this),
        -: 5514:      default_per_thread_test_part_result_reporter_(this),
        -: 5515:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5516:          &default_global_test_part_result_reporter_),
        -: 5517:      per_thread_test_part_result_reporter_(
        -: 5518:          &default_per_thread_test_part_result_reporter_),
        -: 5519:      parameterized_test_registry_(),
        -: 5520:      parameterized_tests_registered_(false),
        -: 5521:      last_death_test_suite_(-1),
        -: 5522:      current_test_suite_(nullptr),
        -: 5523:      current_test_info_(nullptr),
        -: 5524:      ad_hoc_test_result_(),
        -: 5525:      os_stack_trace_getter_(nullptr),
        -: 5526:      post_flag_parse_init_performed_(false),
        -: 5527:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5528:      random_(0),       // Will be reseeded before first use.
        -: 5529:      start_timestamp_(0),
        -: 5530:      elapsed_time_(0),
        -: 5531:#if GTEST_HAS_DEATH_TEST
        1: 5532:      death_test_factory_(new DefaultDeathTestFactory),
        1: 5532-block  0
call    0 returned 1
        -: 5533:#endif
        -: 5534:      // Will be overridden by the flag before first use.
        2: 5535:      catch_exceptions_(false) {
        1: 5535-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5535-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5535-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5535-block  3
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1: 5535-block  4
call   21 returned 1
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
    $$$$$: 5535-block  5
    $$$$$: 5535-block  6
call   30 never executed
    $$$$$: 5535-block  7
call   31 never executed
    $$$$$: 5535-block  8
call   32 never executed
    $$$$$: 5535-block  9
call   33 never executed
    $$$$$: 5535-block 10
call   34 never executed
    $$$$$: 5535-block 11
call   35 never executed
    $$$$$: 5535-block 12
call   36 never executed
    $$$$$: 5535-block 13
call   37 never executed
    $$$$$: 5535-block 14
call   38 never executed
    $$$$$: 5535-block 15
call   39 never executed
    $$$$$: 5535-block 16
call   40 never executed
    $$$$$: 5535-block 17
call   41 never executed
    $$$$$: 5535-block 18
call   42 never executed
    $$$$$: 5535-block 19
call   43 never executed
    $$$$$: 5535-block 20
call   44 never executed
    $$$$$: 5535-block 21
call   45 never executed
        1: 5536:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5536-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5536-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5537:}
        1: 5537-block  0
        -: 5538:
        2: 5539:UnitTestImpl::~UnitTestImpl() {
        -: 5540:  // Deletes every TestSuite.
        1: 5541:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5542:
        -: 5543:  // Deletes every Environment.
        1: 5544:  ForEach(environments_, internal::Delete<Environment>);
        -: 5545:
        1: 5546:  delete os_stack_trace_getter_;
        2: 5547:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
        1: 5539:UnitTestImpl::~UnitTestImpl() {
        -: 5540:  // Deletes every TestSuite.
        -: 5541:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5542:
        -: 5543:  // Deletes every Environment.
        -: 5544:  ForEach(environments_, internal::Delete<Environment>);
        -: 5545:
        -: 5546:  delete os_stack_trace_getter_;
        1: 5547:}
        1: 5547-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        1: 5539:UnitTestImpl::~UnitTestImpl() {
        1: 5539-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
        -: 5540:  // Deletes every TestSuite.
        1: 5541:  ForEach(test_suites_, internal::Delete<TestSuite>);
        1: 5541-block  0
call    0 returned 1
        -: 5542:
        -: 5543:  // Deletes every Environment.
        1: 5544:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
        -: 5545:
        1: 5546:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5546-block  0
call    2 returned 1
        1: 5547:}
------------------
        -: 5548:
        -: 5549:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5550:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5551:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5552:// otherwise.  If the result already contains a property with the same key,
        -: 5553:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5554:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5555:  std::string xml_element;
    %%%%%: 5555-block  0
call    0 never executed
    %%%%%: 5555-block  1
call    1 never executed
    $$$$$: 5555-block  2
call    2 never executed
        -: 5556:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5557:
    #####: 5558:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5559:    xml_element = "testcase";
    %%%%%: 5559-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5560:    test_result = &(current_test_info_->result_);
    %%%%%: 5560-block  0
    #####: 5561:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5561-block  0
branch  0 never executed
branch  1 never executed
    #####: 5562:    xml_element = "testsuite";
    %%%%%: 5562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5563:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5563-block  0
        -: 5564:  } else {
    #####: 5565:    xml_element = "testsuites";
    %%%%%: 5565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5566:    test_result = &ad_hoc_test_result_;
    %%%%%: 5566-block  0
        -: 5567:  }
    #####: 5568:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5569:}
        -: 5570:
        -: 5571:#if GTEST_HAS_DEATH_TEST
        -: 5572:// Disables event forwarding if the control is currently in a death test
        -: 5573:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5574:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5575:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5575-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5576:    listeners()->SuppressEventForwarding();
    %%%%%: 5576-block  0
call    0 never executed
call    1 never executed
        1: 5577:}
        -: 5578:#endif  // GTEST_HAS_DEATH_TEST
        -: 5579:
        -: 5580:// Initializes event listeners performing XML output as specified by
        -: 5581:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 5582:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5583:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5583-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5583-block  1
call    3 returned 1
    $$$$$: 5583-block  2
call    4 never executed
        1: 5584:  if (output_format == "xml") {
        1: 5584-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5585:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5585-block  0
call    0 never executed
    %%%%%: 5585-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5586:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5586-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5586-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5586-block  2
call   10 never executed
    $$$$$: 5586-block  3
call   11 never executed
    $$$$$: 5586-block  4
call   12 never executed
    $$$$$: 5586-block  5
        1: 5587:  } else if (output_format == "json") {
        1: 5587-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5588:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5588-block  0
call    0 never executed
    %%%%%: 5588-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5589:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5589-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5589-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5589-block  2
call   10 never executed
    $$$$$: 5589-block  3
call   11 never executed
    $$$$$: 5589-block  4
call   12 never executed
    $$$$$: 5589-block  5
        1: 5590:  } else if (output_format != "") {
        1: 5590-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5591:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5591-block  1
call    3 never executed
    %%%%%: 5591-block  2
call    4 never executed
    $$$$$: 5591-block  3
call    5 never executed
    $$$$$: 5591-block  4
    #####: 5592:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5592-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5592-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5593:  }
        1: 5594:}
        -: 5595:
        -: 5596:#if GTEST_CAN_STREAM_RESULTS_
        -: 5597:// Initializes event listeners for streaming test results in string form.
        -: 5598:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 12%
        1: 5599:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 5600:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        1: 5601:  if (!target.empty()) {
        1: 5601-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5602:    const size_t pos = target.find(':');
    %%%%%: 5602-block  0
call    0 never executed
    #####: 5603:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5604:      listeners()->Append(
    %%%%%: 5604-block  0
call    0 never executed
    %%%%%: 5604-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5605:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5605-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5605-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5605-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5605-block  3
call   12 never executed
    $$$$$: 5605-block  4
call   13 never executed
    $$$$$: 5605-block  5
    $$$$$: 5605-block  6
call   14 never executed
    $$$$$: 5605-block  7
call   15 never executed
        -: 5606:    } else {
    #####: 5607:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5607-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5607-block  1
call    2 never executed
    $$$$$: 5607-block  2
call    3 never executed
    #####: 5608:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5608-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5608-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5609:    }
        -: 5610:  }
        1: 5611:}
        1: 5611-block  0
        -: 5612:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5613:
        -: 5614:// Performs initialization dependent upon flag values obtained in
        -: 5615:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5616:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5617:// this function is also called from RunAllTests.  Since this function can be
        -: 5618:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 67%
        2: 5619:void UnitTestImpl::PostFlagParsingInit() {
        -: 5620:  // Ensures that this function does not execute more than once.
        2: 5621:  if (!post_flag_parse_init_performed_) {
        2: 5621-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5622:    post_flag_parse_init_performed_ = true;
        -: 5623:
        -: 5624:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5625:    // Register to send notifications about key process state changes.
        -: 5626:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5627:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5628:
        -: 5629:#if GTEST_HAS_DEATH_TEST
        1: 5630:    InitDeathTestSubprocessControlInfo();
        1: 5630-block  0
call    0 returned 1
        1: 5631:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5632:#endif  // GTEST_HAS_DEATH_TEST
        -: 5633:
        -: 5634:    // Registers parameterized tests. This makes parameterized tests
        -: 5635:    // available to the UnitTest reflection API without running
        -: 5636:    // RUN_ALL_TESTS.
        1: 5637:    RegisterParameterizedTests();
call    0 returned 1
        -: 5638:
        -: 5639:    // Configures listeners for XML output. This makes it possible for users
        -: 5640:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5641:    ConfigureXmlOutput();
call    0 returned 1
        -: 5642:
        1: 5643:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5644:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5644-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5645:    }
        -: 5646:
        -: 5647:#if GTEST_CAN_STREAM_RESULTS_
        -: 5648:    // Configures listeners for streaming test results to the specified server.
        1: 5649:    ConfigureStreamingOutput();
        1: 5649-block  0
call    0 returned 1
        -: 5650:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5651:
        -: 5652:#if GTEST_HAS_ABSL
        -: 5653:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5654:      absl::FailureSignalHandlerOptions options;
        -: 5655:      absl::InstallFailureSignalHandler(options);
        -: 5656:    }
        -: 5657:#endif  // GTEST_HAS_ABSL
        -: 5658:  }
        2: 5659:}
        -: 5660:
        -: 5661:// A predicate that checks the name of a TestSuite against a known
        -: 5662:// value.
        -: 5663://
        -: 5664:// This is used for implementation of the UnitTest class only.  We put
        -: 5665:// it in the anonymous namespace to prevent polluting the outer
        -: 5666:// namespace.
        -: 5667://
        -: 5668:// TestSuiteNameIs is copyable.
        -: 5669:class TestSuiteNameIs {
        -: 5670: public:
        -: 5671:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 18 returned 100% blocks executed 100%
       18: 5672:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
       18: 5672-block  0
call    0 returned 18
        -: 5673:
        -: 5674:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 17 returned 100% blocks executed 88%
       17: 5675:  bool operator()(const TestSuite* test_suite) const {
      34*: 5676:    return test_suite != nullptr &&
       17: 5676-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17: 5676-block  1
    %%%%%: 5676-block  2
       34: 5677:           strcmp(test_suite->name(), name_.c_str()) == 0;
       17: 5677-block  0
call    0 returned 17
call    1 returned 17
branch  2 taken 17 (fallthrough)
branch  3 taken 0
       17: 5677-block  1
        -: 5678:  }
        -: 5679:
        -: 5680: private:
        -: 5681:  std::string name_;
        -: 5682:};
        -: 5683:
        -: 5684:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5685:// exist, creates one and returns it.  It's the CALLER'S
        -: 5686:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5687:// TESTS ARE NOT SHUFFLED.
        -: 5688://
        -: 5689:// Arguments:
        -: 5690://
        -: 5691://   test_suite_name: name of the test suite
        -: 5692://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5693://                    this is not a typed or a type-parameterized test suite.
        -: 5694://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5695://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 18 returned 100% blocks executed 48%
       18: 5696:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5697:    const char* test_suite_name, const char* type_param,
        -: 5698:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5699:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5700:  // Can we find a TestSuite with the given name?
        -: 5701:  const auto test_suite =
       18: 5702:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
       18: 5702-block  0
call    0 returned 18
call    1 returned 18
    $$$$$: 5702-block  1
    $$$$$: 5702-block  2
       36: 5703:                   TestSuiteNameIs(test_suite_name));
       18: 5703-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18: 5703-block  1
call    4 returned 18
branch  5 taken 18 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 18
branch  8 taken 18 (fallthrough)
branch  9 taken 0 (throw)
       18: 5703-block  2
call   10 returned 18
call   11 returned 18
call   12 returned 18
    $$$$$: 5703-block  3
call   13 never executed
    $$$$$: 5703-block  4
    $$$$$: 5703-block  5
call   14 never executed
    $$$$$: 5703-block  6
    $$$$$: 5703-block  7
call   15 never executed
    $$$$$: 5703-block  8
        -: 5704:
       18: 5705:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18: 5705-block  0
branch  4 taken 17 (fallthrough)
branch  5 taken 1
       17: 5705-block  1
call    6 returned 17
    $$$$$: 5705-block  2
        -: 5706:
        -: 5707:  // No.  Let's create one.
        -: 5708:  auto* const new_test_suite =
        1: 5709:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        1: 5709-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5709-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5709-block  2
call    6 never executed
        -: 5710:
        2: 5711:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        1: 5711-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5711-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 5711-block  2
    $$$$$: 5711-block  3
    $$$$$: 5711-block  4
call    8 never executed
        -: 5712:  // Is this a death test suite?
        1: 5713:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5713-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5713-block  1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    $$$$$: 5713-block  2
call   11 never executed
    $$$$$: 5713-block  3
    $$$$$: 5713-block  4
call   12 never executed
    $$$$$: 5713-block  5
        -: 5714:    // Yes.  Inserts the test suite after the last death test suite
        -: 5715:    // defined so far.  This only works when the test suites haven't
        -: 5716:    // been shuffled.  Otherwise we may end up running a death test
        -: 5717:    // after a non-death test.
    #####: 5718:    ++last_death_test_suite_;
    #####: 5719:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
call    0 never executed
    $$$$$: 5719-block  0
    $$$$$: 5719-block  1
    #####: 5720:                        new_test_suite);
    %%%%%: 5720-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5720-block  1
    $$$$$: 5720-block  2
        -: 5721:  } else {
        -: 5722:    // No.  Appends to the end of the list.
        1: 5723:    test_suites_.push_back(new_test_suite);
        1: 5723-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5724:  }
        -: 5725:
        1: 5726:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5726-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5726-block  1
        1: 5727:  return new_test_suite;
        1: 5727-block  0
call    0 returned 1
        -: 5728:}
        -: 5729:
        -: 5730:// Helpers for setting up / tearing down the given environment.  They
        -: 5731:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5732:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5732-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5733:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5733-block  0
call    0 never executed
        -: 5734:
        -: 5735:// Runs all tests in this UnitTest object, prints the result, and
        -: 5736:// returns true if all tests are successful.  If any exception is
        -: 5737:// thrown during a test, the test is considered to be failed, but the
        -: 5738:// rest of the tests will still be run.
        -: 5739://
        -: 5740:// When parameterized tests are enabled, it expands and registers
        -: 5741:// parameterized tests first in RegisterParameterizedTests().
        -: 5742:// All other functions called from RunAllTests() may safely assume that
        -: 5743:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 52%
        1: 5744:bool UnitTestImpl::RunAllTests() {
        -: 5745:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5746:  // called.
        1: 5747:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5747-block  0
call    0 returned 1
        -: 5748:
        -: 5749:  // Do not run any test if the --help flag was specified.
       1*: 5750:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5750-block  0
        -: 5751:
        -: 5752:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5753:  // user didn't call InitGoogleTest.
        1: 5754:  PostFlagParsingInit();
        1: 5754-block  0
call    0 returned 1
        -: 5755:
        -: 5756:  // Even if sharding is not on, test runners may want to use the
        -: 5757:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5758:  // protocol.
        1: 5759:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5760:
        -: 5761:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5762:  // death test.
        1: 5763:  bool in_subprocess_for_death_test = false;
        -: 5764:
        -: 5765:#if GTEST_HAS_DEATH_TEST
        1: 5766:  in_subprocess_for_death_test =
        1: 5767:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
        -: 5768:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5769:  if (in_subprocess_for_death_test) {
        -: 5770:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5771:  }
        -: 5772:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5773:#endif  // GTEST_HAS_DEATH_TEST
        -: 5774:
        1: 5775:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5776:                                        in_subprocess_for_death_test);
        -: 5777:
        -: 5778:  // Compares the full test names with the filter to decide which
        -: 5779:  // tests to run.
        -: 5780:  const bool has_tests_to_run =
       1*: 5781:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5781-block  0
        1: 5781-block  1
        1: 5781-block  2
call    2 returned 1
        1: 5782:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5783:
        -: 5784:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5785:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5786:    // This must be called *after* FilterTests() has been called.
    #####: 5787:    ListTestsMatchingFilter();
    %%%%%: 5787-block  0
call    0 never executed
    #####: 5788:    return true;
        -: 5789:  }
        -: 5790:
        1: 5791:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5791-block  0
call    0 returned 1
        -: 5792:
        -: 5793:  // True if and only if at least one test has failed.
        1: 5794:  bool failed = false;
        -: 5795:
        1: 5796:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5797:
        1: 5798:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5799:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5800:
        -: 5801:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5802:  // when we are inside the subprocess of a death test.
       1*: 5803:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5803-block  0
        1: 5803-block  1
        -: 5804:
        -: 5805:  // Repeats forever if the repeat count is negative.
        1: 5806:  const bool gtest_repeat_forever = repeat < 0;
        -: 5807:
        -: 5808:  // Should test environments be set up and torn down for each repeat, or only
        -: 5809:  // set up on the first and torn down on the last iteration? If there is no
        -: 5810:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5811:  // environments to avoid leaks in case one of the environments is using
        -: 5812:  // resources that are external to this process. Without this check there would
        -: 5813:  // be no way to clean up those external resources automatically.
        1: 5814:  const bool recreate_environments_when_repeating =
       1*: 5815:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5815-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5815-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5815-block  2
        1: 5815-block  3
        -: 5816:      gtest_repeat_forever;
        -: 5817:
        2: 5818:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5818-block  0
        2: 5818-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5818-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5818-block  3
        -: 5819:    // We want to preserve failures generated by ad-hoc test
        -: 5820:    // assertions executed before RUN_ALL_TESTS().
        1: 5821:    ClearNonAdHocTestResult();
        1: 5821-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5822:
        1: 5823:    Timer timer;
        1: 5823-block  0
call    0 returned 1
        -: 5824:
        -: 5825:    // Shuffles test suites and tests if requested.
        1: 5826:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5826-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5827:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5827-block  0
call    0 never executed
call    1 never executed
        -: 5828:      // This should be done before calling OnTestIterationStart(),
        -: 5829:      // such that a test event listener can see the actual test order
        -: 5830:      // in the event.
    #####: 5831:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5832:    }
        -: 5833:
        -: 5834:    // Tells the unit test event listeners that the tests are about to start.
        1: 5835:    repeater->OnTestIterationStart(*parent_, i);
        1: 5835-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5836:
        -: 5837:    // Runs each test suite if there is at least one test to run.
        1: 5838:    if (has_tests_to_run) {
        1: 5838-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5839:      // Sets up all environments beforehand. If test environments aren't
        -: 5840:      // recreated for each iteration, only do so on the first iteration.
       1*: 5841:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5841-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5841-block  1
branch  2 never executed
branch  3 never executed
        1: 5842:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5842-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5843:        ForEach(environments_, SetUpEnvironment);
        1: 5843-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5844:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5844-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5845:      }
        -: 5846:
        -: 5847:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5848:      // during global set-up.
        1: 5849:      if (Test::IsSkipped()) {
        1: 5849-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5849-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5850:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5851:        // emitted by default.
        -: 5852:        TestResult& test_result =
    #####: 5853:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5853-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5853-block  1
call    3 never executed
    #####: 5854:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5854-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5854-block  1
        -: 5855:          const TestPartResult& test_part_result =
    #####: 5856:              test_result.GetTestPartResult(j);
    %%%%%: 5856-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5857:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5858:            const std::string& result = test_part_result.message();
    %%%%%: 5858-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5858-block  1
call    5 never executed
    %%%%%: 5858-block  2
call    6 never executed
    $$$$$: 5858-block  3
call    7 never executed
    $$$$$: 5858-block  4
    $$$$$: 5858-block  5
call    8 never executed
    #####: 5859:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5860:          }
        -: 5861:        }
    #####: 5862:        fflush(stdout);
    %%%%%: 5862-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 5863:      } else if (!Test::HasFatalFailure()) {
        1: 5863-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5863-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2: 5864:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5864-block  0
        2: 5864-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 5864-block  2
        -: 5865:             test_index++) {
        1: 5866:          GetMutableSuiteCase(test_index)->Run();
        1: 5866-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5866-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*: 5867:          if (GTEST_FLAG_GET(fail_fast) &&
        1: 5867-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5867-block  1
        1: 5867-block  2
        1: 5867-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5868:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5868-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5868-block  2
branch  6 never executed
branch  7 never executed
    #####: 5869:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5869-block  0
    %%%%%: 5869-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5869-block  2
    #####: 5870:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5870-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5871:            }
    #####: 5872:            break;
    %%%%%: 5872-block  0
        -: 5873:          }
        -: 5874:        }
    #####: 5875:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5875-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5875-block  1
branch  3 never executed
branch  4 never executed
        -: 5876:        // If there was a fatal failure during the global setup then we know we
        -: 5877:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5878:        // skipped to make this obvious in the output.
    #####: 5879:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5879-block  0
    %%%%%: 5879-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5879-block  2
        -: 5880:             test_index++) {
    #####: 5881:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5881-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5881-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5882:        }
        -: 5883:      }
        -: 5884:
        -: 5885:      // Tears down all environments in reverse order afterwards. If test
        -: 5886:      // environments aren't recreated for each iteration, only do so on the
        -: 5887:      // last iteration.
       1*: 5888:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5888-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5888-block  1
branch  2 never executed
branch  3 never executed
        1: 5889:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5889-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5890:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5890-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5890-block  1
    $$$$$: 5890-block  2
        -: 5891:                      TearDownEnvironment);
        1: 5892:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5892-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5893:      }
        -: 5894:    }
        -: 5895:
        1: 5896:    elapsed_time_ = timer.Elapsed();
        1: 5896-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5897:
        -: 5898:    // Tells the unit test event listener that the tests have just finished.
        1: 5899:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5899-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5900:
        -: 5901:    // Gets the result and clears it.
        1: 5902:    if (!Passed()) {
        1: 5902-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5902-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5903:      failed = true;
    %%%%%: 5903-block  0
        -: 5904:    }
        -: 5905:
        -: 5906:    // Restores the original test order after the iteration.  This
        -: 5907:    // allows the user to quickly repro a failure that happens in the
        -: 5908:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5909:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5910:    // case the user somehow changes the value of the flag somewhere
        -: 5911:    // (it's always safe to unshuffle the tests).
        1: 5912:    UnshuffleTests();
        1: 5912-block  0
call    0 returned 1
        -: 5913:
        1: 5914:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5915:      // Picks a new random seed for each iteration.
    #####: 5916:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5916-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5916-block  1
        -: 5917:    }
        -: 5918:  }
        -: 5919:
        1: 5920:  repeater->OnTestProgramEnd(*parent_);
        1: 5920-block  0
call    0 returned 1
        -: 5921:
        1: 5922:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5923:    ColoredPrintf(
    %%%%%: 5923-block  0
call    0 never executed
        -: 5924:        GTestColor::kRed,
        -: 5925:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5926:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5927:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5928:        " will start to enforce the valid usage. "
        -: 5929:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5930:#if GTEST_FOR_GOOGLE_
        -: 5931:    ColoredPrintf(GTestColor::kRed,
        -: 5932:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5933:#endif  // GTEST_FOR_GOOGLE_
        -: 5934:  }
        -: 5935:
        1: 5936:  return !failed;
        1: 5936-block  0
        -: 5937:}
        -: 5938:
        -: 5939:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5940:// if the variable is present. If a file already exists at this location, this
        -: 5941:// function will write over it. If the variable is present, but the file cannot
        -: 5942:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 5943:void WriteToShardStatusFileIfNeeded() {
        1: 5944:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5944-block  0
call    0 returned 1
        1: 5945:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5946:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5946-block  0
call    0 never executed
    #####: 5947:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5948:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5948-block  0
call    0 never executed
        -: 5949:                    "Could not write to the test shard status file \"%s\" "
        -: 5950:                    "specified by the %s environment variable.\n",
        -: 5951:                    test_shard_file, kTestShardStatusFile);
    #####: 5952:      fflush(stdout);
call    0 never executed
    #####: 5953:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5954:    }
    #####: 5955:    fclose(file);
    %%%%%: 5955-block  0
call    0 never executed
        -: 5956:  }
        1: 5957:}
        -: 5958:
        -: 5959:// Checks whether sharding is enabled by examining the relevant
        -: 5960:// environment variable values. If the variables are present,
        -: 5961:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5962:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5963:// disabled because it must only be applied to the original test
        -: 5964:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 5965:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 5966:                 bool in_subprocess_for_death_test) {
        2: 5967:  if (in_subprocess_for_death_test) {
        2: 5967-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5968:    return false;
    %%%%%: 5968-block  0
        -: 5969:  }
        -: 5970:
        2: 5971:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5971-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5972:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5972-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5973:
        2: 5974:  if (total_shards == -1 && shard_index == -1) {
        2: 5974-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5974-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5975:    return false;
        2: 5975-block  0
    #####: 5976:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5976-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5976-block  1
branch  2 never executed
branch  3 never executed
    #####: 5977:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 5977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5977-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5977-block  2
    #####: 5978:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 5978-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5978-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5978-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5979:                                  << ", but have left " << kTestTotalShards
    %%%%%: 5979-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5979-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5980:                                  << " unset.\n";
    %%%%%: 5980-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5980-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5980-block  2
call    6 never executed
    #####: 5981:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5981-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5981-block  1
call    7 never executed
    $$$$$: 5981-block  2
call    8 never executed
    $$$$$: 5981-block  3
    #####: 5982:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5983:    exit(EXIT_FAILURE);
    %%%%%: 5983-block  0
call    0 never executed
    #####: 5984:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 5984-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5984-block  1
branch  2 never executed
branch  3 never executed
    #####: 5985:    const Message msg = Message()
    %%%%%: 5985-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5985-block  1
    #####: 5986:                        << "Invalid environment variables: you have "
    %%%%%: 5986-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5987:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 5987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5987-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5987-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5988:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 5988-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5988-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5988-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5988-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5988-block  4
call   12 never executed
    #####: 5989:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5989-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5989-block  1
call    7 never executed
    $$$$$: 5989-block  2
call    8 never executed
    $$$$$: 5989-block  3
    #####: 5990:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5991:    exit(EXIT_FAILURE);
    %%%%%: 5991-block  0
call    0 never executed
    #####: 5992:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 5992-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5992-block  1
branch  2 never executed
branch  3 never executed
        -: 5993:    const Message msg =
    #####: 5994:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 5994-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5994-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5994-block  2
    #####: 5995:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 5995-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5995-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5995-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5996:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 5996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5996-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5996-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5996-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5997:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 5997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5997-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5997-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5997-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5997-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5997-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 5997-block  6
call   18 never executed
    #####: 5998:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5998-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5998-block  1
call    7 never executed
    $$$$$: 5998-block  2
call    8 never executed
    $$$$$: 5998-block  3
    #####: 5999:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6000:    exit(EXIT_FAILURE);
    %%%%%: 6000-block  0
call    0 never executed
        -: 6001:  }
        -: 6002:
    #####: 6003:  return total_shards > 1;
    %%%%%: 6003-block  0
        -: 6004:}
        -: 6005:
        -: 6006:// Parses the environment variable var as an Int32. If it is unset,
        -: 6007:// returns default_val. If it is not an Int32, prints an error
        -: 6008:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6009:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6010:  const char* str_val = posix::GetEnv(var);
        4: 6010-block  0
call    0 returned 4
        4: 6011:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6012:    return default_val;
        4: 6012-block  0
        -: 6013:  }
        -: 6014:
        -: 6015:  int32_t result;
    #####: 6016:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6016-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6016-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6016-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6016-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6016-block  5
call   15 never executed
    $$$$$: 6016-block  6
        -: 6017:                  str_val, &result)) {
    #####: 6018:    exit(EXIT_FAILURE);
    %%%%%: 6018-block  0
call    0 never executed
        -: 6019:  }
    #####: 6020:  return result;
    %%%%%: 6020-block  0
        -: 6021:}
        -: 6022:
        -: 6023:// Given the total number of shards, the shard index, and the test id,
        -: 6024:// returns true if and only if the test should be run on this shard. The test id
        -: 6025:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6026:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6027:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6028:  return (test_id % total_shards) == shard_index;
    %%%%%: 6028-block  0
        -: 6029:}
        -: 6030:
        -: 6031:// Compares the name of each test with the user-specified filter to
        -: 6032:// decide whether the test should be run, then records the result in
        -: 6033:// each TestSuite and TestInfo object.
        -: 6034:// If shard_tests == true, further filters tests based on sharding
        -: 6035:// variables in the environment - see
        -: 6036:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 6037:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 63%
        1: 6038:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6039:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6040:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6040-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6040-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6040-block  2
        1: 6040-block  3
        1: 6041:                                   : -1;
        -: 6042:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6043:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6043-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6043-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6043-block  2
        1: 6043-block  3
        1: 6044:                                  : -1;
        -: 6045:
        -: 6046:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        2: 6047:      GTEST_FLAG_GET(filter));
        1: 6047-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 6047-block  1
call    4 never executed
        2: 6048:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6048-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6048-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 6048-block  2
    $$$$$: 6048-block  3
    $$$$$: 6048-block  4
call    8 never executed
        -: 6049:  // num_runnable_tests are the number of tests that will
        -: 6050:  // run across all shards (i.e., match filter and are not disabled).
        -: 6051:  // num_selected_tests are the number of tests to be run on
        -: 6052:  // this shard.
        1: 6053:  int num_runnable_tests = 0;
        1: 6054:  int num_selected_tests = 0;
        2: 6055:  for (auto* test_suite : test_suites_) {
call    0 returned 1
call    1 returned 1
        2: 6055-block  0
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 6055-block  1
call    5 returned 1
call    6 returned 1
        2: 6056:    const std::string& test_suite_name = test_suite->name();
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 6056-block  0
call    5 returned 1
        1: 6056-block  1
call    6 returned 1
    $$$$$: 6056-block  2
call    7 never executed
    $$$$$: 6056-block  3
    $$$$$: 6056-block  4
call    8 never executed
        1: 6057:    test_suite->set_should_run(false);
call    0 returned 1
        -: 6058:
       19: 6059:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
       19: 6059-block  0
call    0 returned 19
call    1 returned 19
branch  2 taken 18 (fallthrough)
branch  3 taken 1
       18: 6060:      TestInfo* const test_info = test_suite->test_info_list()[j];
       18: 6060-block  0
call    0 returned 18
call    1 returned 18
       36: 6061:      const std::string test_name(test_info->name());
call    0 returned 18
call    1 returned 18
call    2 returned 18
branch  3 taken 18 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 18
    $$$$$: 6061-block  0
    $$$$$: 6061-block  1
call    6 never executed
        -: 6062:      // A test is disabled if test suite name or test name matches
        -: 6063:      // kDisableTestFilter.
        -: 6064:      const bool is_disabled =
      36*: 6065:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 6065-block  0
branch  3 taken 18 (fallthrough)
branch  4 taken 0
    %%%%%: 6065-block  1
       18: 6065-block  2
       18: 6066:          disable_test_filter.MatchesName(test_name);
       18: 6066-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 6066-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 18
       18: 6067:      test_info->is_disabled_ = is_disabled;
        -: 6068:
        -: 6069:      const bool matches_filter =
       18: 6070:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
       18: 6070-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18: 6071:      test_info->matches_filter_ = matches_filter;
        -: 6072:
       18: 6073:      const bool is_runnable =
      18*: 6074:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
       18: 6074-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 6074-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 0
       18: 6074-block  2
branch  4 taken 18 (fallthrough)
branch  5 taken 0
       18: 6074-block  3
    %%%%%: 6074-block  4
        -: 6075:          matches_filter;
        -: 6076:
        -: 6077:      const bool is_in_another_shard =
      18*: 6078:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       18: 6078-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    %%%%%: 6078-block  1
       18: 6078-block  2
    #####: 6079:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       18: 6080:      test_info->is_in_another_shard_ = is_in_another_shard;
      18*: 6081:      const bool is_selected = is_runnable && !is_in_another_shard;
       18: 6081-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 6081-block  1
branch  2 taken 18 (fallthrough)
branch  3 taken 0
       18: 6081-block  2
    %%%%%: 6081-block  3
        -: 6082:
       18: 6083:      num_runnable_tests += is_runnable;
       18: 6084:      num_selected_tests += is_selected;
        -: 6085:
       18: 6086:      test_info->should_run_ = is_selected;
      18*: 6087:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       18: 6087-block  0
call    0 returned 18
branch  1 taken 1 (fallthrough)
branch  2 taken 17
        1: 6087-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       18: 6087-block  2
    %%%%%: 6087-block  3
       18: 6087-block  4
call    5 returned 18
        -: 6088:    }
        -: 6089:  }
        2: 6090:  return num_selected_tests;
        1: 6090-block  0
call    0 returned 1
        1: 6090-block  1
        -: 6091:}
        -: 6092:
        -: 6093:// Prints the given C-string on a single line by replacing all '\n'
        -: 6094:// characters with string "\\n".  If the output takes more than
        -: 6095:// max_length characters, only prints the first max_length characters
        -: 6096:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6097:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6098:  if (str != nullptr) {
    %%%%%: 6098-block  0
branch  0 never executed
branch  1 never executed
    #####: 6099:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6099-block  0
    %%%%%: 6099-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 6099-block  2
    #####: 6100:      if (i >= max_length) {
    %%%%%: 6100-block  0
branch  0 never executed
branch  1 never executed
    #####: 6101:        printf("...");
    %%%%%: 6101-block  0
call    0 never executed
    #####: 6102:        break;
        -: 6103:      }
    #####: 6104:      if (*str == '\n') {
    %%%%%: 6104-block  0
branch  0 never executed
branch  1 never executed
    #####: 6105:        printf("\\n");
    %%%%%: 6105-block  0
call    0 never executed
    #####: 6106:        i += 2;
        -: 6107:      } else {
    #####: 6108:        printf("%c", *str);
    %%%%%: 6108-block  0
call    0 never executed
    #####: 6109:        ++i;
        -: 6110:      }
        -: 6111:    }
        -: 6112:  }
    #####: 6113:}
        -: 6114:
        -: 6115:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6116:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6117:  // Print at most this many characters for each type/value parameter.
    #####: 6118:  const int kMaxParamLength = 250;
        -: 6119:
    #####: 6120:  for (auto* test_suite : test_suites_) {
    %%%%%: 6120-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6120-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6120-block  2
call    5 never executed
    %%%%%: 6120-block  3
call    6 never executed
    #####: 6121:    bool printed_test_suite_name = false;
        -: 6122:
    #####: 6123:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6123-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6123-block  1
    #####: 6124:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6124-block  0
call    0 never executed
call    1 never executed
    #####: 6125:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6126:        if (!printed_test_suite_name) {
    %%%%%: 6126-block  0
branch  0 never executed
branch  1 never executed
    #####: 6127:          printed_test_suite_name = true;
    #####: 6128:          printf("%s.", test_suite->name());
    %%%%%: 6128-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6129:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6130:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6131:            // We print the type parameter on a single line to make
        -: 6132:            // the output easy to parse by a program.
    #####: 6133:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6133-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6134:          }
    #####: 6135:          printf("\n");
    %%%%%: 6135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6136:        }
    #####: 6137:        printf("  %s", test_info->name());
    %%%%%: 6137-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6138:        if (test_info->value_param() != nullptr) {
    %%%%%: 6138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6139:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6140:          // We print the value parameter on a single line to make the
        -: 6141:          // output easy to parse by a program.
    #####: 6142:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6142-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6143:        }
    #####: 6144:        printf("\n");
    %%%%%: 6144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6145:      }
        -: 6146:    }
        -: 6147:  }
    #####: 6148:  fflush(stdout);
    %%%%%: 6148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6149:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6149-block  1
call    3 never executed
    $$$$$: 6149-block  2
call    4 never executed
    #####: 6150:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6150-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6150-block  2
    %%%%%: 6150-block  3
    %%%%%: 6150-block  4
branch  6 never executed
branch  7 never executed
    #####: 6151:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6151-block  0
call    0 never executed
    %%%%%: 6151-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6151-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6151-block  3
call    8 never executed
    $$$$$: 6151-block  4
call    9 never executed
    $$$$$: 6151-block  5
    $$$$$: 6151-block  6
call   10 never executed
    $$$$$: 6151-block  7
    #####: 6152:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6152-block  0
call    5 never executed
    $$$$$: 6152-block  1
    #####: 6153:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6153-block  0
call    3 never executed
    $$$$$: 6153-block  1
call    4 never executed
    #####: 6154:    if (output_format == "xml") {
    %%%%%: 6154-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6155:      XmlUnitTestResultPrinter(
    %%%%%: 6155-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6155-block  1
call    4 never executed
    $$$$$: 6155-block  2
call    5 never executed
    $$$$$: 6155-block  3
    #####: 6156:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6156-block  1
call    4 never executed
    $$$$$: 6156-block  2
    #####: 6157:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6158:    } else if (output_format == "json") {
    %%%%%: 6158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6159:      JsonUnitTestResultPrinter(
    %%%%%: 6159-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6159-block  1
call    4 never executed
    $$$$$: 6159-block  2
call    5 never executed
    $$$$$: 6159-block  3
    #####: 6160:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6160-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6160-block  1
call    4 never executed
    $$$$$: 6160-block  2
    #####: 6161:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6162:    }
    #####: 6163:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6163-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6163-block  2
call    7 never executed
    $$$$$: 6163-block  3
call    8 never executed
    $$$$$: 6163-block  4
    #####: 6164:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6165:  }
    #####: 6166:}
        -: 6167:
        -: 6168:// Sets the OS stack trace getter.
        -: 6169://
        -: 6170:// Does nothing if the input and the current OS stack trace getter are
        -: 6171:// the same; otherwise, deletes the old getter and makes the input the
        -: 6172:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6173:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6174:    OsStackTraceGetterInterface* getter) {
    #####: 6175:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6175-block  0
branch  0 never executed
branch  1 never executed
    #####: 6176:    delete os_stack_trace_getter_;
    %%%%%: 6176-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6176-block  1
call    2 never executed
    #####: 6177:    os_stack_trace_getter_ = getter;
    %%%%%: 6177-block  0
        -: 6178:  }
    #####: 6179:}
        -: 6180:
        -: 6181:// Returns the current OS stack trace getter if it is not NULL;
        -: 6182:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6183:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 92 returned 100% blocks executed 100%
       92: 6184:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       92: 6185:  if (os_stack_trace_getter_ == nullptr) {
       92: 6185-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 91
        -: 6186:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6187:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6188:#else
        1: 6189:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6189-block  0
call    0 returned 1
call    1 returned 1
        -: 6190:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6191:  }
        -: 6192:
       92: 6193:  return os_stack_trace_getter_;
       92: 6193-block  0
        -: 6194:}
        -: 6195:
        -: 6196:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 74 returned 100% blocks executed 83%
       74: 6197:TestResult* UnitTestImpl::current_test_result() {
       74: 6198:  if (current_test_info_ != nullptr) {
       74: 6198-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 2
       72: 6199:    return &current_test_info_->result_;
       72: 6199-block  0
        -: 6200:  }
        2: 6201:  if (current_test_suite_ != nullptr) {
        2: 6201-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6202:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6202-block  0
        -: 6203:  }
        2: 6204:  return &ad_hoc_test_result_;
        2: 6204-block  0
        -: 6205:}
        -: 6206:
        -: 6207:// Shuffles all test suites, and the tests within each test suite,
        -: 6208:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6209:void UnitTestImpl::ShuffleTests() {
        -: 6210:  // Shuffles the death test suites.
    #####: 6211:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6211-block  0
call    0 never executed
call    1 never executed
        -: 6212:
        -: 6213:  // Shuffles the non-death test suites.
    #####: 6214:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6215:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6216:
        -: 6217:  // Shuffles the tests inside each test suite.
    #####: 6218:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6218-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6218-block  1
call    5 never executed
    %%%%%: 6218-block  2
call    6 never executed
    #####: 6219:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6220:  }
    #####: 6221:}
    %%%%%: 6221-block  0
        -: 6222:
        -: 6223:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6224:void UnitTestImpl::UnshuffleTests() {
        2: 6225:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6225-block  0
        2: 6225-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -: 6226:    // Unshuffles the tests in each test suite.
        1: 6227:    test_suites_[i]->UnshuffleTests();
        1: 6227-block  0
call    0 returned 1
call    1 returned 1
        -: 6228:    // Resets the index of each test suite.
        1: 6229:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
        -: 6230:  }
        1: 6231:}
        -: 6232:
        -: 6233:// Returns the current OS stack trace as an std::string.
        -: 6234://
        -: 6235:// The maximum number of stack frames to be included is specified by
        -: 6236:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6237:// specifies the number of top frames to be skipped, which doesn't
        -: 6238:// count against the number of frames to be included.
        -: 6239://
        -: 6240:// For example, if Foo() calls Bar(), which in turn calls
        -: 6241:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6242:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6243:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6244:GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/, int skip_count) {
        -: 6245:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6246:  // to what the user really wants to skip.
    #####: 6247:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6247-block  0
call    0 never executed
call    1 never executed
        -: 6248:}
        -: 6249:
        -: 6250:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6251:// suppress unreachable code warnings.
        -: 6252:namespace {
        -: 6253:class ClassUniqueToAlwaysTrue {};
        -: 6254:}  // namespace
        -: 6255:
function _ZN7testing8internal6IsTrueEb called 78 returned 100% blocks executed 100%
       78: 6256:bool IsTrue(bool condition) { return condition; }
       78: 6256-block  0
        -: 6257:
function _ZN7testing8internal10AlwaysTrueEv called 41 returned 100% blocks executed 67%
       41: 6258:bool AlwaysTrue() {
        -: 6259:#if GTEST_HAS_EXCEPTIONS
        -: 6260:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6261:  // but it makes the compiler think that it may throw.
      41*: 6262:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
       41: 6262-block  0
call    0 returned 41
branch  1 taken 0 (fallthrough)
branch  2 taken 41
    %%%%%: 6262-block  1
call    3 never executed
call    4 never executed
        -: 6263:#endif  // GTEST_HAS_EXCEPTIONS
       41: 6264:  return true;
       41: 6264-block  0
        -: 6265:}
        -: 6266:
        -: 6267:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6268:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6269:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6270:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6271:  const size_t prefix_len = strlen(prefix);
    #####: 6272:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6272-block  0
branch  0 never executed
branch  1 never executed
    #####: 6273:    *pstr += prefix_len;
    #####: 6274:    return true;
    %%%%%: 6274-block  0
        -: 6275:  }
    #####: 6276:  return false;
    %%%%%: 6276-block  0
        -: 6277:}
        -: 6278:
        -: 6279:// Parses a string as a command line flag.  The string should have
        -: 6280:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6281:// part can be omitted.
        -: 6282://
        -: 6283:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 12 returned 100% blocks executed 61%
       12: 6284:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6285:                                  bool def_optional) {
        -: 6286:  // str and flag must not be NULL.
      12*: 6287:  if (str == nullptr || flag_name == nullptr) return nullptr;
       12: 6287-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 6287-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    %%%%%: 6287-block  2
        -: 6288:
        -: 6289:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6290:  const std::string flag_str =
       36: 6291:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
       12: 6291-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 6291-block  1
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
       12: 6291-block  2
call    7 returned 12
branch  8 taken 12 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 12
call   11 returned 12
       12: 6291-block  3
call   12 returned 12
    $$$$$: 6291-block  4
    $$$$$: 6291-block  5
    $$$$$: 6291-block  6
       12: 6292:  const size_t flag_len = flag_str.length();
call    0 returned 12
       12: 6293:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 12
branch  1 taken 10 (fallthrough)
branch  2 taken 2
       10: 6293-block  0
        -: 6294:
        -: 6295:  // Skips the flag name.
        2: 6296:  const char* flag_end = str + flag_len;
        -: 6297:
        -: 6298:  // When def_optional is true, it's OK to not have a "=value" part.
       2*: 6299:  if (def_optional && (flag_end[0] == '\0')) {
        2: 6299-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6299-block  1
branch  2 never executed
branch  3 never executed
    #####: 6300:    return flag_end;
    %%%%%: 6300-block  0
        -: 6301:  }
        -: 6302:
        -: 6303:  // If def_optional is true and there are more characters after the
        -: 6304:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6305:  // the flag name.
       2*: 6306:  if (flag_end[0] != '=') return nullptr;
        2: 6306-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6306-block  1
        -: 6307:
        -: 6308:  // Returns the string after "=".
        2: 6309:  return flag_end + 1;
        2: 6309-block  0
        -: 6310:}
        -: 6311:
        -: 6312:// Parses a string for a bool flag, in the form of either
        -: 6313:// "--flag=value" or "--flag".
        -: 6314://
        -: 6315:// In the former case, the value is taken as true as long as it does
        -: 6316:// not start with '0', 'f', or 'F'.
        -: 6317://
        -: 6318:// In the latter case, the value is taken as true.
        -: 6319://
        -: 6320:// On success, stores the value of the flag in *value, and returns
        -: 6321:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 8 returned 100% blocks executed 40%
        8: 6322:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6323:  // Gets the value of the flag as a string.
        8: 6324:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        8: 6324-block  0
call    0 returned 8
        -: 6325:
        -: 6326:  // Aborts if the parsing failed.
        8: 6327:  if (value_str == nullptr) return false;
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 6327-block  0
        -: 6328:
        -: 6329:  // Converts the string value to a bool.
    #####: 6330:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6330-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6330-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6330-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6330-block  3
    %%%%%: 6330-block  4
    #####: 6331:  return true;
    %%%%%: 6331-block  0
        -: 6332:}
        -: 6333:
        -: 6334:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6335://
        -: 6336:// On success, stores the value of the flag in *value, and returns
        -: 6337:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6338:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6339:  // Gets the value of the flag as a string.
    #####: 6340:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6340-block  0
call    0 never executed
        -: 6341:
        -: 6342:  // Aborts if the parsing failed.
    #####: 6343:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6343-block  0
        -: 6344:
        -: 6345:  // Sets *value to the value of the flag.
    #####: 6346:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6346-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6346-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6346-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6346-block  3
call   10 never executed
    $$$$$: 6346-block  4
call   11 never executed
    #####: 6347:                    value);
    %%%%%: 6347-block  0
        -: 6348:}
        -: 6349:
        -: 6350:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6351://
        -: 6352:// On success, stores the value of the flag in *value, and returns
        -: 6353:// true.  On failure, returns false without changing *value.
        -: 6354:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 4 returned 100% blocks executed 100%
        4: 6355:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6356:  // Gets the value of the flag as a string.
        4: 6357:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        4: 6357-block  0
call    0 returned 4
        -: 6358:
        -: 6359:  // Aborts if the parsing failed.
        4: 6360:  if (value_str == nullptr) return false;
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 6360-block  0
        -: 6361:
        -: 6362:  // Sets *value to the value of the flag.
        2: 6363:  *value = value_str;
        2: 6363-block  0
call    0 returned 2
        2: 6364:  return true;
        -: 6365:}
        -: 6366:
        -: 6367:// Determines whether a string has a prefix that Google Test uses for its
        -: 6368:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6369:// If Google Test detects that a command line flag has its prefix but is not
        -: 6370:// recognized, it will print its help message. Flags starting with
        -: 6371:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6372:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6373:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6374:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6374-block  0
call    0 never executed
    %%%%%: 6374-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6375:          SkipPrefix("/", &str)) &&
    %%%%%: 6375-block  0
call    0 never executed
    #####: 6376:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6376-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6376-block  1
    %%%%%: 6376-block  2
    #####: 6377:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6378:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6378-block  0
call    0 never executed
    %%%%%: 6378-block  1
        -: 6379:}
        -: 6380:
        -: 6381:// Prints a string containing code-encoded text.  The following escape
        -: 6382:// sequences can be used in the string to control the text color:
        -: 6383://
        -: 6384://   @@    prints a single '@' character.
        -: 6385://   @R    changes the color to red.
        -: 6386://   @G    changes the color to green.
        -: 6387://   @Y    changes the color to yellow.
        -: 6388://   @D    changes to the default terminal text color.
        -: 6389://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6390:static void PrintColorEncoded(const char* str) {
    #####: 6391:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6391-block  0
        -: 6392:
        -: 6393:  // Conceptually, we split the string into segments divided by escape
        -: 6394:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6395:  // each iteration, the str pointer advances to the beginning of the
        -: 6396:  // next segment.
        -: 6397:  for (;;) {
    #####: 6398:    const char* p = strchr(str, '@');
    #####: 6399:    if (p == nullptr) {
    %%%%%: 6399-block  0
branch  0 never executed
branch  1 never executed
    #####: 6400:      ColoredPrintf(color, "%s", str);
    %%%%%: 6400-block  0
call    0 never executed
    #####: 6401:      return;
    %%%%%: 6401-block  0
        -: 6402:    }
        -: 6403:
    #####: 6404:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6404-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6404-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6404-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6404-block  3
call   10 never executed
    $$$$$: 6404-block  4
    $$$$$: 6404-block  5
call   11 never executed
        -: 6405:
    #####: 6406:    const char ch = p[1];
    #####: 6407:    str = p + 2;
    #####: 6408:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6409:      ColoredPrintf(color, "@");
    %%%%%: 6409-block  0
call    0 never executed
    #####: 6410:    } else if (ch == 'D') {
    %%%%%: 6410-block  0
branch  0 never executed
branch  1 never executed
    #####: 6411:      color = GTestColor::kDefault;
    %%%%%: 6411-block  0
    #####: 6412:    } else if (ch == 'R') {
    %%%%%: 6412-block  0
branch  0 never executed
branch  1 never executed
    #####: 6413:      color = GTestColor::kRed;
    %%%%%: 6413-block  0
    #####: 6414:    } else if (ch == 'G') {
    %%%%%: 6414-block  0
branch  0 never executed
branch  1 never executed
    #####: 6415:      color = GTestColor::kGreen;
    %%%%%: 6415-block  0
    #####: 6416:    } else if (ch == 'Y') {
    %%%%%: 6416-block  0
branch  0 never executed
branch  1 never executed
    #####: 6417:      color = GTestColor::kYellow;
    %%%%%: 6417-block  0
        -: 6418:    } else {
    #####: 6419:      --str;
    %%%%%: 6419-block  0
        -: 6420:    }
    #####: 6421:  }
    %%%%%: 6421-block  0
        -: 6422:}
        -: 6423:
        -: 6424:static const char kColorEncodedHelpMessage[] =
        -: 6425:    "This program contains tests written using " GTEST_NAME_
        -: 6426:    ". You can use the\n"
        -: 6427:    "following command line flags to control its behavior:\n"
        -: 6428:    "\n"
        -: 6429:    "Test Selection:\n"
        -: 6430:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6431:    "list_tests@D\n"
        -: 6432:    "      List the names of all tests instead of running them. The name of\n"
        -: 6433:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6434:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6435:    "filter=@YPOSITIVE_PATTERNS"
        -: 6436:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6437:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6438:    "but\n"
        -: 6439:    "      none of the negative patterns. '?' matches any single character; "
        -: 6440:    "'*'\n"
        -: 6441:    "      matches any substring; ':' separates two patterns.\n"
        -: 6442:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6443:    "also_run_disabled_tests@D\n"
        -: 6444:    "      Run all disabled tests too.\n"
        -: 6445:    "\n"
        -: 6446:    "Test Execution:\n"
        -: 6447:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6448:    "repeat=@Y[COUNT]@D\n"
        -: 6449:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6450:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6451:    "shuffle@D\n"
        -: 6452:    "      Randomize tests' orders on every iteration.\n"
        -: 6453:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6454:    "random_seed=@Y[NUMBER]@D\n"
        -: 6455:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6456:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6457:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6458:    "recreate_environments_when_repeating@D\n"
        -: 6459:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6460:    "      of the test.\n"
        -: 6461:    "\n"
        -: 6462:    "Test Output:\n"
        -: 6463:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6464:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6465:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6466:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6467:    "brief=1@D\n"
        -: 6468:    "      Only print test failures.\n"
        -: 6469:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6470:    "print_time=0@D\n"
        -: 6471:    "      Don't print the elapsed time of each test.\n"
        -: 6472:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6473:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6474:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6475:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6476:    "given\n"
        -: 6477:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6478:#if GTEST_CAN_STREAM_RESULTS_
        -: 6479:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6480:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6481:    "      Stream test results to the given server.\n"
        -: 6482:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6483:    "\n"
        -: 6484:    "Assertion Behavior:\n"
        -: 6485:#if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6486:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6487:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6488:    "      Set the default death test style.\n"
        -: 6489:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6490:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6491:    "break_on_failure@D\n"
        -: 6492:    "      Turn assertion failures into debugger break-points.\n"
        -: 6493:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6494:    "throw_on_failure@D\n"
        -: 6495:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6496:    "      test framework.\n"
        -: 6497:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6498:    "catch_exceptions=0@D\n"
        -: 6499:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6500:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6501:    "\n"
        -: 6502:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6503:    "list_tests@D, you can alternatively set "
        -: 6504:    "the corresponding\n"
        -: 6505:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6506:    "to\n"
        -: 6507:    "disable colored text output, you can either specify "
        -: 6508:    "@G--" GTEST_FLAG_PREFIX_
        -: 6509:    "color=no@D or set\n"
        -: 6510:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6511:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6512:    "\n"
        -: 6513:    "For more information, please read the " GTEST_NAME_
        -: 6514:    " documentation at\n"
        -: 6515:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6516:    "\n"
        -: 6517:    "(not one in your own code or tests), please report it to\n"
        -: 6518:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6519:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 2 returned 100% blocks executed 26%
        2: 6520:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6521:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6522:  do {                                        \
        -: 6523:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6524:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6525:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6526:      return true;                            \
        -: 6527:    }                                         \
        -: 6528:  } while (false)
        -: 6529:
       2*: 6530:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        2: 6530-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6530-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 6530-block  2
       2*: 6531:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        2: 6531-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6531-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 6531-block  2
       2*: 6532:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        2: 6532-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6532-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 6532-block  2
        2: 6533:  GTEST_INTERNAL_PARSE_FLAG(color);
        2: 6533-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6533-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6533-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 1
        1: 6533-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6533-block  4
    $$$$$: 6533-block  5
call   11 never executed
       1*: 6534:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
        1: 6534-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6534-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6534-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%: 6534-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6534-block  4
    $$$$$: 6534-block  5
call   11 never executed
       1*: 6535:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
        1: 6535-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6535-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6535-block  2
       1*: 6536:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
        1: 6536-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6536-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6536-block  2
        1: 6537:  GTEST_INTERNAL_PARSE_FLAG(filter);
        1: 6537-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6537-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6537-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6537-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6537-block  4
    $$$$$: 6537-block  5
call   11 never executed
    #####: 6538:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6538-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6538-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6538-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6538-block  4
    $$$$$: 6538-block  5
call   11 never executed
    #####: 6539:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6539-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6539-block  2
    #####: 6540:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6540-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6540-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6540-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6540-block  4
    $$$$$: 6540-block  5
call   11 never executed
    #####: 6541:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6541-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6541-block  2
    #####: 6542:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6542-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6542-block  2
    #####: 6543:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6543-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6543-block  2
    #####: 6544:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6544-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6544-block  2
    #####: 6545:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6545-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6545-block  2
    #####: 6546:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6546-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6546-block  2
    #####: 6547:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6547-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6547-block  2
    #####: 6548:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6548-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6548-block  2
    #####: 6549:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6549-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6549-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6549-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6549-block  4
    $$$$$: 6549-block  5
call   11 never executed
    #####: 6550:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6550-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6550-block  2
    #####: 6551:  return false;
    %%%%%: 6551-block  0
        -: 6552:}
        -: 6553:
        -: 6554:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6555:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6556:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6556-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6557:  if (!flagfile) {
    %%%%%: 6557-block  0
branch  0 never executed
branch  1 never executed
    #####: 6558:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6558-block  1
call    3 never executed
    %%%%%: 6558-block  2
call    4 never executed
    $$$$$: 6558-block  3
call    5 never executed
    $$$$$: 6558-block  4
    #####: 6559:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6559-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6559-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6560:  }
    #####: 6561:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6561-block  1
call    4 never executed
    #####: 6562:  posix::FClose(flagfile);
    %%%%%: 6562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6563:  std::vector<std::string> lines;
    %%%%%: 6563-block  0
call    0 never executed
    %%%%%: 6563-block  1
call    1 never executed
    $$$$$: 6563-block  2
call    2 never executed
    #####: 6564:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6565:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6565-block  0
    %%%%%: 6565-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6565-block  2
    #####: 6566:    if (lines[i].empty()) continue;
    %%%%%: 6566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6566-block  1
    #####: 6567:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6567-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6567-block  1
branch  5 never executed
branch  6 never executed
    %%%%%: 6567-block  2
        -: 6568:  }
    #####: 6569:}
        -: 6570:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6571:
        -: 6572:// Parses the command line for Google Test flags, without initializing
        -: 6573:// other parts of Google Test.  The type parameter CharType can be
        -: 6574:// instantiated to either char or wchar_t.
        -: 6575:template <typename CharType>
       1*: 6576:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6577:  std::string flagfile_value;
       3*: 6578:  for (int i = 1; i < *argc; i++) {
       4*: 6579:    const std::string arg_string = StreamableToString(argv[i]);
       2*: 6580:    const char* const arg = arg_string.c_str();
        -: 6581:
        -: 6582:    using internal::ParseFlag;
        -: 6583:
       2*: 6584:    bool remove_flag = false;
       2*: 6585:    if (ParseGoogleTestFlag(arg)) {
       2*: 6586:      remove_flag = true;
        -: 6587:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6588:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6589:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6590:      LoadFlagsFromFile(flagfile_value);
    #####: 6591:      remove_flag = true;
        -: 6592:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6593:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 6594:               arg_string == "-?" || arg_string == "/?" ||
    #####: 6595:               HasGoogleTestFlagPrefix(arg)) {
        -: 6596:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6597:      // internal ones) trigger help display.
    #####: 6598:      g_help_flag = true;
        -: 6599:    }
        -: 6600:
       2*: 6601:    if (remove_flag) {
        -: 6602:      // Shift the remainder of the argv list left by one.  Note
        -: 6603:      // that argv has (*argc + 1) elements, the last one always being
        -: 6604:      // NULL.  The following loop moves the trailing NULL element as
        -: 6605:      // well.
       5*: 6606:      for (int j = i; j != *argc; j++) {
       3*: 6607:        argv[j] = argv[j + 1];
        -: 6608:      }
        -: 6609:
        -: 6610:      // Decrements the argument count.
       2*: 6611:      (*argc)--;
        -: 6612:
        -: 6613:      // We also need to decrement the iterator as we just removed
        -: 6614:      // an element.
       2*: 6615:      i--;
        -: 6616:    }
        -: 6617:  }
        -: 6618:
       1*: 6619:  if (g_help_flag) {
        -: 6620:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6621:    // latter may not be called at all if the user is using Google
        -: 6622:    // Test with another testing framework.
    #####: 6623:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6624:  }
       1*: 6625:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6576:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6577:  std::string flagfile_value;
    %%%%%: 6577-block  0
call    0 never executed
    %%%%%: 6577-block  1
call    1 never executed
    $$$$$: 6577-block  2
call    2 never executed
    #####: 6578:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6578-block  0
branch  0 never executed
branch  1 never executed
    #####: 6579:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6579-block  1
call    3 never executed
    $$$$$: 6579-block  2
call    4 never executed
    #####: 6580:    const char* const arg = arg_string.c_str();
    %%%%%: 6580-block  0
call    0 never executed
        -: 6581:
        -: 6582:    using internal::ParseFlag;
        -: 6583:
    #####: 6584:    bool remove_flag = false;
    #####: 6585:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6585-block  0
branch  3 never executed
branch  4 never executed
    #####: 6586:      remove_flag = true;
    %%%%%: 6586-block  0
        -: 6587:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6588:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6588-block  1
branch  3 never executed
branch  4 never executed
    #####: 6589:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6590:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6591:      remove_flag = true;
    %%%%%: 6591-block  0
        -: 6592:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6593:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6593-block  0
call    0 never executed
    %%%%%: 6593-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6594:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6594-block  0
call    2 never executed
    %%%%%: 6594-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6594-block  2
    %%%%%: 6594-block  3
    %%%%%: 6594-block  4
branch  8 never executed
branch  9 never executed
    #####: 6595:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6595-block  0
call    0 never executed
        -: 6596:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6597:      // internal ones) trigger help display.
    #####: 6598:      g_help_flag = true;
    %%%%%: 6598-block  0
        -: 6599:    }
        -: 6600:
    #####: 6601:    if (remove_flag) {
    %%%%%: 6601-block  0
branch  0 never executed
branch  1 never executed
        -: 6602:      // Shift the remainder of the argv list left by one.  Note
        -: 6603:      // that argv has (*argc + 1) elements, the last one always being
        -: 6604:      // NULL.  The following loop moves the trailing NULL element as
        -: 6605:      // well.
    #####: 6606:      for (int j = i; j != *argc; j++) {
    %%%%%: 6606-block  0
    %%%%%: 6606-block  1
branch  0 never executed
branch  1 never executed
    #####: 6607:        argv[j] = argv[j + 1];
    %%%%%: 6607-block  0
        -: 6608:      }
        -: 6609:
        -: 6610:      // Decrements the argument count.
    #####: 6611:      (*argc)--;
        -: 6612:
        -: 6613:      // We also need to decrement the iterator as we just removed
        -: 6614:      // an element.
    #####: 6615:      i--;
    %%%%%: 6615-block  0
        -: 6616:    }
        -: 6617:  }
        -: 6618:
    #####: 6619:  if (g_help_flag) {
    %%%%%: 6619-block  0
branch  0 never executed
branch  1 never executed
        -: 6620:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6621:    // latter may not be called at all if the user is using Google
        -: 6622:    // Test with another testing framework.
    #####: 6623:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6624:  }
    #####: 6625:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 43%
        1: 6576:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6577:  std::string flagfile_value;
        1: 6577-block  0
call    0 returned 1
        1: 6577-block  1
call    1 returned 1
    $$$$$: 6577-block  2
call    2 never executed
        3: 6578:  for (int i = 1; i < *argc; i++) {
        3: 6578-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        4: 6579:    const std::string arg_string = StreamableToString(argv[i]);
        2: 6579-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6579-block  1
call    3 returned 2
    $$$$$: 6579-block  2
call    4 never executed
        2: 6580:    const char* const arg = arg_string.c_str();
        2: 6580-block  0
call    0 returned 2
        -: 6581:
        -: 6582:    using internal::ParseFlag;
        -: 6583:
        2: 6584:    bool remove_flag = false;
        2: 6585:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6585-block  0
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2: 6586:      remove_flag = true;
        2: 6586-block  0
        -: 6587:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6588:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6588-block  1
branch  3 never executed
branch  4 never executed
    #####: 6589:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6590:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6591:      remove_flag = true;
    %%%%%: 6591-block  0
        -: 6592:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6593:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6593-block  0
call    0 never executed
    %%%%%: 6593-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6594:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6594-block  0
call    2 never executed
    %%%%%: 6594-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6594-block  2
    %%%%%: 6594-block  3
    %%%%%: 6594-block  4
branch  8 never executed
branch  9 never executed
    #####: 6595:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6595-block  0
call    0 never executed
        -: 6596:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6597:      // internal ones) trigger help display.
    #####: 6598:      g_help_flag = true;
    %%%%%: 6598-block  0
        -: 6599:    }
        -: 6600:
        2: 6601:    if (remove_flag) {
        2: 6601-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 6602:      // Shift the remainder of the argv list left by one.  Note
        -: 6603:      // that argv has (*argc + 1) elements, the last one always being
        -: 6604:      // NULL.  The following loop moves the trailing NULL element as
        -: 6605:      // well.
        5: 6606:      for (int j = i; j != *argc; j++) {
        2: 6606-block  0
        5: 6606-block  1
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        3: 6607:        argv[j] = argv[j + 1];
        3: 6607-block  0
        -: 6608:      }
        -: 6609:
        -: 6610:      // Decrements the argument count.
        2: 6611:      (*argc)--;
        -: 6612:
        -: 6613:      // We also need to decrement the iterator as we just removed
        -: 6614:      // an element.
        2: 6615:      i--;
        2: 6615-block  0
        -: 6616:    }
        -: 6617:  }
        -: 6618:
        1: 6619:  if (g_help_flag) {
        1: 6619-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6620:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6621:    // latter may not be called at all if the user is using Google
        -: 6622:    // Test with another testing framework.
    #####: 6623:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6624:  }
        1: 6625:}
------------------
        -: 6626:
        -: 6627:// Parses the command line for Google Test flags, without initializing
        -: 6628:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6629:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 6630:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6630-block  0
call    0 returned 1
        -: 6631:
        -: 6632:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6633:  // *_NSGetArgv() == argv
        -: 6634:  // Only applicable to char** version of argv
        -: 6635:#if GTEST_OS_MAC
        -: 6636:#ifndef GTEST_OS_IOS
        -: 6637:  if (*_NSGetArgv() == argv) {
        -: 6638:    *_NSGetArgc() = *argc;
        -: 6639:  }
        -: 6640:#endif
        -: 6641:#endif
        1: 6642:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6643:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6644:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6644-block  0
call    0 never executed
    #####: 6645:}
        -: 6646:
        -: 6647:// The internal implementation of InitGoogleTest().
        -: 6648://
        -: 6649:// The type parameter CharType can be instantiated to either char or
        -: 6650:// wchar_t.
        -: 6651:template <typename CharType>
       1*: 6652:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6653:  // We don't want to run the initialization code twice.
       1*: 6654:  if (GTestIsInitialized()) return;
        -: 6655:
       1*: 6656:  if (*argc <= 0) return;
        -: 6657:
       1*: 6658:  g_argvs.clear();
       4*: 6659:  for (int i = 0; i != *argc; i++) {
       3*: 6660:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6661:  }
        -: 6662:
        -: 6663:#if GTEST_HAS_ABSL
        -: 6664:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6665:#endif  // GTEST_HAS_ABSL
        -: 6666:
       1*: 6667:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6668:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6669:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6652:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6653:  // We don't want to run the initialization code twice.
    #####: 6654:  if (GTestIsInitialized()) return;
    %%%%%: 6654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6654-block  1
        -: 6655:
    #####: 6656:  if (*argc <= 0) return;
    %%%%%: 6656-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6656-block  1
        -: 6657:
    #####: 6658:  g_argvs.clear();
    %%%%%: 6658-block  0
call    0 never executed
    #####: 6659:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6659-block  0
branch  0 never executed
branch  1 never executed
    #####: 6660:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6660-block  1
call    4 never executed
    $$$$$: 6660-block  2
call    5 never executed
        -: 6661:  }
        -: 6662:
        -: 6663:#if GTEST_HAS_ABSL
        -: 6664:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6665:#endif  // GTEST_HAS_ABSL
        -: 6666:
    #####: 6667:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6667-block  0
call    0 never executed
    #####: 6668:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6669:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6652:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6653:  // We don't want to run the initialization code twice.
       1*: 6654:  if (GTestIsInitialized()) return;
        1: 6654-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6654-block  1
        -: 6655:
       1*: 6656:  if (*argc <= 0) return;
        1: 6656-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6656-block  1
        -: 6657:
        1: 6658:  g_argvs.clear();
        1: 6658-block  0
call    0 returned 1
        4: 6659:  for (int i = 0; i != *argc; i++) {
        4: 6659-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3: 6660:    g_argvs.push_back(StreamableToString(argv[i]));
        3: 6660-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 6660-block  1
call    4 returned 3
    $$$$$: 6660-block  2
call    5 never executed
        -: 6661:  }
        -: 6662:
        -: 6663:#if GTEST_HAS_ABSL
        -: 6664:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6665:#endif  // GTEST_HAS_ABSL
        -: 6666:
        1: 6667:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6667-block  0
call    0 returned 1
        1: 6668:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6669:}
------------------
        -: 6670:
        -: 6671:}  // namespace internal
        -: 6672:
        -: 6673:// Initializes Google Test.  This must be called before calling
        -: 6674:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6675:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6676:// seen, it is removed from argv, and *argc is decremented.
        -: 6677://
        -: 6678:// No value is returned.  Instead, the Google Test flag variables are
        -: 6679:// updated.
        -: 6680://
        -: 6681:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6682:void InitGoogleTest(int* argc, char** argv) {
        -: 6683:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6684:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6685:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6686:  internal::InitGoogleTestImpl(argc, argv);
        1: 6686-block  0
call    0 returned 1
        -: 6687:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6688:}
        -: 6689:
        -: 6690:// This overloaded version can be used in Windows programs compiled in
        -: 6691:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6692:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6693:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6694:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6695:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6696:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6696-block  0
call    0 never executed
        -: 6697:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6698:}
        -: 6699:
        -: 6700:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6701:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6702:void InitGoogleTest() {
        -: 6703:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6704:  int argc = 1;
    #####: 6705:  const auto arg0 = "dummy";
    #####: 6706:  char* argv0 = const_cast<char*>(arg0);
    #####: 6707:  char** argv = &argv0;
        -: 6708:
        -: 6709:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6710:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6711:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6712:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6713:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6714:}
    %%%%%: 6714-block  0
        -: 6715:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6716:std::string TempDir() {
        -: 6717:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6718:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6719:#elif GTEST_OS_WINDOWS_MOBILE
        -: 6720:  return "\\temp\\";
        -: 6721:#elif GTEST_OS_WINDOWS
        -: 6722:  const char* temp_dir = internal::posix::GetEnv("TEMP");
        -: 6723:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6724:    return "\\temp\\";
        -: 6725:  } else if (temp_dir[strlen(temp_dir) - 1] == '\\') {
        -: 6726:    return temp_dir;
        -: 6727:  } else {
        -: 6728:    return std::string(temp_dir) + "\\";
        -: 6729:  }
        -: 6730:#elif GTEST_OS_LINUX_ANDROID
        -: 6731:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6732:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6733:    return "/data/local/tmp/";
        -: 6734:  } else {
        -: 6735:    return temp_dir;
        -: 6736:  }
        -: 6737:#elif GTEST_OS_LINUX
    #####: 6738:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
    %%%%%: 6738-block  0
call    0 never executed
    #####: 6739:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6739-block  0
branch  2 never executed
branch  3 never executed
    #####: 6740:    return "/tmp/";
    %%%%%: 6740-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6740-block  1
call    4 never executed
    $$$$$: 6740-block  2
call    5 never executed
    $$$$$: 6740-block  3
        -: 6741:  } else {
    #####: 6742:    return temp_dir;
    %%%%%: 6742-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6742-block  1
call    4 never executed
    $$$$$: 6742-block  2
call    5 never executed
    $$$$$: 6742-block  3
        -: 6743:  }
        -: 6744:#else
        -: 6745:  return "/tmp/";
        -: 6746:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 6747:}
        -: 6748:
        -: 6749:// Class ScopedTrace
        -: 6750:
        -: 6751:// Pushes the given source file location and message onto a per-thread
        -: 6752:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6753:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6754:  internal::TraceInfo trace;
    %%%%%: 6754-block  0
call    0 never executed
    %%%%%: 6754-block  1
call    1 never executed
    $$$$$: 6754-block  2
call    2 never executed
    #####: 6755:  trace.file = file;
    #####: 6756:  trace.line = line;
    #####: 6757:  trace.message.swap(message);
call    0 never executed
        -: 6758:
    #####: 6759:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6759-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6760:}
        -: 6761:
        -: 6762:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6763:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6764:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6764-block  0
call    0 never executed
call    1 never executed
    #####: 6765:}
        -: 6766:
        -: 6767:}  // namespace testing
