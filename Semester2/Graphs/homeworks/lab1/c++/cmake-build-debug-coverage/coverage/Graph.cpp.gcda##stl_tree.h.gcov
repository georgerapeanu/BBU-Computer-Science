        -:    0:Source:/usr/include/c++/9/bits/stl_tree.h
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/CMakeFiles/c___tests.dir/__/Graph.cpp.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/CMakeFiles/c___tests.dir/__/Graph.cpp.gcda
        -:    0:Runs:1
        -:    1:// RB tree implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1996,1997
        -:   28: * Silicon Graphics Computer Systems, Inc.
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Silicon Graphics makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1994
        -:   40: * Hewlett-Packard Company
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: *
        -:   50: *
        -:   51: */
        -:   52:
        -:   53:/** @file bits/stl_tree.h
        -:   54: *  This is an internal header file, included by other library headers.
        -:   55: *  Do not attempt to use it directly. @headername{map,set}
        -:   56: */
        -:   57:
        -:   58:#ifndef _STL_TREE_H
        -:   59:#define _STL_TREE_H 1
        -:   60:
        -:   61:#pragma GCC system_header
        -:   62:
        -:   63:#include <bits/stl_algobase.h>
        -:   64:#include <bits/allocator.h>
        -:   65:#include <bits/stl_function.h>
        -:   66:#include <bits/cpp_type_traits.h>
        -:   67:#include <ext/alloc_traits.h>
        -:   68:#if __cplusplus >= 201103L
        -:   69:# include <ext/aligned_buffer.h>
        -:   70:#endif
        -:   71:#if __cplusplus > 201402L
        -:   72:# include <bits/node_handle.h>
        -:   73:#endif
        -:   74:
        -:   75:namespace std _GLIBCXX_VISIBILITY(default)
        -:   76:{
        -:   77:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   78:
        -:   79:#if __cplusplus > 201103L
        -:   80:# define __cpp_lib_generic_associative_lookup 201304
        -:   81:#endif
        -:   82:
        -:   83:  // Red-black tree class, designed for use in implementing STL
        -:   84:  // associative containers (set, multiset, map, and multimap). The
        -:   85:  // insertion and deletion algorithms are based on those in Cormen,
        -:   86:  // Leiserson, and Rivest, Introduction to Algorithms (MIT Press,
        -:   87:  // 1990), except that
        -:   88:  //
        -:   89:  // (1) the header cell is maintained with links not only to the root
        -:   90:  // but also to the leftmost node of the tree, to enable constant
        -:   91:  // time begin(), and to the rightmost node of the tree, to enable
        -:   92:  // linear time performance when used with the generic set algorithms
        -:   93:  // (set_union, etc.)
        -:   94:  //
        -:   95:  // (2) when a node being deleted has two children its successor node
        -:   96:  // is relinked into its place, rather than copied, so that the only
        -:   97:  // iterators invalidated are those referring to the deleted node.
        -:   98:
        -:   99:  enum _Rb_tree_color { _S_red = false, _S_black = true };
        -:  100:
        -:  101:  struct _Rb_tree_node_base
        -:  102:  {
        -:  103:    typedef _Rb_tree_node_base* _Base_ptr;
        -:  104:    typedef const _Rb_tree_node_base* _Const_Base_ptr;
        -:  105:
        -:  106:    _Rb_tree_color	_M_color;
        -:  107:    _Base_ptr		_M_parent;
        -:  108:    _Base_ptr		_M_left;
        -:  109:    _Base_ptr		_M_right;
        -:  110:
        -:  111:    static _Base_ptr
function _ZNSt18_Rb_tree_node_base10_S_minimumEPS_ called 66 returned 100% blocks executed 100%
      132:  112:    _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  113:    {
      132:  114:      while (__x->_M_left != 0) __x = __x->_M_left;
      132:  114-block  0
branch  0 taken 66 (fallthrough)
branch  1 taken 66
       66:  114-block  1
       66:  115:      return __x;
       66:  115-block  0
        -:  116:    }
        -:  117:
        -:  118:    static _Const_Base_ptr
        -:  119:    _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  120:    {
        -:  121:      while (__x->_M_left != 0) __x = __x->_M_left;
        -:  122:      return __x;
        -:  123:    }
        -:  124:
        -:  125:    static _Base_ptr
function _ZNSt18_Rb_tree_node_base10_S_maximumEPS_ called 66 returned 100% blocks executed 100%
      132:  126:    _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  127:    {
      132:  128:      while (__x->_M_right != 0) __x = __x->_M_right;
      132:  128-block  0
branch  0 taken 66 (fallthrough)
branch  1 taken 66
       66:  128-block  1
       66:  129:      return __x;
       66:  129-block  0
        -:  130:    }
        -:  131:
        -:  132:    static _Const_Base_ptr
        -:  133:    _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  134:    {
        -:  135:      while (__x->_M_right != 0) __x = __x->_M_right;
        -:  136:      return __x;
        -:  137:    }
        -:  138:  };
        -:  139:
        -:  140:  // Helper type offering value initialization guarantee on the compare functor.
        -:  141:  template<typename _Key_compare>
        -:  142:    struct _Rb_tree_key_compare
        -:  143:    {
        -:  144:      _Key_compare		_M_key_compare;
        -:  145:
      146:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
      146:  150:      { }
------------------
_ZNSt20_Rb_tree_key_compareISt4lessISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEEC2Ev:
function _ZNSt20_Rb_tree_key_compareISt4lessISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEEC2Ev called 48 returned 100% blocks executed 100%
       48:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
       48:  150:      { }
------------------
_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
function _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev called 98 returned 100% blocks executed 100%
       98:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
       98:  150:      { }
------------------
        -:  151:
        -:  152:      _Rb_tree_key_compare(const _Key_compare& __comp)
        -:  153:      : _M_key_compare(__comp)
        -:  154:      { }
        -:  155:
        -:  156:#if __cplusplus >= 201103L
        -:  157:      // Copy constructor added for consistency with C++98 mode.
        -:  158:      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;
        -:  159:
        -:  160:      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
        -:  161:	noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
        -:  162:      : _M_key_compare(__x._M_key_compare)
        -:  163:      { }
        -:  164:#endif
        -:  165:    };
        -:  166:
        -:  167:  // Helper type to manage default initialization of node count and header.
        -:  168:  struct _Rb_tree_header
        -:  169:  {
        -:  170:    _Rb_tree_node_base	_M_header;
        -:  171:    size_t		_M_node_count; // Keeps track of size of tree.
        -:  172:
function _ZNSt15_Rb_tree_headerC2Ev called 146 returned 100% blocks executed 100%
      146:  173:    _Rb_tree_header() _GLIBCXX_NOEXCEPT
      146:  174:    {
      146:  175:      _M_header._M_color = _S_red;
      146:  176:      _M_reset();
      146:  176-block  0
call    0 returned 146
      146:  177:    }
        -:  178:
        -:  179:#if __cplusplus >= 201103L
        -:  180:    _Rb_tree_header(_Rb_tree_header&& __x) noexcept
        -:  181:    {
        -:  182:      if (__x._M_header._M_parent != nullptr)
        -:  183:	_M_move_data(__x);
        -:  184:      else
        -:  185:	{
        -:  186:	  _M_header._M_color = _S_red;
        -:  187:	  _M_reset();
        -:  188:	}
        -:  189:    }
        -:  190:#endif
        -:  191:
        -:  192:    void
        -:  193:    _M_move_data(_Rb_tree_header& __from)
        -:  194:    {
        -:  195:      _M_header._M_color = __from._M_header._M_color;
        -:  196:      _M_header._M_parent = __from._M_header._M_parent;
        -:  197:      _M_header._M_left = __from._M_header._M_left;
        -:  198:      _M_header._M_right = __from._M_header._M_right;
        -:  199:      _M_header._M_parent->_M_parent = &_M_header;
        -:  200:      _M_node_count = __from._M_node_count;
        -:  201:
        -:  202:      __from._M_reset();
        -:  203:    }
        -:  204:
        -:  205:    void
function _ZNSt15_Rb_tree_header8_M_resetEv called 213 returned 100% blocks executed 100%
      213:  206:    _M_reset()
        -:  207:    {
      213:  208:      _M_header._M_parent = 0;
      213:  209:      _M_header._M_left = &_M_header;
      213:  210:      _M_header._M_right = &_M_header;
      213:  211:      _M_node_count = 0;
      213:  212:    }
        -:  213:  };
        -:  214:
        -:  215:  template<typename _Val>
        -:  216:    struct _Rb_tree_node : public _Rb_tree_node_base
        -:  217:    {
        -:  218:      typedef _Rb_tree_node<_Val>* _Link_type;
        -:  219:
        -:  220:#if __cplusplus < 201103L
        -:  221:      _Val _M_value_field;
        -:  222:
        -:  223:      _Val*
        -:  224:      _M_valptr()
        -:  225:      { return std::__addressof(_M_value_field); }
        -:  226:
        -:  227:      const _Val*
        -:  228:      _M_valptr() const
        -:  229:      { return std::__addressof(_M_value_field); }
        -:  230:#else
        -:  231:      __gnu_cxx::__aligned_membuf<_Val> _M_storage;
        -:  232:
        -:  233:      _Val*
     2078:  234:      _M_valptr()
     2078:  235:      { return _M_storage._M_ptr(); }
------------------
_ZNSt13_Rb_tree_nodeISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEE9_M_valptrEv:
function _ZNSt13_Rb_tree_nodeISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEE9_M_valptrEv called 538 returned 100% blocks executed 100%
      538:  234:      _M_valptr()
      538:  235:      { return _M_storage._M_ptr(); }
      538:  235-block  0
call    0 returned 538
------------------
_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE9_M_valptrEv:
function _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE9_M_valptrEv called 1540 returned 100% blocks executed 100%
     1540:  234:      _M_valptr()
     1540:  235:      { return _M_storage._M_ptr(); }
     1540:  235-block  0
call    0 returned 1540
------------------
        -:  236:
        -:  237:      const _Val*
     4092:  238:      _M_valptr() const
     4092:  239:      { return _M_storage._M_ptr(); }
------------------
_ZNKSt13_Rb_tree_nodeISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEE9_M_valptrEv:
function _ZNKSt13_Rb_tree_nodeISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEE9_M_valptrEv called 1046 returned 100% blocks executed 100%
     1046:  238:      _M_valptr() const
     1046:  239:      { return _M_storage._M_ptr(); }
     1046:  239-block  0
call    0 returned 1046
------------------
_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE9_M_valptrEv:
function _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE9_M_valptrEv called 3046 returned 100% blocks executed 100%
     3046:  238:      _M_valptr() const
     3046:  239:      { return _M_storage._M_ptr(); }
     3046:  239-block  0
call    0 returned 3046
------------------
        -:  240:#endif
        -:  241:    };
        -:  242:
        -:  243:  _GLIBCXX_PURE _Rb_tree_node_base*
        -:  244:  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();
        -:  245:
        -:  246:  _GLIBCXX_PURE const _Rb_tree_node_base*
        -:  247:  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();
        -:  248:
        -:  249:  _GLIBCXX_PURE _Rb_tree_node_base*
        -:  250:  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();
        -:  251:
        -:  252:  _GLIBCXX_PURE const _Rb_tree_node_base*
        -:  253:  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();
        -:  254:
        -:  255:  template<typename _Tp>
        -:  256:    struct _Rb_tree_iterator
        -:  257:    {
        -:  258:      typedef _Tp  value_type;
        -:  259:      typedef _Tp& reference;
        -:  260:      typedef _Tp* pointer;
        -:  261:
        -:  262:      typedef bidirectional_iterator_tag iterator_category;
        -:  263:      typedef ptrdiff_t			 difference_type;
        -:  264:
        -:  265:      typedef _Rb_tree_iterator<_Tp>		_Self;
        -:  266:      typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
        -:  267:      typedef _Rb_tree_node<_Tp>*		_Link_type;
        -:  268:
        -:  269:      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
        -:  270:      : _M_node() { }
        -:  271:
        -:  272:      explicit
     2138:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     2138:  274:      : _M_node(__x) { }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEC2EPSt18_Rb_tree_node_base:
function _ZNSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEC2EPSt18_Rb_tree_node_base called 554 returned 100% blocks executed 100%
      554:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      554:  274:      : _M_node(__x) { }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEC2EPSt18_Rb_tree_node_base:
function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEC2EPSt18_Rb_tree_node_base called 1584 returned 100% blocks executed 100%
     1584:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1584:  274:      : _M_node(__x) { }
------------------
        -:  275:
        -:  276:      reference
     1074:  277:      operator*() const _GLIBCXX_NOEXCEPT
     1074:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
------------------
_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEdeEv:
function _ZNKSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEdeEv called 198 returned 100% blocks executed 100%
      198:  277:      operator*() const _GLIBCXX_NOEXCEPT
      198:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
      198:  278-block  0
call    0 returned 198
------------------
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEdeEv:
function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEdeEv called 876 returned 100% blocks executed 100%
      876:  277:      operator*() const _GLIBCXX_NOEXCEPT
      876:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
      876:  278-block  0
call    0 returned 876
------------------
        -:  279:
        -:  280:      pointer
        -:  281:      operator->() const _GLIBCXX_NOEXCEPT
        -:  282:      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
        -:  283:
        -:  284:      _Self&
    #####:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    #####:  287:	_M_node = _Rb_tree_increment(_M_node);
    #####:  288:	return *this;
        -:  289:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEppEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEppEv called 0 returned 0% blocks executed 0%
    #####:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    #####:  287:	_M_node = _Rb_tree_increment(_M_node);
    #####:  288:	return *this;
    %%%%%:  288-block  0
        -:  289:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEppEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEppEv called 0 returned 0% blocks executed 0%
    #####:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    #####:  287:	_M_node = _Rb_tree_increment(_M_node);
    #####:  288:	return *this;
    %%%%%:  288-block  0
        -:  289:      }
------------------
        -:  290:
        -:  291:      _Self
        -:  292:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  293:      {
        -:  294:	_Self __tmp = *this;
        -:  295:	_M_node = _Rb_tree_increment(_M_node);
        -:  296:	return __tmp;
        -:  297:      }
        -:  298:
        -:  299:      _Self&
       43:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
       43:  302:	_M_node = _Rb_tree_decrement(_M_node);
       43:  303:	return *this;
        -:  304:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEmmEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEmmEv called 29 returned 100% blocks executed 100%
       29:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
       29:  302:	_M_node = _Rb_tree_decrement(_M_node);
       29:  303:	return *this;
       29:  303-block  0
        -:  304:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEmmEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEmmEv called 14 returned 100% blocks executed 100%
       14:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
       14:  302:	_M_node = _Rb_tree_decrement(_M_node);
       14:  303:	return *this;
       14:  303-block  0
        -:  304:      }
------------------
        -:  305:
        -:  306:      _Self
        -:  307:      operator--(int) _GLIBCXX_NOEXCEPT
        -:  308:      {
        -:  309:	_Self __tmp = *this;
        -:  310:	_M_node = _Rb_tree_decrement(_M_node);
        -:  311:	return __tmp;
        -:  312:      }
        -:  313:
        -:  314:      friend bool
      742:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      742:  316:      { return __x._M_node == __y._M_node; }
------------------
_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEESC_:
function _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEESC_ called 160 returned 100% blocks executed 100%
      160:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      160:  316:      { return __x._M_node == __y._M_node; }
      160:  316-block  0
------------------
_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEESE_:
function _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEESE_ called 582 returned 100% blocks executed 100%
      582:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      582:  316:      { return __x._M_node == __y._M_node; }
      582:  316-block  0
------------------
        -:  317:
        -:  318:      friend bool
        -:  319:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  320:      { return __x._M_node != __y._M_node; }
        -:  321:
        -:  322:      _Base_ptr _M_node;
        -:  323:  };
        -:  324:
        -:  325:  template<typename _Tp>
        -:  326:    struct _Rb_tree_const_iterator
        -:  327:    {
        -:  328:      typedef _Tp	 value_type;
        -:  329:      typedef const _Tp& reference;
        -:  330:      typedef const _Tp* pointer;
        -:  331:
        -:  332:      typedef _Rb_tree_iterator<_Tp> iterator;
        -:  333:
        -:  334:      typedef bidirectional_iterator_tag iterator_category;
        -:  335:      typedef ptrdiff_t			 difference_type;
        -:  336:
        -:  337:      typedef _Rb_tree_const_iterator<_Tp>		_Self;
        -:  338:      typedef _Rb_tree_node_base::_Const_Base_ptr	_Base_ptr;
        -:  339:      typedef const _Rb_tree_node<_Tp>*			_Link_type;
        -:  340:
        -:  341:      _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
        -:  342:      : _M_node() { }
        -:  343:
        -:  344:      explicit
     1866:  345:      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1866:  346:      : _M_node(__x) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEC2EPKSt18_Rb_tree_node_base:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEC2EPKSt18_Rb_tree_node_base called 643 returned 100% blocks executed 100%
      643:  345:      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      643:  346:      : _M_node(__x) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEC2EPKSt18_Rb_tree_node_base:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEC2EPKSt18_Rb_tree_node_base called 1223 returned 100% blocks executed 100%
     1223:  345:      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1223:  346:      : _M_node(__x) { }
------------------
        -:  347:
      350:  348:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
      350:  349:      : _M_node(__it._M_node) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEC2ERKSt17_Rb_tree_iteratorIS9_E:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEC2ERKSt17_Rb_tree_iteratorIS9_E called 130 returned 100% blocks executed 100%
      130:  348:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
      130:  349:      : _M_node(__it._M_node) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEC2ERKSt17_Rb_tree_iteratorISB_E:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEC2ERKSt17_Rb_tree_iteratorISB_E called 220 returned 100% blocks executed 100%
      220:  348:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
      220:  349:      : _M_node(__it._M_node) { }
------------------
        -:  350:
        -:  351:      iterator
      304:  352:      _M_const_cast() const _GLIBCXX_NOEXCEPT
      304:  353:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEE13_M_const_castEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEE13_M_const_castEv called 104 returned 100% blocks executed 100%
      104:  352:      _M_const_cast() const _GLIBCXX_NOEXCEPT
      104:  353:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
      104:  353-block  0
call    0 returned 104
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE13_M_const_castEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEE13_M_const_castEv called 200 returned 100% blocks executed 100%
      200:  352:      _M_const_cast() const _GLIBCXX_NOEXCEPT
      200:  353:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
      200:  353-block  0
call    0 returned 200
------------------
        -:  354:
        -:  355:      reference
      148:  356:      operator*() const _GLIBCXX_NOEXCEPT
      148:  357:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEdeEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEdeEv called 66 returned 100% blocks executed 100%
       66:  356:      operator*() const _GLIBCXX_NOEXCEPT
       66:  357:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
       66:  357-block  0
call    0 returned 66
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEdeEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEdeEv called 82 returned 100% blocks executed 100%
       82:  356:      operator*() const _GLIBCXX_NOEXCEPT
       82:  357:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
       82:  357-block  0
call    0 returned 82
------------------
        -:  358:
        -:  359:      pointer
        -:  360:      operator->() const _GLIBCXX_NOEXCEPT
        -:  361:      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
        -:  362:
        -:  363:      _Self&
      103:  364:      operator++() _GLIBCXX_NOEXCEPT
        -:  365:      {
      103:  366:	_M_node = _Rb_tree_increment(_M_node);
      103:  367:	return *this;
        -:  368:      }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEppEv:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEppEv called 21 returned 100% blocks executed 100%
       21:  364:      operator++() _GLIBCXX_NOEXCEPT
        -:  365:      {
       21:  366:	_M_node = _Rb_tree_increment(_M_node);
       21:  367:	return *this;
       21:  367-block  0
        -:  368:      }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEppEv:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEppEv called 82 returned 100% blocks executed 100%
       82:  364:      operator++() _GLIBCXX_NOEXCEPT
        -:  365:      {
       82:  366:	_M_node = _Rb_tree_increment(_M_node);
       82:  367:	return *this;
       82:  367-block  0
        -:  368:      }
------------------
        -:  369:
        -:  370:      _Self
       12:  371:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  372:      {
       12:  373:	_Self __tmp = *this;
       12:  374:	_M_node = _Rb_tree_increment(_M_node);
       12:  375:	return __tmp;
        -:  376:      }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEppEi:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEppEi called 6 returned 100% blocks executed 100%
        6:  371:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  372:      {
        6:  373:	_Self __tmp = *this;
        6:  374:	_M_node = _Rb_tree_increment(_M_node);
        6:  375:	return __tmp;
        6:  375-block  0
        -:  376:      }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEppEi:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEEppEi called 6 returned 100% blocks executed 100%
        6:  371:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  372:      {
        6:  373:	_Self __tmp = *this;
        6:  374:	_M_node = _Rb_tree_increment(_M_node);
        6:  375:	return __tmp;
        6:  375-block  0
        -:  376:      }
------------------
        -:  377:
        -:  378:      _Self&
        -:  379:      operator--() _GLIBCXX_NOEXCEPT
        -:  380:      {
        -:  381:	_M_node = _Rb_tree_decrement(_M_node);
        -:  382:	return *this;
        -:  383:      }
        -:  384:
        -:  385:      _Self
        -:  386:      operator--(int) _GLIBCXX_NOEXCEPT
        -:  387:      {
        -:  388:	_Self __tmp = *this;
        -:  389:	_M_node = _Rb_tree_decrement(_M_node);
        -:  390:	return __tmp;
        -:  391:      }
        -:  392:
        -:  393:      friend bool
     1134:  394:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
     1134:  395:      { return __x._M_node == __y._M_node; }
------------------
_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEESC_:
function _ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEESC_ called 354 returned 100% blocks executed 100%
      354:  394:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      354:  395:      { return __x._M_node == __y._M_node; }
      354:  395-block  0
------------------
_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEESE_:
function _ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEESE_ called 780 returned 100% blocks executed 100%
      780:  394:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      780:  395:      { return __x._M_node == __y._M_node; }
      780:  395-block  0
------------------
        -:  396:
        -:  397:      friend bool
      154:  398:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      154:  399:      { return __x._M_node != __y._M_node; }
------------------
_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEESC_:
function _ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKS0_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EiEESC_ called 39 returned 100% blocks executed 100%
       39:  398:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
       39:  399:      { return __x._M_node != __y._M_node; }
       39:  399-block  0
------------------
_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEESE_:
function _ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEESE_ called 115 returned 100% blocks executed 100%
      115:  398:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      115:  399:      { return __x._M_node != __y._M_node; }
      115:  399-block  0
------------------
        -:  400:
        -:  401:      _Base_ptr _M_node;
        -:  402:    };
        -:  403:
        -:  404:  void
        -:  405:  _Rb_tree_insert_and_rebalance(const bool __insert_left,
        -:  406:				_Rb_tree_node_base* __x,
        -:  407:				_Rb_tree_node_base* __p,
        -:  408:				_Rb_tree_node_base& __header) throw ();
        -:  409:
        -:  410:  _Rb_tree_node_base*
        -:  411:  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
        -:  412:			       _Rb_tree_node_base& __header) throw ();
        -:  413:
        -:  414:#if __cplusplus >= 201402L
        -:  415:  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
        -:  416:    struct __has_is_transparent
        -:  417:    { };
        -:  418:
        -:  419:  template<typename _Cmp, typename _SfinaeType>
        -:  420:    struct __has_is_transparent<_Cmp, _SfinaeType,
        -:  421:				__void_t<typename _Cmp::is_transparent>>
        -:  422:    { typedef void type; };
        -:  423:
        -:  424:  template<typename _Cmp, typename _SfinaeType>
        -:  425:    using __has_is_transparent_t
        -:  426:      = typename __has_is_transparent<_Cmp, _SfinaeType>::type;
        -:  427:#endif
        -:  428:
        -:  429:#if __cplusplus > 201402L
        -:  430:  template<typename _Tree1, typename _Cmp2>
        -:  431:    struct _Rb_tree_merge_helper { };
        -:  432:#endif
        -:  433:
        -:  434:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -:  435:	   typename _Compare, typename _Alloc = allocator<_Val> >
        -:  436:    class _Rb_tree
        -:  437:    {
        -:  438:      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        -:  439:	rebind<_Rb_tree_node<_Val> >::other _Node_allocator;
        -:  440:
        -:  441:      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;
        -:  442:
        -:  443:    protected:
        -:  444:      typedef _Rb_tree_node_base* 		_Base_ptr;
        -:  445:      typedef const _Rb_tree_node_base* 	_Const_Base_ptr;
        -:  446:      typedef _Rb_tree_node<_Val>* 		_Link_type;
        -:  447:      typedef const _Rb_tree_node<_Val>*	_Const_Link_type;
        -:  448:
        -:  449:    private:
        -:  450:      // Functor recycling a pool of nodes and using allocation once the pool
        -:  451:      // is empty.
        -:  452:      struct _Reuse_or_alloc_node
        -:  453:      {
       66:  454:	_Reuse_or_alloc_node(_Rb_tree& __t)
       66:  455:	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
        -:  456:	{
       66:  457:	  if (_M_root)
        -:  458:	    {
        3:  459:	      _M_root->_M_parent = 0;
        -:  460:
        3:  461:	      if (_M_nodes->_M_left)
    #####:  462:		_M_nodes = _M_nodes->_M_left;
        -:  463:	    }
        -:  464:	  else
       63:  465:	    _M_nodes = 0;
       66:  466:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_nodeC2ERSF_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_nodeC2ERSF_ called 22 returned 100% blocks executed 86%
       22:  454:	_Reuse_or_alloc_node(_Rb_tree& __t)
       22:  455:	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
       22:  455-block  0
call    0 returned 22
call    1 returned 22
        -:  456:	{
       22:  457:	  if (_M_root)
branch  0 taken 1 (fallthrough)
branch  1 taken 21
        -:  458:	    {
        1:  459:	      _M_root->_M_parent = 0;
        -:  460:
        1:  461:	      if (_M_nodes->_M_left)
        1:  461-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  462:		_M_nodes = _M_nodes->_M_left;
    %%%%%:  462-block  0
        -:  463:	    }
        -:  464:	  else
       21:  465:	    _M_nodes = 0;
       21:  465-block  0
       22:  466:	}
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_nodeC2ERSH_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_nodeC2ERSH_ called 44 returned 100% blocks executed 86%
       44:  454:	_Reuse_or_alloc_node(_Rb_tree& __t)
       44:  455:	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
       44:  455-block  0
call    0 returned 44
call    1 returned 44
        -:  456:	{
       44:  457:	  if (_M_root)
branch  0 taken 2 (fallthrough)
branch  1 taken 42
        -:  458:	    {
        2:  459:	      _M_root->_M_parent = 0;
        -:  460:
        2:  461:	      if (_M_nodes->_M_left)
        2:  461-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  462:		_M_nodes = _M_nodes->_M_left;
    %%%%%:  462-block  0
        -:  463:	    }
        -:  464:	  else
       42:  465:	    _M_nodes = 0;
       42:  465-block  0
       44:  466:	}
------------------
        -:  467:
        -:  468:#if __cplusplus >= 201103L
        -:  469:	_Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;
        -:  470:#endif
        -:  471:
       66:  472:	~_Reuse_or_alloc_node()
       66:  473:	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_nodeD2Ev:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_nodeD2Ev called 22 returned 100% blocks executed 100%
       22:  472:	~_Reuse_or_alloc_node()
       22:  473:	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
       22:  473-block  0
call    0 returned 22
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_nodeD2Ev:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_nodeD2Ev called 44 returned 100% blocks executed 100%
       44:  472:	~_Reuse_or_alloc_node()
       44:  473:	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
       44:  473-block  0
call    0 returned 44
------------------
        -:  474:
        -:  475:	template<typename _Arg>
        -:  476:	  _Link_type
        -:  477:#if __cplusplus < 201103L
        -:  478:	  operator()(const _Arg& __arg)
        -:  479:#else
      198:  480:	  operator()(_Arg&& __arg)
        -:  481:#endif
        -:  482:	  {
      198:  483:	    _Link_type __node = static_cast<_Link_type>(_M_extract());
      198:  484:	    if (__node)
        -:  485:	      {
        9:  486:		_M_t._M_destroy_node(__node);
        9:  487:		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
        9:  488:		return __node;
        -:  489:	      }
        -:  490:
      189:  491:	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
        -:  492:	  }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_ called 66 returned 100% blocks executed 100%
       66:  480:	  operator()(_Arg&& __arg)
        -:  481:#endif
        -:  482:	  {
       66:  483:	    _Link_type __node = static_cast<_Link_type>(_M_extract());
       66:  483-block  0
call    0 returned 66
       66:  484:	    if (__node)
branch  0 taken 3 (fallthrough)
branch  1 taken 63
        -:  485:	      {
        3:  486:		_M_t._M_destroy_node(__node);
        3:  486-block  0
call    0 returned 3
        3:  487:		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
call    0 returned 3
call    1 returned 3
        3:  488:		return __node;
        -:  489:	      }
        -:  490:
       63:  491:	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
       63:  491-block  0
call    0 returned 63
call    1 returned 63
        -:  492:	  }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_nodeclIRKSB_EEPSt13_Rb_tree_nodeISB_EOT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_nodeclIRKSB_EEPSt13_Rb_tree_nodeISB_EOT_ called 132 returned 100% blocks executed 100%
      132:  480:	  operator()(_Arg&& __arg)
        -:  481:#endif
        -:  482:	  {
      132:  483:	    _Link_type __node = static_cast<_Link_type>(_M_extract());
      132:  483-block  0
call    0 returned 132
      132:  484:	    if (__node)
branch  0 taken 6 (fallthrough)
branch  1 taken 126
        -:  485:	      {
        6:  486:		_M_t._M_destroy_node(__node);
        6:  486-block  0
call    0 returned 6
        6:  487:		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
call    0 returned 6
call    1 returned 6
        6:  488:		return __node;
        -:  489:	      }
        -:  490:
      126:  491:	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
      126:  491-block  0
call    0 returned 126
call    1 returned 126
        -:  492:	  }
------------------
        -:  493:
        -:  494:      private:
        -:  495:	_Base_ptr
      198:  496:	_M_extract()
        -:  497:	{
      198:  498:	  if (!_M_nodes)
      189:  499:	    return _M_nodes;
        -:  500:
        9:  501:	  _Base_ptr __node = _M_nodes;
        9:  502:	  _M_nodes = _M_nodes->_M_parent;
        9:  503:	  if (_M_nodes)
        -:  504:	    {
        6:  505:	      if (_M_nodes->_M_right == __node)
        -:  506:		{
        3:  507:		  _M_nodes->_M_right = 0;
        -:  508:
        3:  509:		  if (_M_nodes->_M_left)
        -:  510:		    {
        3:  511:		      _M_nodes = _M_nodes->_M_left;
        -:  512:
        3:  513:		      while (_M_nodes->_M_right)
    #####:  514:			_M_nodes = _M_nodes->_M_right;
        -:  515:
        3:  516:		      if (_M_nodes->_M_left)
    #####:  517:			_M_nodes = _M_nodes->_M_left;
        -:  518:		    }
        -:  519:		}
        -:  520:	      else // __node is on the left.
        3:  521:		_M_nodes->_M_left = 0;
        -:  522:	    }
        -:  523:	  else
        3:  524:	    _M_root = 0;
        -:  525:
        9:  526:	  return __node;
        -:  527:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_node10_M_extractEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE20_Reuse_or_alloc_node10_M_extractEv called 66 returned 100% blocks executed 86%
       66:  496:	_M_extract()
        -:  497:	{
       66:  498:	  if (!_M_nodes)
       66:  498-block  0
branch  0 taken 63 (fallthrough)
branch  1 taken 3
       63:  499:	    return _M_nodes;
       63:  499-block  0
        -:  500:
        3:  501:	  _Base_ptr __node = _M_nodes;
        3:  502:	  _M_nodes = _M_nodes->_M_parent;
        3:  503:	  if (_M_nodes)
        3:  503-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  504:	    {
        2:  505:	      if (_M_nodes->_M_right == __node)
        2:  505-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  506:		{
        1:  507:		  _M_nodes->_M_right = 0;
        -:  508:
        1:  509:		  if (_M_nodes->_M_left)
        1:  509-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  510:		    {
        1:  511:		      _M_nodes = _M_nodes->_M_left;
        1:  511-block  0
        -:  512:
        1:  513:		      while (_M_nodes->_M_right)
        1:  513-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  514:			_M_nodes = _M_nodes->_M_right;
    %%%%%:  514-block  0
        -:  515:
        1:  516:		      if (_M_nodes->_M_left)
        1:  516-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  517:			_M_nodes = _M_nodes->_M_left;
    %%%%%:  517-block  0
        -:  518:		    }
        -:  519:		}
        -:  520:	      else // __node is on the left.
        1:  521:		_M_nodes->_M_left = 0;
        1:  521-block  0
        -:  522:	    }
        -:  523:	  else
        1:  524:	    _M_root = 0;
        1:  524-block  0
        -:  525:
        3:  526:	  return __node;
        3:  526-block  0
        -:  527:	}
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_node10_M_extractEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE20_Reuse_or_alloc_node10_M_extractEv called 132 returned 100% blocks executed 86%
      132:  496:	_M_extract()
        -:  497:	{
      132:  498:	  if (!_M_nodes)
      132:  498-block  0
branch  0 taken 126 (fallthrough)
branch  1 taken 6
      126:  499:	    return _M_nodes;
      126:  499-block  0
        -:  500:
        6:  501:	  _Base_ptr __node = _M_nodes;
        6:  502:	  _M_nodes = _M_nodes->_M_parent;
        6:  503:	  if (_M_nodes)
        6:  503-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        -:  504:	    {
        4:  505:	      if (_M_nodes->_M_right == __node)
        4:  505-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -:  506:		{
        2:  507:		  _M_nodes->_M_right = 0;
        -:  508:
        2:  509:		  if (_M_nodes->_M_left)
        2:  509-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:  510:		    {
        2:  511:		      _M_nodes = _M_nodes->_M_left;
        2:  511-block  0
        -:  512:
        2:  513:		      while (_M_nodes->_M_right)
        2:  513-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  514:			_M_nodes = _M_nodes->_M_right;
    %%%%%:  514-block  0
        -:  515:
        2:  516:		      if (_M_nodes->_M_left)
        2:  516-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  517:			_M_nodes = _M_nodes->_M_left;
    %%%%%:  517-block  0
        -:  518:		    }
        -:  519:		}
        -:  520:	      else // __node is on the left.
        2:  521:		_M_nodes->_M_left = 0;
        2:  521-block  0
        -:  522:	    }
        -:  523:	  else
        2:  524:	    _M_root = 0;
        2:  524-block  0
        -:  525:
        6:  526:	  return __node;
        6:  526-block  0
        -:  527:	}
------------------
        -:  528:
        -:  529:	_Base_ptr _M_root;
        -:  530:	_Base_ptr _M_nodes;
        -:  531:	_Rb_tree& _M_t;
        -:  532:      };
        -:  533:
        -:  534:      // Functor similar to the previous one but without any pool of nodes to
        -:  535:      // recycle.
        -:  536:      struct _Alloc_node
        -:  537:      {
        -:  538:	_Alloc_node(_Rb_tree& __t)
        -:  539:	: _M_t(__t) { }
        -:  540:
        -:  541:	template<typename _Arg>
        -:  542:	  _Link_type
        -:  543:#if __cplusplus < 201103L
        -:  544:	  operator()(const _Arg& __arg) const
        -:  545:#else
        -:  546:	  operator()(_Arg&& __arg) const
        -:  547:#endif
        -:  548:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
        -:  549:
        -:  550:      private:
        -:  551:	_Rb_tree& _M_t;
        -:  552:      };
        -:  553:
        -:  554:    public:
        -:  555:      typedef _Key 				key_type;
        -:  556:      typedef _Val 				value_type;
        -:  557:      typedef value_type* 			pointer;
        -:  558:      typedef const value_type* 		const_pointer;
        -:  559:      typedef value_type& 			reference;
        -:  560:      typedef const value_type& 		const_reference;
        -:  561:      typedef size_t 				size_type;
        -:  562:      typedef ptrdiff_t 			difference_type;
        -:  563:      typedef _Alloc 				allocator_type;
        -:  564:
        -:  565:      _Node_allocator&
     1990:  566:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
     1990:  567:      { return this->_M_impl; }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE21_M_get_Node_allocatorEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE21_M_get_Node_allocatorEv called 674 returned 100% blocks executed 100%
      674:  566:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
      674:  567:      { return this->_M_impl; }
      674:  567-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv called 1316 returned 100% blocks executed 100%
     1316:  566:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
     1316:  567:      { return this->_M_impl; }
     1316:  567-block  0
------------------
        -:  568:
        -:  569:      const _Node_allocator&
    #####:  570:      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
    #####:  571:      { return this->_M_impl; }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE21_M_get_Node_allocatorEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE21_M_get_Node_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  570:      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
    #####:  571:      { return this->_M_impl; }
    %%%%%:  571-block  0
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  570:      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
    #####:  571:      { return this->_M_impl; }
    %%%%%:  571-block  0
------------------
        -:  572:
        -:  573:      allocator_type
        -:  574:      get_allocator() const _GLIBCXX_NOEXCEPT
        -:  575:      { return allocator_type(_M_get_Node_allocator()); }
        -:  576:
        -:  577:    protected:
        -:  578:      _Link_type
      493:  579:      _M_get_node()
      493:  580:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11_M_get_nodeEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11_M_get_nodeEv called 167 returned 100% blocks executed 100%
      167:  579:      _M_get_node()
      167:  580:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
      167:  580-block  0
call    0 returned 167
call    1 returned 167
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_get_nodeEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_get_nodeEv called 326 returned 100% blocks executed 100%
      326:  579:      _M_get_node()
      326:  580:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
      326:  580-block  0
call    0 returned 326
call    1 returned 326
------------------
        -:  581:
        -:  582:      void
      493:  583:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      493:  584:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E called 167 returned 100% blocks executed 100%
      167:  583:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      167:  584:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
      167:  584-block  0
call    0 returned 167
call    1 returned 167
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E called 326 returned 100% blocks executed 100%
      326:  583:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      326:  584:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
      326:  584-block  0
call    0 returned 326
call    1 returned 326
------------------
        -:  585:
        -:  586:#if __cplusplus < 201103L
        -:  587:      void
        -:  588:      _M_construct_node(_Link_type __node, const value_type& __x)
        -:  589:      {
        -:  590:	__try
        -:  591:	  { get_allocator().construct(__node->_M_valptr(), __x); }
        -:  592:	__catch(...)
        -:  593:	  {
        -:  594:	    _M_put_node(__node);
        -:  595:	    __throw_exception_again;
        -:  596:	  }
        -:  597:      }
        -:  598:
        -:  599:      _Link_type
        -:  600:      _M_create_node(const value_type& __x)
        -:  601:      {
        -:  602:	_Link_type __tmp = _M_get_node();
        -:  603:	_M_construct_node(__tmp, __x);
        -:  604:	return __tmp;
        -:  605:      }
        -:  606:#else
        -:  607:      template<typename... _Args>
        -:  608:	void
      502:  609:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  610:	{
        -:  611:	  __try
        -:  612:	    {
      502:  613:	      ::new(__node) _Rb_tree_node<_Val>;
      502:  614:	      _Alloc_traits::construct(_M_get_Node_allocator(),
        -:  615:				       __node->_M_valptr(),
        -:  616:				       std::forward<_Args>(__args)...);
        -:  617:	    }
    =====:  618:	  __catch(...)
        -:  619:	    {
    =====:  620:	      __node->~_Rb_tree_node<_Val>();
    =====:  621:	      _M_put_node(__node);
    =====:  622:	      __throw_exception_again;
        -:  623:	    }
      502:  624:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_ called 66 returned 100% blocks executed 58%
       66:  609:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  610:	{
        -:  611:	  __try
        -:  612:	    {
       66:  613:	      ::new(__node) _Rb_tree_node<_Val>;
       66:  613-block  0
call    0 returned 66
       66:  614:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 66
call    1 returned 66
call    2 returned 66
call    3 returned 66
branch  4 taken 66 (fallthrough)
branch  5 taken 0 (throw)
        -:  615:				       __node->_M_valptr(),
        -:  616:				       std::forward<_Args>(__args)...);
        -:  617:	    }
    =====:  618:	  __catch(...)
    $$$$$:  618-block  0
call    0 never executed
    $$$$$:  618-block  1
call    1 never executed
        -:  619:	    {
    =====:  620:	      __node->~_Rb_tree_node<_Val>();
    =====:  621:	      _M_put_node(__node);
call    0 never executed
    =====:  622:	      __throw_exception_again;
call    0 never executed
        -:  623:	    }
       66:  624:	}
       66:  624-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSB_EEEvPSt13_Rb_tree_nodeISB_EDpOT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSB_EEEvPSt13_Rb_tree_nodeISB_EDpOT_ called 132 returned 100% blocks executed 58%
      132:  609:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  610:	{
        -:  611:	  __try
        -:  612:	    {
      132:  613:	      ::new(__node) _Rb_tree_node<_Val>;
      132:  613-block  0
call    0 returned 132
      132:  614:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 132
call    1 returned 132
call    2 returned 132
call    3 returned 132
branch  4 taken 132 (fallthrough)
branch  5 taken 0 (throw)
        -:  615:				       __node->_M_valptr(),
        -:  616:				       std::forward<_Args>(__args)...);
        -:  617:	    }
    =====:  618:	  __catch(...)
    $$$$$:  618-block  0
call    0 never executed
    $$$$$:  618-block  1
call    1 never executed
        -:  619:	    {
    =====:  620:	      __node->~_Rb_tree_node<_Val>();
    =====:  621:	      _M_put_node(__node);
call    0 never executed
    =====:  622:	      __throw_exception_again;
call    0 never executed
        -:  623:	    }
      132:  624:	}
      132:  624-block  0
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEEvPSt13_Rb_tree_nodeIS9_EDpOT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEEvPSt13_Rb_tree_nodeIS9_EDpOT_ called 104 returned 100% blocks executed 64%
      104:  609:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  610:	{
        -:  611:	  __try
        -:  612:	    {
      104:  613:	      ::new(__node) _Rb_tree_node<_Val>;
      104:  613-block  0
call    0 returned 104
      104:  614:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 104
call    1 returned 104
call    2 returned 104
call    3 returned 104
call    4 returned 104
call    5 returned 104
branch  6 taken 104 (fallthrough)
branch  7 taken 0 (throw)
        -:  615:				       __node->_M_valptr(),
        -:  616:				       std::forward<_Args>(__args)...);
        -:  617:	    }
    =====:  618:	  __catch(...)
    $$$$$:  618-block  0
call    0 never executed
    $$$$$:  618-block  1
call    1 never executed
        -:  619:	    {
    =====:  620:	      __node->~_Rb_tree_node<_Val>();
    =====:  621:	      _M_put_node(__node);
call    0 never executed
    =====:  622:	      __throw_exception_again;
call    0 never executed
        -:  623:	    }
      104:  624:	}
      104:  624-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_ called 200 returned 100% blocks executed 64%
      200:  609:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  610:	{
        -:  611:	  __try
        -:  612:	    {
      200:  613:	      ::new(__node) _Rb_tree_node<_Val>;
      200:  613-block  0
call    0 returned 200
      200:  614:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 200
call    1 returned 200
call    2 returned 200
call    3 returned 200
call    4 returned 200
call    5 returned 200
branch  6 taken 200 (fallthrough)
branch  7 taken 0 (throw)
        -:  615:				       __node->_M_valptr(),
        -:  616:				       std::forward<_Args>(__args)...);
        -:  617:	    }
    =====:  618:	  __catch(...)
    $$$$$:  618-block  0
call    0 never executed
    $$$$$:  618-block  1
call    1 never executed
        -:  619:	    {
    =====:  620:	      __node->~_Rb_tree_node<_Val>();
    =====:  621:	      _M_put_node(__node);
call    0 never executed
    =====:  622:	      __throw_exception_again;
call    0 never executed
        -:  623:	    }
      200:  624:	}
      200:  624-block  0
------------------
        -:  625:
        -:  626:      template<typename... _Args>
        -:  627:	_Link_type
      493:  628:	_M_create_node(_Args&&... __args)
        -:  629:	{
      493:  630:	  _Link_type __tmp = _M_get_node();
      493:  631:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
      493:  632:	  return __tmp;
        -:  633:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_ called 63 returned 100% blocks executed 100%
       63:  628:	_M_create_node(_Args&&... __args)
        -:  629:	{
       63:  630:	  _Link_type __tmp = _M_get_node();
       63:  630-block  0
call    0 returned 63
       63:  631:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 63
call    1 returned 63
       63:  632:	  return __tmp;
        -:  633:	}
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSB_EEEPSt13_Rb_tree_nodeISB_EDpOT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSB_EEEPSt13_Rb_tree_nodeISB_EDpOT_ called 126 returned 100% blocks executed 100%
      126:  628:	_M_create_node(_Args&&... __args)
        -:  629:	{
      126:  630:	  _Link_type __tmp = _M_get_node();
      126:  630-block  0
call    0 returned 126
      126:  631:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 126
call    1 returned 126
      126:  632:	  return __tmp;
        -:  633:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEEPSt13_Rb_tree_nodeIS9_EDpOT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEEPSt13_Rb_tree_nodeIS9_EDpOT_ called 104 returned 100% blocks executed 100%
      104:  628:	_M_create_node(_Args&&... __args)
        -:  629:	{
      104:  630:	  _Link_type __tmp = _M_get_node();
      104:  630-block  0
call    0 returned 104
      104:  631:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 104
call    1 returned 104
call    2 returned 104
call    3 returned 104
      104:  632:	  return __tmp;
        -:  633:	}
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_ called 200 returned 100% blocks executed 100%
      200:  628:	_M_create_node(_Args&&... __args)
        -:  629:	{
      200:  630:	  _Link_type __tmp = _M_get_node();
      200:  630-block  0
call    0 returned 200
      200:  631:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 200
call    1 returned 200
call    2 returned 200
call    3 returned 200
      200:  632:	  return __tmp;
        -:  633:	}
------------------
        -:  634:#endif
        -:  635:
        -:  636:      void
      502:  637:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  638:      {
        -:  639:#if __cplusplus < 201103L
        -:  640:	get_allocator().destroy(__p->_M_valptr());
        -:  641:#else
      502:  642:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
      502:  643:	__p->~_Rb_tree_node<_Val>();
        -:  644:#endif
      502:  645:      }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E called 170 returned 100% blocks executed 100%
      170:  637:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  638:      {
        -:  639:#if __cplusplus < 201103L
        -:  640:	get_allocator().destroy(__p->_M_valptr());
        -:  641:#else
      170:  642:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
      170:  642-block  0
call    0 returned 170
call    1 returned 170
call    2 returned 170
      170:  643:	__p->~_Rb_tree_node<_Val>();
        -:  644:#endif
      170:  645:      }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E called 332 returned 100% blocks executed 100%
      332:  637:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  638:      {
        -:  639:#if __cplusplus < 201103L
        -:  640:	get_allocator().destroy(__p->_M_valptr());
        -:  641:#else
      332:  642:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
      332:  642-block  0
call    0 returned 332
call    1 returned 332
call    2 returned 332
      332:  643:	__p->~_Rb_tree_node<_Val>();
        -:  644:#endif
      332:  645:      }
------------------
        -:  646:
        -:  647:      void
      493:  648:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  649:      {
      493:  650:	_M_destroy_node(__p);
      493:  651:	_M_put_node(__p);
      493:  652:      }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E called 167 returned 100% blocks executed 100%
      167:  648:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  649:      {
      167:  650:	_M_destroy_node(__p);
      167:  650-block  0
call    0 returned 167
      167:  651:	_M_put_node(__p);
call    0 returned 167
      167:  652:      }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E called 326 returned 100% blocks executed 100%
      326:  648:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  649:      {
      326:  650:	_M_destroy_node(__p);
      326:  650-block  0
call    0 returned 326
      326:  651:	_M_put_node(__p);
call    0 returned 326
      326:  652:      }
------------------
        -:  653:
        -:  654:      template<typename _NodeGen>
        -:  655:	_Link_type
      198:  656:	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
        -:  657:	{
      198:  658:	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
      198:  659:	  __tmp->_M_color = __x->_M_color;
      198:  660:	  __tmp->_M_left = 0;
      198:  661:	  __tmp->_M_right = 0;
      198:  662:	  return __tmp;
        -:  663:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE13_M_clone_nodeINSF_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_RT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE13_M_clone_nodeINSF_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_RT_ called 66 returned 100% blocks executed 100%
       66:  656:	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
        -:  657:	{
       66:  658:	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
       66:  658-block  0
call    0 returned 66
call    1 returned 66
       66:  659:	  __tmp->_M_color = __x->_M_color;
       66:  660:	  __tmp->_M_left = 0;
       66:  661:	  __tmp->_M_right = 0;
       66:  662:	  return __tmp;
        -:  663:	}
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_M_clone_nodeINSH_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeISB_EPKSL_RT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_M_clone_nodeINSH_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeISB_EPKSL_RT_ called 132 returned 100% blocks executed 100%
      132:  656:	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
        -:  657:	{
      132:  658:	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
      132:  658-block  0
call    0 returned 132
call    1 returned 132
      132:  659:	  __tmp->_M_color = __x->_M_color;
      132:  660:	  __tmp->_M_left = 0;
      132:  661:	  __tmp->_M_right = 0;
      132:  662:	  return __tmp;
        -:  663:	}
------------------
        -:  664:
        -:  665:    protected:
        -:  666:#if _GLIBCXX_INLINE_VERSION
        -:  667:      template<typename _Key_compare>
        -:  668:#else
        -:  669:      // Unused _Is_pod_comparator is kept as it is part of mangled name.
        -:  670:      template<typename _Key_compare,
        -:  671:	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
        -:  672:#endif
        -:  673:	struct _Rb_tree_impl
        -:  674:	: public _Node_allocator
        -:  675:	, public _Rb_tree_key_compare<_Key_compare>
        -:  676:	, public _Rb_tree_header
        -:  677:	{
        -:  678:	  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;
        -:  679:
      144:  680:	  _Rb_tree_impl()
        -:  681:	    _GLIBCXX_NOEXCEPT_IF(
        -:  682:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  683:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
      144:  684:	  : _Node_allocator()
      144:  685:	  { }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC2Ev:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC2Ev called 48 returned 100% blocks executed 100%
       48:  680:	  _Rb_tree_impl()
        -:  681:	    _GLIBCXX_NOEXCEPT_IF(
        -:  682:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  683:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
       48:  684:	  : _Node_allocator()
       48:  684-block  0
call    0 returned 48
call    1 returned 48
call    2 returned 48
       48:  685:	  { }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC2Ev:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC2Ev called 96 returned 100% blocks executed 100%
       96:  680:	  _Rb_tree_impl()
        -:  681:	    _GLIBCXX_NOEXCEPT_IF(
        -:  682:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  683:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
       96:  684:	  : _Node_allocator()
       96:  684-block  0
call    0 returned 96
call    1 returned 96
call    2 returned 96
       96:  685:	  { }
------------------
        -:  686:
        -:  687:	  _Rb_tree_impl(const _Rb_tree_impl& __x)
        -:  688:	  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
        -:  689:	  , _Base_key_compare(__x._M_key_compare)
        -:  690:	  { }
        -:  691:
        -:  692:#if __cplusplus < 201103L
        -:  693:	  _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
        -:  694:	  : _Node_allocator(__a), _Base_key_compare(__comp)
        -:  695:	  { }
        -:  696:#else
        -:  697:	  _Rb_tree_impl(_Rb_tree_impl&& __x)
        -:  698:	  noexcept( is_nothrow_move_constructible<_Base_key_compare>::value )
        -:  699:	  : _Node_allocator(std::move(__x)),
        -:  700:	    _Base_key_compare(std::move(__x)),
        -:  701:	    _Rb_tree_header(std::move(__x))
        -:  702:	  { }
        -:  703:
        -:  704:	  explicit
        -:  705:	  _Rb_tree_impl(_Node_allocator&& __a)
        -:  706:	  : _Node_allocator(std::move(__a))
        -:  707:	  { }
        -:  708:
        -:  709:	  _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)
        -:  710:	  : _Node_allocator(std::move(__a)),
        -:  711:	    _Base_key_compare(std::move(__x)),
        -:  712:	    _Rb_tree_header(std::move(__x))
        -:  713:	  { }
        -:  714:
        -:  715:	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
        -:  716:	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
        -:  717:	  { }
        -:  718:#endif
        -:  719:	};
        -:  720:
        -:  721:      _Rb_tree_impl<_Compare> _M_impl;
        -:  722:
        -:  723:    protected:
        -:  724:      _Base_ptr&
      132:  725:      _M_root() _GLIBCXX_NOEXCEPT
      132:  726:      { return this->_M_impl._M_header._M_parent; }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_rootEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_rootEv called 44 returned 100% blocks executed 100%
       44:  725:      _M_root() _GLIBCXX_NOEXCEPT
       44:  726:      { return this->_M_impl._M_header._M_parent; }
       44:  726-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_rootEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_rootEv called 88 returned 100% blocks executed 100%
       88:  725:      _M_root() _GLIBCXX_NOEXCEPT
       88:  726:      { return this->_M_impl._M_header._M_parent; }
       88:  726-block  0
------------------
        -:  727:
        -:  728:      _Const_Base_ptr
       66:  729:      _M_root() const _GLIBCXX_NOEXCEPT
       66:  730:      { return this->_M_impl._M_header._M_parent; }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_rootEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_rootEv called 22 returned 100% blocks executed 100%
       22:  729:      _M_root() const _GLIBCXX_NOEXCEPT
       22:  730:      { return this->_M_impl._M_header._M_parent; }
       22:  730-block  0
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_rootEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_rootEv called 44 returned 100% blocks executed 100%
       44:  729:      _M_root() const _GLIBCXX_NOEXCEPT
       44:  730:      { return this->_M_impl._M_header._M_parent; }
       44:  730-block  0
------------------
        -:  731:
        -:  732:      _Base_ptr&
      154:  733:      _M_leftmost() _GLIBCXX_NOEXCEPT
      154:  734:      { return this->_M_impl._M_header._M_left; }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11_M_leftmostEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11_M_leftmostEv called 78 returned 100% blocks executed 100%
       78:  733:      _M_leftmost() _GLIBCXX_NOEXCEPT
       78:  734:      { return this->_M_impl._M_header._M_left; }
       78:  734-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_leftmostEv called 76 returned 100% blocks executed 100%
       76:  733:      _M_leftmost() _GLIBCXX_NOEXCEPT
       76:  734:      { return this->_M_impl._M_header._M_left; }
       76:  734-block  0
------------------
        -:  735:
        -:  736:      _Const_Base_ptr
        -:  737:      _M_leftmost() const _GLIBCXX_NOEXCEPT
        -:  738:      { return this->_M_impl._M_header._M_left; }
        -:  739:
        -:  740:      _Base_ptr&
      460:  741:      _M_rightmost() _GLIBCXX_NOEXCEPT
      460:  742:      { return this->_M_impl._M_header._M_right; }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_rightmostEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_rightmostEv called 120 returned 100% blocks executed 100%
      120:  741:      _M_rightmost() _GLIBCXX_NOEXCEPT
      120:  742:      { return this->_M_impl._M_header._M_right; }
      120:  742-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_rightmostEv called 340 returned 100% blocks executed 100%
      340:  741:      _M_rightmost() _GLIBCXX_NOEXCEPT
      340:  742:      { return this->_M_impl._M_header._M_right; }
      340:  742-block  0
------------------
        -:  743:
        -:  744:      _Const_Base_ptr
        -:  745:      _M_rightmost() const _GLIBCXX_NOEXCEPT
        -:  746:      { return this->_M_impl._M_header._M_right; }
        -:  747:
        -:  748:      _Link_type
      900:  749:      _M_begin() _GLIBCXX_NOEXCEPT
      900:  750:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_M_beginEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_M_beginEv called 216 returned 100% blocks executed 100%
      216:  749:      _M_begin() _GLIBCXX_NOEXCEPT
      216:  750:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
      216:  750-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv called 684 returned 100% blocks executed 100%
      684:  749:      _M_begin() _GLIBCXX_NOEXCEPT
      684:  750:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
      684:  750-block  0
------------------
        -:  751:
        -:  752:      _Const_Link_type
      634:  753:      _M_begin() const _GLIBCXX_NOEXCEPT
        -:  754:      {
        -:  755:	return static_cast<_Const_Link_type>
      634:  756:	  (this->_M_impl._M_header._M_parent);
        -:  757:      }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_M_beginEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_M_beginEv called 204 returned 100% blocks executed 100%
      204:  753:      _M_begin() const _GLIBCXX_NOEXCEPT
        -:  754:      {
        -:  755:	return static_cast<_Const_Link_type>
      204:  756:	  (this->_M_impl._M_header._M_parent);
      204:  756-block  0
        -:  757:      }
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv called 430 returned 100% blocks executed 100%
      430:  753:      _M_begin() const _GLIBCXX_NOEXCEPT
        -:  754:      {
        -:  755:	return static_cast<_Const_Link_type>
      430:  756:	  (this->_M_impl._M_header._M_parent);
      430:  756-block  0
        -:  757:      }
------------------
        -:  758:
        -:  759:      _Base_ptr
     1379:  760:      _M_end() _GLIBCXX_NOEXCEPT
     1379:  761:      { return &this->_M_impl._M_header; }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_M_endEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_M_endEv called 361 returned 100% blocks executed 100%
      361:  760:      _M_end() _GLIBCXX_NOEXCEPT
      361:  761:      { return &this->_M_impl._M_header; }
      361:  761-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv called 1018 returned 100% blocks executed 100%
     1018:  760:      _M_end() _GLIBCXX_NOEXCEPT
     1018:  761:      { return &this->_M_impl._M_header; }
     1018:  761-block  0
------------------
        -:  762:
        -:  763:      _Const_Base_ptr
      568:  764:      _M_end() const _GLIBCXX_NOEXCEPT
      568:  765:      { return &this->_M_impl._M_header; }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_M_endEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_M_endEv called 182 returned 100% blocks executed 100%
      182:  764:      _M_end() const _GLIBCXX_NOEXCEPT
      182:  765:      { return &this->_M_impl._M_header; }
      182:  765-block  0
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv called 386 returned 100% blocks executed 100%
      386:  764:      _M_end() const _GLIBCXX_NOEXCEPT
      386:  765:      { return &this->_M_impl._M_header; }
      386:  765-block  0
------------------
        -:  766:
        -:  767:      static const_reference
        -:  768:      _S_value(_Const_Link_type __x)
        -:  769:      { return *__x->_M_valptr(); }
        -:  770:
        -:  771:      static const _Key&
     3746:  772:      _S_key(_Const_Link_type __x)
        -:  773:      {
        -:  774:#if __cplusplus >= 201103L
        -:  775:	// If we're asking for the key we're presumably using the comparison
        -:  776:	// object, and so this is a good place to sanity check it.
        -:  777:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  778:		      "comparison object must be invocable "
        -:  779:		      "with two arguments of key type");
        -:  780:# if __cplusplus >= 201703L
        -:  781:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  782:	// 2542. Missing const requirements for associative containers
        -:  783:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  784:	  static_assert(
        -:  785:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  786:	      "comparison object must be invocable as const");
        -:  787:# endif // C++17
        -:  788:#endif // C++11
        -:  789:
     3746:  790:	return _KeyOfValue()(*__x->_M_valptr());
        -:  791:      }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E called 914 returned 100% blocks executed 100%
      914:  772:      _S_key(_Const_Link_type __x)
        -:  773:      {
        -:  774:#if __cplusplus >= 201103L
        -:  775:	// If we're asking for the key we're presumably using the comparison
        -:  776:	// object, and so this is a good place to sanity check it.
        -:  777:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  778:		      "comparison object must be invocable "
        -:  779:		      "with two arguments of key type");
        -:  780:# if __cplusplus >= 201703L
        -:  781:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  782:	// 2542. Missing const requirements for associative containers
        -:  783:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  784:	  static_assert(
        -:  785:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  786:	      "comparison object must be invocable as const");
        -:  787:# endif // C++17
        -:  788:#endif // C++11
        -:  789:
      914:  790:	return _KeyOfValue()(*__x->_M_valptr());
      914:  790-block  0
call    0 returned 914
call    1 returned 914
        -:  791:      }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E called 2832 returned 100% blocks executed 100%
     2832:  772:      _S_key(_Const_Link_type __x)
        -:  773:      {
        -:  774:#if __cplusplus >= 201103L
        -:  775:	// If we're asking for the key we're presumably using the comparison
        -:  776:	// object, and so this is a good place to sanity check it.
        -:  777:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  778:		      "comparison object must be invocable "
        -:  779:		      "with two arguments of key type");
        -:  780:# if __cplusplus >= 201703L
        -:  781:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  782:	// 2542. Missing const requirements for associative containers
        -:  783:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  784:	  static_assert(
        -:  785:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  786:	      "comparison object must be invocable as const");
        -:  787:# endif // C++17
        -:  788:#endif // C++11
        -:  789:
     2832:  790:	return _KeyOfValue()(*__x->_M_valptr());
     2832:  790-block  0
call    0 returned 2832
call    1 returned 2832
        -:  791:      }
------------------
        -:  792:
        -:  793:      static _Link_type
     1098:  794:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1098:  795:      { return static_cast<_Link_type>(__x->_M_left); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base called 257 returned 100% blocks executed 100%
      257:  794:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      257:  795:      { return static_cast<_Link_type>(__x->_M_left); }
      257:  795-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base called 841 returned 100% blocks executed 100%
      841:  794:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      841:  795:      { return static_cast<_Link_type>(__x->_M_left); }
      841:  795-block  0
------------------
        -:  796:
        -:  797:      static _Const_Link_type
      898:  798:      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      898:  799:      { return static_cast<_Const_Link_type>(__x->_M_left); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base called 219 returned 100% blocks executed 100%
      219:  798:      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      219:  799:      { return static_cast<_Const_Link_type>(__x->_M_left); }
      219:  799-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPKSt18_Rb_tree_node_base called 679 returned 100% blocks executed 100%
      679:  798:      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      679:  799:      { return static_cast<_Const_Link_type>(__x->_M_left); }
      679:  799-block  0
------------------
        -:  800:
        -:  801:      static _Link_type
     1112:  802:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1112:  803:      { return static_cast<_Link_type>(__x->_M_right); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base called 309 returned 100% blocks executed 100%
      309:  802:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      309:  803:      { return static_cast<_Link_type>(__x->_M_right); }
      309:  803-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base called 803 returned 100% blocks executed 100%
      803:  802:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      803:  803:      { return static_cast<_Link_type>(__x->_M_right); }
      803:  803-block  0
------------------
        -:  804:
        -:  805:      static _Const_Link_type
      530:  806:      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      530:  807:      { return static_cast<_Const_Link_type>(__x->_M_right); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base called 185 returned 100% blocks executed 100%
      185:  806:      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      185:  807:      { return static_cast<_Const_Link_type>(__x->_M_right); }
      185:  807-block  0
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPKSt18_Rb_tree_node_base called 345 returned 100% blocks executed 100%
      345:  806:      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      345:  807:      { return static_cast<_Const_Link_type>(__x->_M_right); }
      345:  807-block  0
------------------
        -:  808:
        -:  809:      static const_reference
        -:  810:      _S_value(_Const_Base_ptr __x)
        -:  811:      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
        -:  812:
        -:  813:      static const _Key&
      896:  814:      _S_key(_Const_Base_ptr __x)
      896:  815:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base called 236 returned 100% blocks executed 100%
      236:  814:      _S_key(_Const_Base_ptr __x)
      236:  815:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
      236:  815-block  0
call    0 returned 236
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base called 660 returned 100% blocks executed 100%
      660:  814:      _S_key(_Const_Base_ptr __x)
      660:  815:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
      660:  815-block  0
call    0 returned 660
------------------
        -:  816:
        -:  817:      static _Base_ptr
       66:  818:      _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
       66:  819:      { return _Rb_tree_node_base::_S_minimum(__x); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE10_S_minimumEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE10_S_minimumEPSt18_Rb_tree_node_base called 22 returned 100% blocks executed 100%
       22:  818:      _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
       22:  819:      { return _Rb_tree_node_base::_S_minimum(__x); }
       22:  819-block  0
call    0 returned 22
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_S_minimumEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_S_minimumEPSt18_Rb_tree_node_base called 44 returned 100% blocks executed 100%
       44:  818:      _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
       44:  819:      { return _Rb_tree_node_base::_S_minimum(__x); }
       44:  819-block  0
call    0 returned 44
------------------
        -:  820:
        -:  821:      static _Const_Base_ptr
        -:  822:      _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  823:      { return _Rb_tree_node_base::_S_minimum(__x); }
        -:  824:
        -:  825:      static _Base_ptr
       66:  826:      _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
       66:  827:      { return _Rb_tree_node_base::_S_maximum(__x); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE10_S_maximumEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE10_S_maximumEPSt18_Rb_tree_node_base called 22 returned 100% blocks executed 100%
       22:  826:      _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
       22:  827:      { return _Rb_tree_node_base::_S_maximum(__x); }
       22:  827-block  0
call    0 returned 22
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_S_maximumEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE10_S_maximumEPSt18_Rb_tree_node_base called 44 returned 100% blocks executed 100%
       44:  826:      _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
       44:  827:      { return _Rb_tree_node_base::_S_maximum(__x); }
       44:  827-block  0
call    0 returned 44
------------------
        -:  828:
        -:  829:      static _Const_Base_ptr
        -:  830:      _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  831:      { return _Rb_tree_node_base::_S_maximum(__x); }
        -:  832:
        -:  833:    public:
        -:  834:      typedef _Rb_tree_iterator<value_type>       iterator;
        -:  835:      typedef _Rb_tree_const_iterator<value_type> const_iterator;
        -:  836:
        -:  837:      typedef std::reverse_iterator<iterator>       reverse_iterator;
        -:  838:      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:  839:
        -:  840:#if __cplusplus > 201402L
        -:  841:      using node_type = _Node_handle<_Key, _Val, _Node_allocator>;
        -:  842:      using insert_return_type = _Node_insert_return<
        -:  843:	conditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,
        -:  844:	node_type>;
        -:  845:#endif
        -:  846:
        -:  847:      pair<_Base_ptr, _Base_ptr>
        -:  848:      _M_get_insert_unique_pos(const key_type& __k);
        -:  849:
        -:  850:      pair<_Base_ptr, _Base_ptr>
        -:  851:      _M_get_insert_equal_pos(const key_type& __k);
        -:  852:
        -:  853:      pair<_Base_ptr, _Base_ptr>
        -:  854:      _M_get_insert_hint_unique_pos(const_iterator __pos,
        -:  855:				    const key_type& __k);
        -:  856:
        -:  857:      pair<_Base_ptr, _Base_ptr>
        -:  858:      _M_get_insert_hint_equal_pos(const_iterator __pos,
        -:  859:				   const key_type& __k);
        -:  860:
        -:  861:    private:
        -:  862:#if __cplusplus >= 201103L
        -:  863:      template<typename _Arg, typename _NodeGen>
        -:  864:	iterator
        -:  865:	_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);
        -:  866:
        -:  867:      iterator
        -:  868:      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);
        -:  869:
        -:  870:      template<typename _Arg>
        -:  871:	iterator
        -:  872:	_M_insert_lower(_Base_ptr __y, _Arg&& __v);
        -:  873:
        -:  874:      template<typename _Arg>
        -:  875:	iterator
        -:  876:	_M_insert_equal_lower(_Arg&& __x);
        -:  877:
        -:  878:      iterator
        -:  879:      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);
        -:  880:
        -:  881:      iterator
        -:  882:      _M_insert_equal_lower_node(_Link_type __z);
        -:  883:#else
        -:  884:      template<typename _NodeGen>
        -:  885:	iterator
        -:  886:	_M_insert_(_Base_ptr __x, _Base_ptr __y,
        -:  887:		   const value_type& __v, _NodeGen&);
        -:  888:
        -:  889:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  890:      // 233. Insertion hints in associative containers.
        -:  891:      iterator
        -:  892:      _M_insert_lower(_Base_ptr __y, const value_type& __v);
        -:  893:
        -:  894:      iterator
        -:  895:      _M_insert_equal_lower(const value_type& __x);
        -:  896:#endif
        -:  897:
        -:  898:      template<typename _NodeGen>
        -:  899:	_Link_type
        -:  900:	_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);
        -:  901:
        -:  902:      template<typename _NodeGen>
        -:  903:	_Link_type
       66:  904:	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
        -:  905:	{
       66:  906:	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
       66:  907:	  _M_leftmost() = _S_minimum(__root);
       66:  908:	  _M_rightmost() = _S_maximum(__root);
       66:  909:	  _M_impl._M_node_count = __x._M_impl._M_node_count;
       66:  910:	  return __root;
        -:  911:	}
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_copyINSF_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_ERKSF_RT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_copyINSF_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_ERKSF_RT_ called 22 returned 100% blocks executed 100%
       22:  904:	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
        -:  905:	{
       22:  906:	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
       22:  906-block  0
call    0 returned 22
call    1 returned 22
call    2 returned 22
       22:  907:	  _M_leftmost() = _S_minimum(__root);
call    0 returned 22
call    1 returned 22
       22:  908:	  _M_rightmost() = _S_maximum(__root);
call    0 returned 22
call    1 returned 22
       22:  909:	  _M_impl._M_node_count = __x._M_impl._M_node_count;
       22:  910:	  return __root;
        -:  911:	}
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_copyINSH_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeISB_ERKSH_RT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_copyINSH_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeISB_ERKSH_RT_ called 44 returned 100% blocks executed 100%
       44:  904:	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
        -:  905:	{
       44:  906:	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
       44:  906-block  0
call    0 returned 44
call    1 returned 44
call    2 returned 44
       44:  907:	  _M_leftmost() = _S_minimum(__root);
call    0 returned 44
call    1 returned 44
       44:  908:	  _M_rightmost() = _S_maximum(__root);
call    0 returned 44
call    1 returned 44
       44:  909:	  _M_impl._M_node_count = __x._M_impl._M_node_count;
       44:  910:	  return __root;
        -:  911:	}
------------------
        -:  912:
        -:  913:      _Link_type
        -:  914:      _M_copy(const _Rb_tree& __x)
        -:  915:      {
        -:  916:	_Alloc_node __an(*this);
        -:  917:	return _M_copy(__x, __an);
        -:  918:      }
        -:  919:
        -:  920:      void
        -:  921:      _M_erase(_Link_type __x);
        -:  922:
        -:  923:      iterator
        -:  924:      _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -:  925:		     const _Key& __k);
        -:  926:
        -:  927:      const_iterator
        -:  928:      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -:  929:		     const _Key& __k) const;
        -:  930:
        -:  931:      iterator
        -:  932:      _M_upper_bound(_Link_type __x, _Base_ptr __y,
        -:  933:		     const _Key& __k);
        -:  934:
        -:  935:      const_iterator
        -:  936:      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -:  937:		     const _Key& __k) const;
        -:  938:
        -:  939:    public:
        -:  940:      // allocation/deallocation
        -:  941:#if __cplusplus < 201103L
        -:  942:      _Rb_tree() { }
        -:  943:#else
      144:  944:      _Rb_tree() = default;
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EEC2Ev:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EEC2Ev called 48 returned 100% blocks executed 100%
       48:  944:      _Rb_tree() = default;
       48:  944-block  0
call    0 returned 48
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC2Ev:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC2Ev called 96 returned 100% blocks executed 100%
       96:  944:      _Rb_tree() = default;
       96:  944-block  0
call    0 returned 96
------------------
        -:  945:#endif
        -:  946:
        -:  947:      _Rb_tree(const _Compare& __comp,
        -:  948:	       const allocator_type& __a = allocator_type())
        -:  949:      : _M_impl(__comp, _Node_allocator(__a)) { }
        -:  950:
        -:  951:      _Rb_tree(const _Rb_tree& __x)
        -:  952:      : _M_impl(__x._M_impl)
        -:  953:      {
        -:  954:	if (__x._M_root() != 0)
        -:  955:	  _M_root() = _M_copy(__x);
        -:  956:      }
        -:  957:
        -:  958:#if __cplusplus >= 201103L
        -:  959:      _Rb_tree(const allocator_type& __a)
        -:  960:      : _M_impl(_Node_allocator(__a))
        -:  961:      { }
        -:  962:
        -:  963:      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
        -:  964:      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
        -:  965:      {
        -:  966:	if (__x._M_root() != nullptr)
        -:  967:	  _M_root() = _M_copy(__x);
        -:  968:      }
        -:  969:
        -:  970:      _Rb_tree(_Rb_tree&&) = default;
        -:  971:
        -:  972:      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
        -:  973:      : _Rb_tree(std::move(__x), _Node_allocator(__a))
        -:  974:      { }
        -:  975:
        -:  976:    private:
        -:  977:      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, true_type)
        -:  978:      noexcept(is_nothrow_default_constructible<_Compare>::value)
        -:  979:      : _M_impl(std::move(__x._M_impl), std::move(__a))
        -:  980:      { }
        -:  981:
        -:  982:      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, false_type)
        -:  983:      : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
        -:  984:      {
        -:  985:	if (__x._M_root() != nullptr)
        -:  986:	  _M_move_data(__x, false_type{});
        -:  987:      }
        -:  988:
        -:  989:    public:
        -:  990:      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
        -:  991:      noexcept( noexcept(
        -:  992:	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
        -:  993:		 std::declval<typename _Alloc_traits::is_always_equal>())) )
        -:  994:      : _Rb_tree(std::move(__x), std::move(__a),
        -:  995:		 typename _Alloc_traits::is_always_equal{})
        -:  996:      { }
        -:  997:#endif
        -:  998:
      144:  999:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      144: 1000:      { _M_erase(_M_begin()); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EED2Ev:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EED2Ev called 48 returned 100% blocks executed 100%
       48:  999:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
       48: 1000:      { _M_erase(_M_begin()); }
       48: 1000-block  0
call    0 returned 48
call    1 returned 48
call    2 returned 48
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED2Ev:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED2Ev called 96 returned 100% blocks executed 100%
       96:  999:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
       96: 1000:      { _M_erase(_M_begin()); }
       96: 1000-block  0
call    0 returned 96
call    1 returned 96
call    2 returned 96
------------------
        -: 1001:
        -: 1002:      _Rb_tree&
        -: 1003:      operator=(const _Rb_tree& __x);
        -: 1004:
        -: 1005:      // Accessors.
        -: 1006:      _Compare
      436: 1007:      key_comp() const
      436: 1008:      { return _M_impl._M_key_compare; }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8key_compEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8key_compEv called 88 returned 100% blocks executed 100%
       88: 1007:      key_comp() const
       88: 1008:      { return _M_impl._M_key_compare; }
       88: 1008-block  0
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8key_compEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8key_compEv called 348 returned 100% blocks executed 100%
      348: 1007:      key_comp() const
      348: 1008:      { return _M_impl._M_key_compare; }
      348: 1008-block  0
------------------
        -: 1009:
        -: 1010:      iterator
       95: 1011:      begin() _GLIBCXX_NOEXCEPT
       95: 1012:      { return iterator(this->_M_impl._M_header._M_left); }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv called 60 returned 100% blocks executed 100%
       60: 1011:      begin() _GLIBCXX_NOEXCEPT
       60: 1012:      { return iterator(this->_M_impl._M_header._M_left); }
       60: 1012-block  0
call    0 returned 60
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5beginEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5beginEv called 35 returned 100% blocks executed 100%
       35: 1011:      begin() _GLIBCXX_NOEXCEPT
       35: 1012:      { return iterator(this->_M_impl._M_header._M_left); }
       35: 1012-block  0
call    0 returned 35
------------------
        -: 1013:
        -: 1014:      const_iterator
       27: 1015:      begin() const _GLIBCXX_NOEXCEPT
       27: 1016:      { return const_iterator(this->_M_impl._M_header._M_left); }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5beginEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5beginEv called 6 returned 100% blocks executed 100%
        6: 1015:      begin() const _GLIBCXX_NOEXCEPT
        6: 1016:      { return const_iterator(this->_M_impl._M_header._M_left); }
        6: 1016-block  0
call    0 returned 6
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5beginEv called 21 returned 100% blocks executed 100%
       21: 1015:      begin() const _GLIBCXX_NOEXCEPT
       21: 1016:      { return const_iterator(this->_M_impl._M_header._M_left); }
       21: 1016-block  0
call    0 returned 21
------------------
        -: 1017:
        -: 1018:      iterator
      667: 1019:      end() _GLIBCXX_NOEXCEPT
      667: 1020:      { return iterator(&this->_M_impl._M_header); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE3endEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE3endEv called 137 returned 100% blocks executed 100%
      137: 1019:      end() _GLIBCXX_NOEXCEPT
      137: 1020:      { return iterator(&this->_M_impl._M_header); }
      137: 1020-block  0
call    0 returned 137
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv called 530 returned 100% blocks executed 100%
      530: 1019:      end() _GLIBCXX_NOEXCEPT
      530: 1020:      { return iterator(&this->_M_impl._M_header); }
      530: 1020-block  0
call    0 returned 530
------------------
        -: 1021:
        -: 1022:      const_iterator
     1271: 1023:      end() const _GLIBCXX_NOEXCEPT
     1271: 1024:      { return const_iterator(&this->_M_impl._M_header); }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE3endEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE3endEv called 455 returned 100% blocks executed 100%
      455: 1023:      end() const _GLIBCXX_NOEXCEPT
      455: 1024:      { return const_iterator(&this->_M_impl._M_header); }
      455: 1024-block  0
call    0 returned 455
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv called 816 returned 100% blocks executed 100%
      816: 1023:      end() const _GLIBCXX_NOEXCEPT
      816: 1024:      { return const_iterator(&this->_M_impl._M_header); }
      816: 1024-block  0
call    0 returned 816
------------------
        -: 1025:
        -: 1026:      reverse_iterator
        -: 1027:      rbegin() _GLIBCXX_NOEXCEPT
        -: 1028:      { return reverse_iterator(end()); }
        -: 1029:
        -: 1030:      const_reverse_iterator
        -: 1031:      rbegin() const _GLIBCXX_NOEXCEPT
        -: 1032:      { return const_reverse_iterator(end()); }
        -: 1033:
        -: 1034:      reverse_iterator
        -: 1035:      rend() _GLIBCXX_NOEXCEPT
        -: 1036:      { return reverse_iterator(begin()); }
        -: 1037:
        -: 1038:      const_reverse_iterator
        -: 1039:      rend() const _GLIBCXX_NOEXCEPT
        -: 1040:      { return const_reverse_iterator(begin()); }
        -: 1041:
        -: 1042:      _GLIBCXX_NODISCARD bool
        -: 1043:      empty() const _GLIBCXX_NOEXCEPT
        -: 1044:      { return _M_impl._M_node_count == 0; }
        -: 1045:
        -: 1046:      size_type
      336: 1047:      size() const _GLIBCXX_NOEXCEPT
      336: 1048:      { return _M_impl._M_node_count; }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE4sizeEv:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE4sizeEv called 100 returned 100% blocks executed 100%
      100: 1047:      size() const _GLIBCXX_NOEXCEPT
      100: 1048:      { return _M_impl._M_node_count; }
      100: 1048-block  0
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4sizeEv:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4sizeEv called 236 returned 100% blocks executed 100%
      236: 1047:      size() const _GLIBCXX_NOEXCEPT
      236: 1048:      { return _M_impl._M_node_count; }
      236: 1048-block  0
------------------
        -: 1049:
        -: 1050:      size_type
        -: 1051:      max_size() const _GLIBCXX_NOEXCEPT
        -: 1052:      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }
        -: 1053:
        -: 1054:      void
        -: 1055:      swap(_Rb_tree& __t)
        -: 1056:      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);
        -: 1057:
        -: 1058:      // Insert/erase.
        -: 1059:#if __cplusplus >= 201103L
        -: 1060:      template<typename _Arg>
        -: 1061:	pair<iterator, bool>
        -: 1062:	_M_insert_unique(_Arg&& __x);
        -: 1063:
        -: 1064:      template<typename _Arg>
        -: 1065:	iterator
        -: 1066:	_M_insert_equal(_Arg&& __x);
        -: 1067:
        -: 1068:      template<typename _Arg, typename _NodeGen>
        -: 1069:	iterator
        -: 1070:	_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);
        -: 1071:
        -: 1072:      template<typename _Arg>
        -: 1073:	iterator
        -: 1074:	_M_insert_unique_(const_iterator __pos, _Arg&& __x)
        -: 1075:	{
        -: 1076:	  _Alloc_node __an(*this);
        -: 1077:	  return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
        -: 1078:	}
        -: 1079:
        -: 1080:      template<typename _Arg, typename _NodeGen>
        -: 1081:	iterator
        -: 1082:	_M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);
        -: 1083:
        -: 1084:      template<typename _Arg>
        -: 1085:	iterator
        -: 1086:	_M_insert_equal_(const_iterator __pos, _Arg&& __x)
        -: 1087:	{
        -: 1088:	  _Alloc_node __an(*this);
        -: 1089:	  return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
        -: 1090:	}
        -: 1091:
        -: 1092:      template<typename... _Args>
        -: 1093:	pair<iterator, bool>
        -: 1094:	_M_emplace_unique(_Args&&... __args);
        -: 1095:
        -: 1096:      template<typename... _Args>
        -: 1097:	iterator
        -: 1098:	_M_emplace_equal(_Args&&... __args);
        -: 1099:
        -: 1100:      template<typename... _Args>
        -: 1101:	iterator
        -: 1102:	_M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);
        -: 1103:
        -: 1104:      template<typename... _Args>
        -: 1105:	iterator
        -: 1106:	_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
        -: 1107:
        -: 1108:      template<typename _Iter>
        -: 1109:	using __same_value_type
        -: 1110:	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;
        -: 1111:
        -: 1112:      template<typename _InputIterator>
        -: 1113:	__enable_if_t<__same_value_type<_InputIterator>::value>
        -: 1114:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1115:	{
        -: 1116:	  _Alloc_node __an(*this);
        -: 1117:	  for (; __first != __last; ++__first)
        -: 1118:	    _M_insert_unique_(end(), *__first, __an);
        -: 1119:	}
        -: 1120:
        -: 1121:      template<typename _InputIterator>
        -: 1122:	__enable_if_t<!__same_value_type<_InputIterator>::value>
        -: 1123:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1124:	{
        -: 1125:	  for (; __first != __last; ++__first)
        -: 1126:	    _M_emplace_unique(*__first);
        -: 1127:	}
        -: 1128:
        -: 1129:      template<typename _InputIterator>
        -: 1130:	__enable_if_t<__same_value_type<_InputIterator>::value>
        -: 1131:	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
        -: 1132:	{
        -: 1133:	  _Alloc_node __an(*this);
        -: 1134:	  for (; __first != __last; ++__first)
        -: 1135:	    _M_insert_equal_(end(), *__first, __an);
        -: 1136:	}
        -: 1137:
        -: 1138:      template<typename _InputIterator>
        -: 1139:	__enable_if_t<!__same_value_type<_InputIterator>::value>
        -: 1140:	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
        -: 1141:	{
        -: 1142:	  _Alloc_node __an(*this);
        -: 1143:	  for (; __first != __last; ++__first)
        -: 1144:	    _M_emplace_equal(*__first);
        -: 1145:	}
        -: 1146:#else
        -: 1147:      pair<iterator, bool>
        -: 1148:      _M_insert_unique(const value_type& __x);
        -: 1149:
        -: 1150:      iterator
        -: 1151:      _M_insert_equal(const value_type& __x);
        -: 1152:
        -: 1153:      template<typename _NodeGen>
        -: 1154:	iterator
        -: 1155:	_M_insert_unique_(const_iterator __pos, const value_type& __x,
        -: 1156:			  _NodeGen&);
        -: 1157:
        -: 1158:      iterator
        -: 1159:      _M_insert_unique_(const_iterator __pos, const value_type& __x)
        -: 1160:      {
        -: 1161:	_Alloc_node __an(*this);
        -: 1162:	return _M_insert_unique_(__pos, __x, __an);
        -: 1163:      }
        -: 1164:
        -: 1165:      template<typename _NodeGen>
        -: 1166:	iterator
        -: 1167:	_M_insert_equal_(const_iterator __pos, const value_type& __x,
        -: 1168:			 _NodeGen&);
        -: 1169:      iterator
        -: 1170:      _M_insert_equal_(const_iterator __pos, const value_type& __x)
        -: 1171:      {
        -: 1172:	_Alloc_node __an(*this);
        -: 1173:	return _M_insert_equal_(__pos, __x, __an);
        -: 1174:      }
        -: 1175:
        -: 1176:      template<typename _InputIterator>
        -: 1177:	void
        -: 1178:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1179:	{
        -: 1180:	  _Alloc_node __an(*this);
        -: 1181:	  for (; __first != __last; ++__first)
        -: 1182:	    _M_insert_unique_(end(), *__first, __an);
        -: 1183:	}
        -: 1184:
        -: 1185:      template<typename _InputIterator>
        -: 1186:	void
        -: 1187:	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
        -: 1188:	{
        -: 1189:	  _Alloc_node __an(*this);
        -: 1190:	  for (; __first != __last; ++__first)
        -: 1191:	    _M_insert_equal_(end(), *__first, __an);
        -: 1192:	}
        -: 1193:#endif
        -: 1194:
        -: 1195:    private:
        -: 1196:      void
        -: 1197:      _M_erase_aux(const_iterator __position);
        -: 1198:
        -: 1199:      void
        -: 1200:      _M_erase_aux(const_iterator __first, const_iterator __last);
        -: 1201:
        -: 1202:    public:
        -: 1203:#if __cplusplus >= 201103L
        -: 1204:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1205:      // DR 130. Associative erase should return an iterator.
        -: 1206:      _GLIBCXX_ABI_TAG_CXX11
        -: 1207:      iterator
        -: 1208:      erase(const_iterator __position)
        -: 1209:      {
        -: 1210:	__glibcxx_assert(__position != end());
        -: 1211:	const_iterator __result = __position;
        -: 1212:	++__result;
        -: 1213:	_M_erase_aux(__position);
        -: 1214:	return __result._M_const_cast();
        -: 1215:      }
        -: 1216:
        -: 1217:      // LWG 2059.
        -: 1218:      _GLIBCXX_ABI_TAG_CXX11
        -: 1219:      iterator
        -: 1220:      erase(iterator __position)
        -: 1221:      {
        -: 1222:	__glibcxx_assert(__position != end());
        -: 1223:	iterator __result = __position;
        -: 1224:	++__result;
        -: 1225:	_M_erase_aux(__position);
        -: 1226:	return __result;
        -: 1227:      }
        -: 1228:#else
        -: 1229:      void
        -: 1230:      erase(iterator __position)
        -: 1231:      {
        -: 1232:	__glibcxx_assert(__position != end());
        -: 1233:	_M_erase_aux(__position);
        -: 1234:      }
        -: 1235:
        -: 1236:      void
        -: 1237:      erase(const_iterator __position)
        -: 1238:      {
        -: 1239:	__glibcxx_assert(__position != end());
        -: 1240:	_M_erase_aux(__position);
        -: 1241:      }
        -: 1242:#endif
        -: 1243:      size_type
        -: 1244:      erase(const key_type& __x);
        -: 1245:
        -: 1246:#if __cplusplus >= 201103L
        -: 1247:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1248:      // DR 130. Associative erase should return an iterator.
        -: 1249:      _GLIBCXX_ABI_TAG_CXX11
        -: 1250:      iterator
        -: 1251:      erase(const_iterator __first, const_iterator __last)
        -: 1252:      {
        -: 1253:	_M_erase_aux(__first, __last);
        -: 1254:	return __last._M_const_cast();
        -: 1255:      }
        -: 1256:#else
        -: 1257:      void
        -: 1258:      erase(iterator __first, iterator __last)
        -: 1259:      { _M_erase_aux(__first, __last); }
        -: 1260:
        -: 1261:      void
        -: 1262:      erase(const_iterator __first, const_iterator __last)
        -: 1263:      { _M_erase_aux(__first, __last); }
        -: 1264:#endif
        -: 1265:      void
        -: 1266:      erase(const key_type* __first, const key_type* __last);
        -: 1267:
        -: 1268:      void
       1*: 1269:      clear() _GLIBCXX_NOEXCEPT
        -: 1270:      {
       1*: 1271:	_M_erase(_M_begin());
       1*: 1272:	_M_impl._M_reset();
       1*: 1273:      }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5clearEv:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5clearEv called 1 returned 100% blocks executed 100%
        1: 1269:      clear() _GLIBCXX_NOEXCEPT
        -: 1270:      {
        1: 1271:	_M_erase(_M_begin());
        1: 1271-block  0
call    0 returned 1
call    1 returned 1
        1: 1272:	_M_impl._M_reset();
call    0 returned 1
        1: 1273:      }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5clearEv:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5clearEv called 0 returned 0% blocks executed 0%
    #####: 1269:      clear() _GLIBCXX_NOEXCEPT
        -: 1270:      {
    #####: 1271:	_M_erase(_M_begin());
    %%%%%: 1271-block  0
call    0 never executed
call    1 never executed
    #####: 1272:	_M_impl._M_reset();
call    0 never executed
    #####: 1273:      }
------------------
        -: 1274:
        -: 1275:      // Set operations.
        -: 1276:      iterator
        -: 1277:      find(const key_type& __k);
        -: 1278:
        -: 1279:      const_iterator
        -: 1280:      find(const key_type& __k) const;
        -: 1281:
        -: 1282:      size_type
        -: 1283:      count(const key_type& __k) const;
        -: 1284:
        -: 1285:      iterator
      660: 1286:      lower_bound(const key_type& __k)
      660: 1287:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11lower_boundERS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11lower_boundERS8_ called 132 returned 100% blocks executed 100%
      132: 1286:      lower_bound(const key_type& __k)
      132: 1287:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
      132: 1287-block  0
call    0 returned 132
call    1 returned 132
call    2 returned 132
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11lower_boundERS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11lower_boundERS7_ called 528 returned 100% blocks executed 100%
      528: 1286:      lower_bound(const key_type& __k)
      528: 1287:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
      528: 1287-block  0
call    0 returned 528
call    1 returned 528
call    2 returned 528
------------------
        -: 1288:
        -: 1289:      const_iterator
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11lower_boundERS8_ called 22 returned 100% blocks executed 100%
       22: 1290:      lower_bound(const key_type& __k) const
       22: 1291:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
       22: 1291-block  0
call    0 returned 22
call    1 returned 22
call    2 returned 22
        -: 1292:
        -: 1293:      iterator
        -: 1294:      upper_bound(const key_type& __k)
        -: 1295:      { return _M_upper_bound(_M_begin(), _M_end(), __k); }
        -: 1296:
        -: 1297:      const_iterator
        -: 1298:      upper_bound(const key_type& __k) const
        -: 1299:      { return _M_upper_bound(_M_begin(), _M_end(), __k); }
        -: 1300:
        -: 1301:      pair<iterator, iterator>
        -: 1302:      equal_range(const key_type& __k);
        -: 1303:
        -: 1304:      pair<const_iterator, const_iterator>
        -: 1305:      equal_range(const key_type& __k) const;
        -: 1306:
        -: 1307:#if __cplusplus >= 201402L
        -: 1308:      template<typename _Kt,
        -: 1309:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1310:	iterator
        -: 1311:	_M_find_tr(const _Kt& __k)
        -: 1312:	{
        -: 1313:	  const _Rb_tree* __const_this = this;
        -: 1314:	  return __const_this->_M_find_tr(__k)._M_const_cast();
        -: 1315:	}
        -: 1316:
        -: 1317:      template<typename _Kt,
        -: 1318:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1319:	const_iterator
        -: 1320:	_M_find_tr(const _Kt& __k) const
        -: 1321:	{
        -: 1322:	  auto __j = _M_lower_bound_tr(__k);
        -: 1323:	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
        -: 1324:	    __j = end();
        -: 1325:	  return __j;
        -: 1326:	}
        -: 1327:
        -: 1328:      template<typename _Kt,
        -: 1329:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1330:	size_type
        -: 1331:	_M_count_tr(const _Kt& __k) const
        -: 1332:	{
        -: 1333:	  auto __p = _M_equal_range_tr(__k);
        -: 1334:	  return std::distance(__p.first, __p.second);
        -: 1335:	}
        -: 1336:
        -: 1337:      template<typename _Kt,
        -: 1338:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1339:	iterator
        -: 1340:	_M_lower_bound_tr(const _Kt& __k)
        -: 1341:	{
        -: 1342:	  const _Rb_tree* __const_this = this;
        -: 1343:	  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
        -: 1344:	}
        -: 1345:
        -: 1346:      template<typename _Kt,
        -: 1347:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1348:	const_iterator
        -: 1349:	_M_lower_bound_tr(const _Kt& __k) const
        -: 1350:	{
        -: 1351:	  auto __x = _M_begin();
        -: 1352:	  auto __y = _M_end();
        -: 1353:	  while (__x != 0)
        -: 1354:	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
        -: 1355:	      {
        -: 1356:		__y = __x;
        -: 1357:		__x = _S_left(__x);
        -: 1358:	      }
        -: 1359:	    else
        -: 1360:	      __x = _S_right(__x);
        -: 1361:	  return const_iterator(__y);
        -: 1362:	}
        -: 1363:
        -: 1364:      template<typename _Kt,
        -: 1365:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1366:	iterator
        -: 1367:	_M_upper_bound_tr(const _Kt& __k)
        -: 1368:	{
        -: 1369:	  const _Rb_tree* __const_this = this;
        -: 1370:	  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
        -: 1371:	}
        -: 1372:
        -: 1373:      template<typename _Kt,
        -: 1374:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1375:	const_iterator
        -: 1376:	_M_upper_bound_tr(const _Kt& __k) const
        -: 1377:	{
        -: 1378:	  auto __x = _M_begin();
        -: 1379:	  auto __y = _M_end();
        -: 1380:	  while (__x != 0)
        -: 1381:	    if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 1382:	      {
        -: 1383:		__y = __x;
        -: 1384:		__x = _S_left(__x);
        -: 1385:	      }
        -: 1386:	    else
        -: 1387:	      __x = _S_right(__x);
        -: 1388:	  return const_iterator(__y);
        -: 1389:	}
        -: 1390:
        -: 1391:      template<typename _Kt,
        -: 1392:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1393:	pair<iterator, iterator>
        -: 1394:	_M_equal_range_tr(const _Kt& __k)
        -: 1395:	{
        -: 1396:	  const _Rb_tree* __const_this = this;
        -: 1397:	  auto __ret = __const_this->_M_equal_range_tr(__k);
        -: 1398:	  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
        -: 1399:	}
        -: 1400:
        -: 1401:      template<typename _Kt,
        -: 1402:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1403:	pair<const_iterator, const_iterator>
        -: 1404:	_M_equal_range_tr(const _Kt& __k) const
        -: 1405:	{
        -: 1406:	  auto __low = _M_lower_bound_tr(__k);
        -: 1407:	  auto __high = __low;
        -: 1408:	  auto& __cmp = _M_impl._M_key_compare;
        -: 1409:	  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
        -: 1410:	    ++__high;
        -: 1411:	  return { __low, __high };
        -: 1412:	}
        -: 1413:#endif
        -: 1414:
        -: 1415:      // Debugging.
        -: 1416:      bool
        -: 1417:      __rb_verify() const;
        -: 1418:
        -: 1419:#if __cplusplus >= 201103L
        -: 1420:      _Rb_tree&
        -: 1421:      operator=(_Rb_tree&&)
        -: 1422:      noexcept(_Alloc_traits::_S_nothrow_move()
        -: 1423:	       && is_nothrow_move_assignable<_Compare>::value);
        -: 1424:
        -: 1425:      template<typename _Iterator>
        -: 1426:	void
        -: 1427:	_M_assign_unique(_Iterator, _Iterator);
        -: 1428:
        -: 1429:      template<typename _Iterator>
        -: 1430:	void
        -: 1431:	_M_assign_equal(_Iterator, _Iterator);
        -: 1432:
        -: 1433:    private:
        -: 1434:      // Move elements from container with equal allocator.
        -: 1435:      void
        -: 1436:      _M_move_data(_Rb_tree& __x, true_type)
        -: 1437:      { _M_impl._M_move_data(__x._M_impl); }
        -: 1438:
        -: 1439:      // Move elements from container with possibly non-equal allocator,
        -: 1440:      // which might result in a copy not a move.
        -: 1441:      void
        -: 1442:      _M_move_data(_Rb_tree&, false_type);
        -: 1443:
        -: 1444:      // Move assignment from container with equal allocator.
        -: 1445:      void
        -: 1446:      _M_move_assign(_Rb_tree&, true_type);
        -: 1447:
        -: 1448:      // Move assignment from container with possibly non-equal allocator,
        -: 1449:      // which might result in a copy not a move.
        -: 1450:      void
        -: 1451:      _M_move_assign(_Rb_tree&, false_type);
        -: 1452:#endif
        -: 1453:
        -: 1454:#if __cplusplus > 201402L
        -: 1455:    public:
        -: 1456:      /// Re-insert an extracted node.
        -: 1457:      insert_return_type
        -: 1458:      _M_reinsert_node_unique(node_type&& __nh)
        -: 1459:      {
        -: 1460:	insert_return_type __ret;
        -: 1461:	if (__nh.empty())
        -: 1462:	  __ret.position = end();
        -: 1463:	else
        -: 1464:	  {
        -: 1465:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1466:
        -: 1467:	    auto __res = _M_get_insert_unique_pos(__nh._M_key());
        -: 1468:	    if (__res.second)
        -: 1469:	      {
        -: 1470:		__ret.position
        -: 1471:		  = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1472:		__nh._M_ptr = nullptr;
        -: 1473:		__ret.inserted = true;
        -: 1474:	      }
        -: 1475:	    else
        -: 1476:	      {
        -: 1477:		__ret.node = std::move(__nh);
        -: 1478:		__ret.position = iterator(__res.first);
        -: 1479:		__ret.inserted = false;
        -: 1480:	      }
        -: 1481:	  }
        -: 1482:	return __ret;
        -: 1483:      }
        -: 1484:
        -: 1485:      /// Re-insert an extracted node.
        -: 1486:      iterator
        -: 1487:      _M_reinsert_node_equal(node_type&& __nh)
        -: 1488:      {
        -: 1489:	iterator __ret;
        -: 1490:	if (__nh.empty())
        -: 1491:	  __ret = end();
        -: 1492:	else
        -: 1493:	  {
        -: 1494:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1495:	    auto __res = _M_get_insert_equal_pos(__nh._M_key());
        -: 1496:	    if (__res.second)
        -: 1497:	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1498:	    else
        -: 1499:	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
        -: 1500:	    __nh._M_ptr = nullptr;
        -: 1501:	  }
        -: 1502:	return __ret;
        -: 1503:      }
        -: 1504:
        -: 1505:      /// Re-insert an extracted node.
        -: 1506:      iterator
        -: 1507:      _M_reinsert_node_hint_unique(const_iterator __hint, node_type&& __nh)
        -: 1508:      {
        -: 1509:	iterator __ret;
        -: 1510:	if (__nh.empty())
        -: 1511:	  __ret = end();
        -: 1512:	else
        -: 1513:	  {
        -: 1514:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1515:	    auto __res = _M_get_insert_hint_unique_pos(__hint, __nh._M_key());
        -: 1516:	    if (__res.second)
        -: 1517:	      {
        -: 1518:		__ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1519:		__nh._M_ptr = nullptr;
        -: 1520:	      }
        -: 1521:	    else
        -: 1522:	      __ret = iterator(__res.first);
        -: 1523:	  }
        -: 1524:	return __ret;
        -: 1525:      }
        -: 1526:
        -: 1527:      /// Re-insert an extracted node.
        -: 1528:      iterator
        -: 1529:      _M_reinsert_node_hint_equal(const_iterator __hint, node_type&& __nh)
        -: 1530:      {
        -: 1531:	iterator __ret;
        -: 1532:	if (__nh.empty())
        -: 1533:	  __ret = end();
        -: 1534:	else
        -: 1535:	  {
        -: 1536:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1537:	    auto __res = _M_get_insert_hint_equal_pos(__hint, __nh._M_key());
        -: 1538:	    if (__res.second)
        -: 1539:	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1540:	    else
        -: 1541:	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
        -: 1542:	    __nh._M_ptr = nullptr;
        -: 1543:	  }
        -: 1544:	return __ret;
        -: 1545:      }
        -: 1546:
        -: 1547:      /// Extract a node.
        -: 1548:      node_type
        -: 1549:      extract(const_iterator __pos)
        -: 1550:      {
        -: 1551:	auto __ptr = _Rb_tree_rebalance_for_erase(
        -: 1552:	    __pos._M_const_cast()._M_node, _M_impl._M_header);
        -: 1553:	--_M_impl._M_node_count;
        -: 1554:	return { static_cast<_Link_type>(__ptr), _M_get_Node_allocator() };
        -: 1555:      }
        -: 1556:
        -: 1557:      /// Extract a node.
        -: 1558:      node_type
        -: 1559:      extract(const key_type& __k)
        -: 1560:      {
        -: 1561:	node_type __nh;
        -: 1562:	auto __pos = find(__k);
        -: 1563:	if (__pos != end())
        -: 1564:	  __nh = extract(const_iterator(__pos));
        -: 1565:	return __nh;
        -: 1566:      }
        -: 1567:
        -: 1568:      template<typename _Compare2>
        -: 1569:	using _Compatible_tree
        -: 1570:	  = _Rb_tree<_Key, _Val, _KeyOfValue, _Compare2, _Alloc>;
        -: 1571:
        -: 1572:      template<typename, typename>
        -: 1573:	friend class _Rb_tree_merge_helper;
        -: 1574:
        -: 1575:      /// Merge from a compatible container into one with unique keys.
        -: 1576:      template<typename _Compare2>
        -: 1577:	void
        -: 1578:	_M_merge_unique(_Compatible_tree<_Compare2>& __src) noexcept
        -: 1579:	{
        -: 1580:	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
        -: 1581:	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
        -: 1582:	    {
        -: 1583:	      auto __pos = __i++;
        -: 1584:	      auto __res = _M_get_insert_unique_pos(_KeyOfValue()(*__pos));
        -: 1585:	      if (__res.second)
        -: 1586:		{
        -: 1587:		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
        -: 1588:		  auto __ptr = _Rb_tree_rebalance_for_erase(
        -: 1589:		      __pos._M_node, __src_impl._M_header);
        -: 1590:		  --__src_impl._M_node_count;
        -: 1591:		  _M_insert_node(__res.first, __res.second,
        -: 1592:				 static_cast<_Link_type>(__ptr));
        -: 1593:		}
        -: 1594:	    }
        -: 1595:	}
        -: 1596:
        -: 1597:      /// Merge from a compatible container into one with equivalent keys.
        -: 1598:      template<typename _Compare2>
        -: 1599:	void
        -: 1600:	_M_merge_equal(_Compatible_tree<_Compare2>& __src) noexcept
        -: 1601:	{
        -: 1602:	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
        -: 1603:	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
        -: 1604:	    {
        -: 1605:	      auto __pos = __i++;
        -: 1606:	      auto __res = _M_get_insert_equal_pos(_KeyOfValue()(*__pos));
        -: 1607:	      if (__res.second)
        -: 1608:		{
        -: 1609:		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
        -: 1610:		  auto __ptr = _Rb_tree_rebalance_for_erase(
        -: 1611:		      __pos._M_node, __src_impl._M_header);
        -: 1612:		  --__src_impl._M_node_count;
        -: 1613:		  _M_insert_node(__res.first, __res.second,
        -: 1614:				 static_cast<_Link_type>(__ptr));
        -: 1615:		}
        -: 1616:	    }
        -: 1617:	}
        -: 1618:#endif // C++17
        -: 1619:
        -: 1620:      friend bool
        -: 1621:      operator==(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1622:      {
        -: 1623:	return __x.size() == __y.size()
        -: 1624:	  && std::equal(__x.begin(), __x.end(), __y.begin());
        -: 1625:      }
        -: 1626:
        -: 1627:      friend bool
        -: 1628:      operator<(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1629:      {
        -: 1630:	return std::lexicographical_compare(__x.begin(), __x.end(),
        -: 1631:					    __y.begin(), __y.end());
        -: 1632:      }
        -: 1633:
        -: 1634:      friend bool _GLIBCXX_DEPRECATED
        -: 1635:      operator!=(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1636:      { return !(__x == __y); }
        -: 1637:
        -: 1638:      friend bool _GLIBCXX_DEPRECATED
        -: 1639:      operator>(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1640:      { return __y < __x; }
        -: 1641:
        -: 1642:      friend bool _GLIBCXX_DEPRECATED
        -: 1643:      operator<=(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1644:      { return !(__y < __x); }
        -: 1645:
        -: 1646:      friend bool _GLIBCXX_DEPRECATED
        -: 1647:      operator>=(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1648:      { return !(__x < __y); }
        -: 1649:    };
        -: 1650:
        -: 1651:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1652:	   typename _Compare, typename _Alloc>
        -: 1653:    inline void
        -: 1654:    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        -: 1655:	 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
        -: 1656:    { __x.swap(__y); }
        -: 1657:
        -: 1658:#if __cplusplus >= 201103L
        -: 1659:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1660:	   typename _Compare, typename _Alloc>
        -: 1661:    void
        -: 1662:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1663:    _M_move_data(_Rb_tree& __x, false_type)
        -: 1664:    {
        -: 1665:      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
        -: 1666:	_M_move_data(__x, true_type());
        -: 1667:      else
        -: 1668:	{
        -: 1669:	  _Alloc_node __an(*this);
        -: 1670:	  auto __lbd =
        -: 1671:	    [&__an](const value_type& __cval)
        -: 1672:	    {
        -: 1673:	      auto& __val = const_cast<value_type&>(__cval);
        -: 1674:	      return __an(std::move_if_noexcept(__val));
        -: 1675:	    };
        -: 1676:	  _M_root() = _M_copy(__x, __lbd);
        -: 1677:	}
        -: 1678:    }
        -: 1679:
        -: 1680:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1681:	   typename _Compare, typename _Alloc>
        -: 1682:    inline void
        -: 1683:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1684:    _M_move_assign(_Rb_tree& __x, true_type)
        -: 1685:    {
        -: 1686:      clear();
        -: 1687:      if (__x._M_root() != nullptr)
        -: 1688:	_M_move_data(__x, true_type());
        -: 1689:      std::__alloc_on_move(_M_get_Node_allocator(),
        -: 1690:			   __x._M_get_Node_allocator());
        -: 1691:    }
        -: 1692:
        -: 1693:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1694:	   typename _Compare, typename _Alloc>
        -: 1695:    void
        -: 1696:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1697:    _M_move_assign(_Rb_tree& __x, false_type)
        -: 1698:    {
        -: 1699:      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
        -: 1700:	return _M_move_assign(__x, true_type{});
        -: 1701:
        -: 1702:      // Try to move each node reusing existing nodes and copying __x nodes
        -: 1703:      // structure.
        -: 1704:      _Reuse_or_alloc_node __roan(*this);
        -: 1705:      _M_impl._M_reset();
        -: 1706:      if (__x._M_root() != nullptr)
        -: 1707:	{
        -: 1708:	  auto __lbd =
        -: 1709:	    [&__roan](const value_type& __cval)
        -: 1710:	    {
        -: 1711:	      auto& __val = const_cast<value_type&>(__cval);
        -: 1712:	      return __roan(std::move_if_noexcept(__val));
        -: 1713:	    };
        -: 1714:	  _M_root() = _M_copy(__x, __lbd);
        -: 1715:	  __x.clear();
        -: 1716:	}
        -: 1717:    }
        -: 1718:
        -: 1719:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1720:	   typename _Compare, typename _Alloc>
        -: 1721:    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
        -: 1722:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1723:    operator=(_Rb_tree&& __x)
        -: 1724:    noexcept(_Alloc_traits::_S_nothrow_move()
        -: 1725:	     && is_nothrow_move_assignable<_Compare>::value)
        -: 1726:    {
        -: 1727:      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
        -: 1728:      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
        -: 1729:      return *this;
        -: 1730:    }
        -: 1731:
        -: 1732:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1733:	   typename _Compare, typename _Alloc>
        -: 1734:    template<typename _Iterator>
        -: 1735:      void
        -: 1736:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1737:      _M_assign_unique(_Iterator __first, _Iterator __last)
        -: 1738:      {
        -: 1739:	_Reuse_or_alloc_node __roan(*this);
        -: 1740:	_M_impl._M_reset();
        -: 1741:	for (; __first != __last; ++__first)
        -: 1742:	  _M_insert_unique_(end(), *__first, __roan);
        -: 1743:      }
        -: 1744:
        -: 1745:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1746:	   typename _Compare, typename _Alloc>
        -: 1747:    template<typename _Iterator>
        -: 1748:      void
        -: 1749:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1750:      _M_assign_equal(_Iterator __first, _Iterator __last)
        -: 1751:      {
        -: 1752:	_Reuse_or_alloc_node __roan(*this);
        -: 1753:	_M_impl._M_reset();
        -: 1754:	for (; __first != __last; ++__first)
        -: 1755:	  _M_insert_equal_(end(), *__first, __roan);
        -: 1756:      }
        -: 1757:#endif
        -: 1758:
        -: 1759:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1760:	   typename _Compare, typename _Alloc>
        -: 1761:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
       66: 1762:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1763:    operator=(const _Rb_tree& __x)
        -: 1764:    {
       66: 1765:      if (this != &__x)
        -: 1766:	{
        -: 1767:	  // Note that _Key may be a constant type.
        -: 1768:#if __cplusplus >= 201103L
       66: 1769:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
        -: 1770:	    {
    #####: 1771:	      auto& __this_alloc = this->_M_get_Node_allocator();
    #####: 1772:	      auto& __that_alloc = __x._M_get_Node_allocator();
    #####: 1773:	      if (!_Alloc_traits::_S_always_equal()
    #####: 1774:		  && __this_alloc != __that_alloc)
        -: 1775:		{
        -: 1776:		  // Replacement allocator cannot free existing storage, we need
        -: 1777:		  // to erase nodes first.
    #####: 1778:		  clear();
    #####: 1779:		  std::__alloc_on_copy(__this_alloc, __that_alloc);
        -: 1780:		}
        -: 1781:	    }
        -: 1782:#endif
        -: 1783:
      132: 1784:	  _Reuse_or_alloc_node __roan(*this);
       66: 1785:	  _M_impl._M_reset();
        -: 1786:	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
       66: 1787:	  if (__x._M_root() != 0)
       66: 1788:	    _M_root() = _M_copy(__x, __roan);
        -: 1789:	}
        -: 1790:
       66: 1791:      return *this;
        -: 1792:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EEaSERKSF_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EEaSERKSF_ called 22 returned 100% blocks executed 54%
       22: 1762:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1763:    operator=(const _Rb_tree& __x)
        -: 1764:    {
       22: 1765:      if (this != &__x)
       22: 1765-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 0
        -: 1766:	{
        -: 1767:	  // Note that _Key may be a constant type.
        -: 1768:#if __cplusplus >= 201103L
       22: 1769:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
       22: 1769-block  0
call    0 returned 22
branch  1 taken 0 (fallthrough)
branch  2 taken 22
        -: 1770:	    {
    #####: 1771:	      auto& __this_alloc = this->_M_get_Node_allocator();
    %%%%%: 1771-block  0
call    0 never executed
    #####: 1772:	      auto& __that_alloc = __x._M_get_Node_allocator();
call    0 never executed
    #####: 1773:	      if (!_Alloc_traits::_S_always_equal()
call    0 never executed
    #####: 1774:		  && __this_alloc != __that_alloc)
branch  0 never executed
branch  1 never executed
    %%%%%: 1774-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1774-block  1
    %%%%%: 1774-block  2
    %%%%%: 1774-block  3
branch  5 never executed
branch  6 never executed
        -: 1775:		{
        -: 1776:		  // Replacement allocator cannot free existing storage, we need
        -: 1777:		  // to erase nodes first.
    #####: 1778:		  clear();
    %%%%%: 1778-block  0
call    0 never executed
    #####: 1779:		  std::__alloc_on_copy(__this_alloc, __that_alloc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1780:		}
        -: 1781:	    }
        -: 1782:#endif
        -: 1783:
       44: 1784:	  _Reuse_or_alloc_node __roan(*this);
       22: 1784-block  0
call    0 returned 22
       22: 1784-block  1
call    1 returned 22
    $$$$$: 1784-block  2
call    2 never executed
       22: 1785:	  _M_impl._M_reset();
call    0 returned 22
        -: 1786:	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
       22: 1787:	  if (__x._M_root() != 0)
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0
       22: 1788:	    _M_root() = _M_copy(__x, __roan);
       22: 1788-block  0
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
       22: 1788-block  1
        -: 1789:	}
        -: 1790:
       22: 1791:      return *this;
       22: 1791-block  0
       22: 1791-block  1
        -: 1792:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEaSERKSH_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEaSERKSH_ called 44 returned 100% blocks executed 54%
       44: 1762:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1763:    operator=(const _Rb_tree& __x)
        -: 1764:    {
       44: 1765:      if (this != &__x)
       44: 1765-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 0
        -: 1766:	{
        -: 1767:	  // Note that _Key may be a constant type.
        -: 1768:#if __cplusplus >= 201103L
       44: 1769:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
       44: 1769-block  0
call    0 returned 44
branch  1 taken 0 (fallthrough)
branch  2 taken 44
        -: 1770:	    {
    #####: 1771:	      auto& __this_alloc = this->_M_get_Node_allocator();
    %%%%%: 1771-block  0
call    0 never executed
    #####: 1772:	      auto& __that_alloc = __x._M_get_Node_allocator();
call    0 never executed
    #####: 1773:	      if (!_Alloc_traits::_S_always_equal()
call    0 never executed
    #####: 1774:		  && __this_alloc != __that_alloc)
branch  0 never executed
branch  1 never executed
    %%%%%: 1774-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1774-block  1
    %%%%%: 1774-block  2
    %%%%%: 1774-block  3
branch  5 never executed
branch  6 never executed
        -: 1775:		{
        -: 1776:		  // Replacement allocator cannot free existing storage, we need
        -: 1777:		  // to erase nodes first.
    #####: 1778:		  clear();
    %%%%%: 1778-block  0
call    0 never executed
    #####: 1779:		  std::__alloc_on_copy(__this_alloc, __that_alloc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1780:		}
        -: 1781:	    }
        -: 1782:#endif
        -: 1783:
       88: 1784:	  _Reuse_or_alloc_node __roan(*this);
       44: 1784-block  0
call    0 returned 44
       44: 1784-block  1
call    1 returned 44
    $$$$$: 1784-block  2
call    2 never executed
       44: 1785:	  _M_impl._M_reset();
call    0 returned 44
        -: 1786:	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
       44: 1787:	  if (__x._M_root() != 0)
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0
       44: 1788:	    _M_root() = _M_copy(__x, __roan);
       44: 1788-block  0
call    0 returned 44
call    1 returned 44
branch  2 taken 44 (fallthrough)
branch  3 taken 0 (throw)
       44: 1788-block  1
        -: 1789:	}
        -: 1790:
       44: 1791:      return *this;
       44: 1791-block  0
       44: 1791-block  1
        -: 1792:    }
------------------
        -: 1793:
        -: 1794:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1795:	   typename _Compare, typename _Alloc>
        -: 1796:#if __cplusplus >= 201103L
        -: 1797:    template<typename _Arg, typename _NodeGen>
        -: 1798:#else
        -: 1799:    template<typename _NodeGen>
        -: 1800:#endif
        -: 1801:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 1802:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1803:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1804:#if __cplusplus >= 201103L
        -: 1805:		 _Arg&& __v,
        -: 1806:#else
        -: 1807:		 const _Val& __v,
        -: 1808:#endif
        -: 1809:		 _NodeGen& __node_gen)
        -: 1810:      {
        -: 1811:	bool __insert_left = (__x != 0 || __p == _M_end()
        -: 1812:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
        -: 1813:							_S_key(__p)));
        -: 1814:
        -: 1815:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
        -: 1816:
        -: 1817:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        -: 1818:				      this->_M_impl._M_header);
        -: 1819:	++_M_impl._M_node_count;
        -: 1820:	return iterator(__z);
        -: 1821:      }
        -: 1822:
        -: 1823:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1824:	   typename _Compare, typename _Alloc>
        -: 1825:#if __cplusplus >= 201103L
        -: 1826:    template<typename _Arg>
        -: 1827:#endif
        -: 1828:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 1829:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1830:#if __cplusplus >= 201103L
        -: 1831:    _M_insert_lower(_Base_ptr __p, _Arg&& __v)
        -: 1832:#else
        -: 1833:    _M_insert_lower(_Base_ptr __p, const _Val& __v)
        -: 1834:#endif
        -: 1835:    {
        -: 1836:      bool __insert_left = (__p == _M_end()
        -: 1837:			    || !_M_impl._M_key_compare(_S_key(__p),
        -: 1838:						       _KeyOfValue()(__v)));
        -: 1839:
        -: 1840:      _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
        -: 1841:
        -: 1842:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        -: 1843:				    this->_M_impl._M_header);
        -: 1844:      ++_M_impl._M_node_count;
        -: 1845:      return iterator(__z);
        -: 1846:    }
        -: 1847:
        -: 1848:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1849:	   typename _Compare, typename _Alloc>
        -: 1850:#if __cplusplus >= 201103L
        -: 1851:    template<typename _Arg>
        -: 1852:#endif
        -: 1853:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 1854:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1855:#if __cplusplus >= 201103L
        -: 1856:    _M_insert_equal_lower(_Arg&& __v)
        -: 1857:#else
        -: 1858:    _M_insert_equal_lower(const _Val& __v)
        -: 1859:#endif
        -: 1860:    {
        -: 1861:      _Link_type __x = _M_begin();
        -: 1862:      _Base_ptr __y = _M_end();
        -: 1863:      while (__x != 0)
        -: 1864:	{
        -: 1865:	  __y = __x;
        -: 1866:	  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
        -: 1867:		_S_left(__x) : _S_right(__x);
        -: 1868:	}
        -: 1869:      return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));
        -: 1870:    }
        -: 1871:
        -: 1872:  template<typename _Key, typename _Val, typename _KoV,
        -: 1873:	   typename _Compare, typename _Alloc>
        -: 1874:    template<typename _NodeGen>
        -: 1875:      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      132: 1876:      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
        -: 1877:      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
        -: 1878:      {
        -: 1879:	// Structural copy. __x and __p must be non-null.
      132: 1880:	_Link_type __top = _M_clone_node(__x, __node_gen);
      132: 1881:	__top->_M_parent = __p;
        -: 1882:
        -: 1883:	__try
        -: 1884:	  {
      132: 1885:	    if (__x->_M_right)
       66: 1886:	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
      132: 1887:	    __p = __top;
      132: 1888:	    __x = _S_left(__x);
        -: 1889:
      198: 1890:	    while (__x != 0)
        -: 1891:	      {
       66: 1892:		_Link_type __y = _M_clone_node(__x, __node_gen);
       66: 1893:		__p->_M_left = __y;
       66: 1894:		__y->_M_parent = __p;
       66: 1895:		if (__x->_M_right)
    #####: 1896:		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
       66: 1897:		__p = __y;
       66: 1898:		__x = _S_left(__x);
        -: 1899:	      }
        -: 1900:	  }
    =====: 1901:	__catch(...)
        -: 1902:	  {
    =====: 1903:	    _M_erase(__top);
    =====: 1904:	    __throw_exception_again;
        -: 1905:	  }
      132: 1906:	return __top;
        -: 1907:      }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_copyINSF_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE7_M_copyINSF_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_ called 44 returned 100% blocks executed 64%
       44: 1876:      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
        -: 1877:      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
        -: 1878:      {
        -: 1879:	// Structural copy. __x and __p must be non-null.
       44: 1880:	_Link_type __top = _M_clone_node(__x, __node_gen);
       44: 1880-block  0
call    0 returned 44
       44: 1881:	__top->_M_parent = __p;
        -: 1882:
        -: 1883:	__try
        -: 1884:	  {
       44: 1885:	    if (__x->_M_right)
branch  0 taken 22 (fallthrough)
branch  1 taken 22
       22: 1886:	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
       22: 1886-block  0
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
       22: 1886-block  1
       44: 1887:	    __p = __top;
       44: 1888:	    __x = _S_left(__x);
       44: 1888-block  0
call    0 returned 44
        -: 1889:
       66: 1890:	    while (__x != 0)
       66: 1890-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 44
        -: 1891:	      {
       22: 1892:		_Link_type __y = _M_clone_node(__x, __node_gen);
       22: 1892-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22: 1893:		__p->_M_left = __y;
       22: 1894:		__y->_M_parent = __p;
       22: 1895:		if (__x->_M_right)
       22: 1895-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 1896:		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
    %%%%%: 1896-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1896-block  1
       22: 1897:		__p = __y;
       22: 1898:		__x = _S_left(__x);
       22: 1898-block  0
call    0 returned 22
        -: 1899:	      }
        -: 1900:	  }
    =====: 1901:	__catch(...)
    $$$$$: 1901-block  0
call    0 never executed
    $$$$$: 1901-block  1
call    1 never executed
        -: 1902:	  {
    =====: 1903:	    _M_erase(__top);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====: 1904:	    __throw_exception_again;
    $$$$$: 1904-block  0
call    0 never executed
        -: 1905:	  }
       44: 1906:	return __top;
       44: 1906-block  0
       44: 1906-block  1
        -: 1907:      }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_copyINSH_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeISB_EPKSL_PSt18_Rb_tree_node_baseRT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_M_copyINSH_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeISB_EPKSL_PSt18_Rb_tree_node_baseRT_ called 88 returned 100% blocks executed 64%
       88: 1876:      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
        -: 1877:      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
        -: 1878:      {
        -: 1879:	// Structural copy. __x and __p must be non-null.
       88: 1880:	_Link_type __top = _M_clone_node(__x, __node_gen);
       88: 1880-block  0
call    0 returned 88
       88: 1881:	__top->_M_parent = __p;
        -: 1882:
        -: 1883:	__try
        -: 1884:	  {
       88: 1885:	    if (__x->_M_right)
branch  0 taken 44 (fallthrough)
branch  1 taken 44
       44: 1886:	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
       44: 1886-block  0
call    0 returned 44
call    1 returned 44
branch  2 taken 44 (fallthrough)
branch  3 taken 0 (throw)
       44: 1886-block  1
       88: 1887:	    __p = __top;
       88: 1888:	    __x = _S_left(__x);
       88: 1888-block  0
call    0 returned 88
        -: 1889:
      132: 1890:	    while (__x != 0)
      132: 1890-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 88
        -: 1891:	      {
       44: 1892:		_Link_type __y = _M_clone_node(__x, __node_gen);
       44: 1892-block  0
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
       44: 1893:		__p->_M_left = __y;
       44: 1894:		__y->_M_parent = __p;
       44: 1895:		if (__x->_M_right)
       44: 1895-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44
    #####: 1896:		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
    %%%%%: 1896-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1896-block  1
       44: 1897:		__p = __y;
       44: 1898:		__x = _S_left(__x);
       44: 1898-block  0
call    0 returned 44
        -: 1899:	      }
        -: 1900:	  }
    =====: 1901:	__catch(...)
    $$$$$: 1901-block  0
call    0 never executed
    $$$$$: 1901-block  1
call    1 never executed
        -: 1902:	  {
    =====: 1903:	    _M_erase(__top);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====: 1904:	    __throw_exception_again;
    $$$$$: 1904-block  0
call    0 never executed
        -: 1905:	  }
       88: 1906:	return __top;
       88: 1906-block  0
       88: 1906-block  1
        -: 1907:      }
------------------
        -: 1908:
        -: 1909:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1910:	   typename _Compare, typename _Alloc>
        -: 1911:    void
     1173: 1912:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1913:    _M_erase(_Link_type __x)
        -: 1914:    {
        -: 1915:      // Erase without rebalancing.
     1173: 1916:      while (__x != 0)
        -: 1917:	{
      481: 1918:	  _M_erase(_S_right(__x));
      481: 1919:	  _Link_type __y = _S_left(__x);
      481: 1920:	  _M_drop_node(__x);
      481: 1921:	  __x = __y;
        -: 1922:	}
      692: 1923:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E called 232 returned 100% blocks executed 100%
      393: 1912:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1913:    _M_erase(_Link_type __x)
        -: 1914:    {
        -: 1915:      // Erase without rebalancing.
      393: 1916:      while (__x != 0)
      393: 1916-block  0
branch  0 taken 161 (fallthrough)
branch  1 taken 232
        -: 1917:	{
      161: 1918:	  _M_erase(_S_right(__x));
      161: 1918-block  0
call    0 returned 161
call    1 returned 161
      161: 1919:	  _Link_type __y = _S_left(__x);
call    0 returned 161
      161: 1920:	  _M_drop_node(__x);
call    0 returned 161
      161: 1921:	  __x = __y;
        -: 1922:	}
      232: 1923:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E called 460 returned 100% blocks executed 100%
      780: 1912:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1913:    _M_erase(_Link_type __x)
        -: 1914:    {
        -: 1915:      // Erase without rebalancing.
      780: 1916:      while (__x != 0)
      780: 1916-block  0
branch  0 taken 320 (fallthrough)
branch  1 taken 460
        -: 1917:	{
      320: 1918:	  _M_erase(_S_right(__x));
      320: 1918-block  0
call    0 returned 320
call    1 returned 320
      320: 1919:	  _Link_type __y = _S_left(__x);
call    0 returned 320
      320: 1920:	  _M_drop_node(__x);
call    0 returned 320
      320: 1921:	  __x = __y;
        -: 1922:	}
      460: 1923:    }
------------------
        -: 1924:
        -: 1925:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1926:	   typename _Compare, typename _Alloc>
        -: 1927:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1928:		      _Compare, _Alloc>::iterator
     1840: 1929:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1930:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1931:		   const _Key& __k)
        -: 1932:    {
     1840: 1933:      while (__x != 0)
     1167: 1934:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      596: 1935:	  __y = __x, __x = _S_left(__x);
        -: 1936:	else
      571: 1937:	  __x = _S_right(__x);
      673: 1938:      return iterator(__y);
        -: 1939:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS8_ called 139 returned 100% blocks executed 100%
      334: 1929:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1930:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1931:		   const _Key& __k)
        -: 1932:    {
      334: 1933:      while (__x != 0)
      334: 1933-block  0
branch  0 taken 195 (fallthrough)
branch  1 taken 139
      195: 1933-block  1
      195: 1934:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      195: 1934-block  0
call    0 returned 195
call    1 returned 195
branch  2 taken 85 (fallthrough)
branch  3 taken 110
       85: 1935:	  __y = __x, __x = _S_left(__x);
       85: 1935-block  0
call    0 returned 85
        -: 1936:	else
      110: 1937:	  __x = _S_right(__x);
      110: 1937-block  0
call    0 returned 110
      139: 1938:      return iterator(__y);
      139: 1938-block  0
call    0 returned 139
        -: 1939:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_ called 534 returned 100% blocks executed 100%
     1506: 1929:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1930:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1931:		   const _Key& __k)
        -: 1932:    {
     1506: 1933:      while (__x != 0)
     1506: 1933-block  0
branch  0 taken 972 (fallthrough)
branch  1 taken 534
      972: 1933-block  1
      972: 1934:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      972: 1934-block  0
call    0 returned 972
call    1 returned 972
branch  2 taken 511 (fallthrough)
branch  3 taken 461
      511: 1935:	  __y = __x, __x = _S_left(__x);
      511: 1935-block  0
call    0 returned 511
        -: 1936:	else
      461: 1937:	  __x = _S_right(__x);
      461: 1937-block  0
call    0 returned 461
      534: 1938:      return iterator(__y);
      534: 1938-block  0
call    0 returned 534
        -: 1939:    }
------------------
        -: 1940:
        -: 1941:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1942:	   typename _Compare, typename _Alloc>
        -: 1943:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1944:		      _Compare, _Alloc>::const_iterator
     1732: 1945:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1946:    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -: 1947:		   const _Key& __k) const
        -: 1948:    {
     1732: 1949:      while (__x != 0)
     1164: 1950:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      700: 1951:	  __y = __x, __x = _S_left(__x);
        -: 1952:	else
      464: 1953:	  __x = _S_right(__x);
      568: 1954:      return const_iterator(__y);
        -: 1955:    }
------------------
_ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS8_:
function _ZNKSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS8_ called 182 returned 100% blocks executed 100%
      498: 1945:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1946:    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -: 1947:		   const _Key& __k) const
        -: 1948:    {
      498: 1949:      while (__x != 0)
      498: 1949-block  0
branch  0 taken 316 (fallthrough)
branch  1 taken 182
      316: 1949-block  1
      316: 1950:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      316: 1950-block  0
call    0 returned 316
call    1 returned 316
branch  2 taken 153 (fallthrough)
branch  3 taken 163
      153: 1951:	  __y = __x, __x = _S_left(__x);
      153: 1951-block  0
call    0 returned 153
        -: 1952:	else
      163: 1953:	  __x = _S_right(__x);
      163: 1953-block  0
call    0 returned 163
      182: 1954:      return const_iterator(__y);
      182: 1954-block  0
call    0 returned 182
        -: 1955:    }
------------------
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISB_EPKSt18_Rb_tree_node_baseRS7_:
function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISB_EPKSt18_Rb_tree_node_baseRS7_ called 386 returned 100% blocks executed 100%
     1234: 1945:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1946:    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -: 1947:		   const _Key& __k) const
        -: 1948:    {
     1234: 1949:      while (__x != 0)
     1234: 1949-block  0
branch  0 taken 848 (fallthrough)
branch  1 taken 386
      848: 1949-block  1
      848: 1950:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      848: 1950-block  0
call    0 returned 848
call    1 returned 848
branch  2 taken 547 (fallthrough)
branch  3 taken 301
      547: 1951:	  __y = __x, __x = _S_left(__x);
      547: 1951-block  0
call    0 returned 547
        -: 1952:	else
      301: 1953:	  __x = _S_right(__x);
      301: 1953-block  0
call    0 returned 301
      386: 1954:      return const_iterator(__y);
      386: 1954-block  0
call    0 returned 386
        -: 1955:    }
------------------
        -: 1956:
        -: 1957:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1958:	   typename _Compare, typename _Alloc>
        -: 1959:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1960:		      _Compare, _Alloc>::iterator
       16: 1961:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1962:    _M_upper_bound(_Link_type __x, _Base_ptr __y,
        -: 1963:		   const _Key& __k)
        -: 1964:    {
       16: 1965:      while (__x != 0)
        3: 1966:	if (_M_impl._M_key_compare(__k, _S_key(__x)))
        3: 1967:	  __y = __x, __x = _S_left(__x);
        -: 1968:	else
    #####: 1969:	  __x = _S_right(__x);
       13: 1970:      return iterator(__y);
        -: 1971:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_upper_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_upper_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_ called 6 returned 100% blocks executed 90%
        8: 1961:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1962:    _M_upper_bound(_Link_type __x, _Base_ptr __y,
        -: 1963:		   const _Key& __k)
        -: 1964:    {
        8: 1965:      while (__x != 0)
        8: 1965-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        2: 1965-block  1
        2: 1966:	if (_M_impl._M_key_compare(__k, _S_key(__x)))
        2: 1966-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 1967:	  __y = __x, __x = _S_left(__x);
        2: 1967-block  0
call    0 returned 2
        -: 1968:	else
    #####: 1969:	  __x = _S_right(__x);
    %%%%%: 1969-block  0
call    0 never executed
        6: 1970:      return iterator(__y);
        6: 1970-block  0
call    0 returned 6
        -: 1971:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS8_ called 7 returned 100% blocks executed 90%
        8: 1961:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1962:    _M_upper_bound(_Link_type __x, _Base_ptr __y,
        -: 1963:		   const _Key& __k)
        -: 1964:    {
        8: 1965:      while (__x != 0)
        8: 1965-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1: 1965-block  1
        1: 1966:	if (_M_impl._M_key_compare(__k, _S_key(__x)))
        1: 1966-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1967:	  __y = __x, __x = _S_left(__x);
        1: 1967-block  0
call    0 returned 1
        -: 1968:	else
    #####: 1969:	  __x = _S_right(__x);
    %%%%%: 1969-block  0
call    0 never executed
        7: 1970:      return iterator(__y);
        7: 1970-block  0
call    0 returned 7
        -: 1971:    }
------------------
        -: 1972:
        -: 1973:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1974:	   typename _Compare, typename _Alloc>
        -: 1975:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1976:		      _Compare, _Alloc>::const_iterator
        -: 1977:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1978:    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -: 1979:		   const _Key& __k) const
        -: 1980:    {
        -: 1981:      while (__x != 0)
        -: 1982:	if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 1983:	  __y = __x, __x = _S_left(__x);
        -: 1984:	else
        -: 1985:	  __x = _S_right(__x);
        -: 1986:      return const_iterator(__y);
        -: 1987:    }
        -: 1988:
        -: 1989:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1990:	   typename _Compare, typename _Alloc>
        -: 1991:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1992:			   _Compare, _Alloc>::iterator,
        -: 1993:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1994:			   _Compare, _Alloc>::iterator>
       13: 1995:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1996:    equal_range(const _Key& __k)
        -: 1997:    {
       13: 1998:      _Link_type __x = _M_begin();
       13: 1999:      _Base_ptr __y = _M_end();
       22: 2000:      while (__x != 0)
        -: 2001:	{
       22: 2002:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
        4: 2003:	    __x = _S_right(__x);
       18: 2004:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
        5: 2005:	    __y = __x, __x = _S_left(__x);
        -: 2006:	  else
        -: 2007:	    {
       13: 2008:	      _Link_type __xu(__x);
       13: 2009:	      _Base_ptr __yu(__y);
       13: 2010:	      __y = __x, __x = _S_left(__x);
       13: 2011:	      __xu = _S_right(__xu);
       13: 2012:	      return pair<iterator,
        -: 2013:			  iterator>(_M_lower_bound(__x, __y, __k),
       13: 2014:				    _M_upper_bound(__xu, __yu, __k));
        -: 2015:	    }
        -: 2016:	}
        -: 2017:      return pair<iterator, iterator>(iterator(__y),
    #####: 2018:				      iterator(__y));
        -: 2019:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11equal_rangeERS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11equal_rangeERS7_ called 6 returned 100% blocks executed 83%
        6: 1995:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1996:    equal_range(const _Key& __k)
        -: 1997:    {
        6: 1998:      _Link_type __x = _M_begin();
        6: 1998-block  0
call    0 returned 6
        6: 1999:      _Base_ptr __y = _M_end();
call    0 returned 6
       10: 2000:      while (__x != 0)
       10: 2000-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
        4: 2000-block  1
        -: 2001:	{
       10: 2002:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
       10: 2002-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 2 (fallthrough)
branch  3 taken 8
        2: 2003:	    __x = _S_right(__x);
        2: 2003-block  0
call    0 returned 2
        8: 2004:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
        8: 2004-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 2 (fallthrough)
branch  3 taken 6
        2: 2005:	    __y = __x, __x = _S_left(__x);
        2: 2005-block  0
call    0 returned 2
        -: 2006:	  else
        -: 2007:	    {
        6: 2008:	      _Link_type __xu(__x);
        6: 2009:	      _Base_ptr __yu(__y);
        6: 2010:	      __y = __x, __x = _S_left(__x);
        6: 2010-block  0
call    0 returned 6
        6: 2011:	      __xu = _S_right(__xu);
call    0 returned 6
        6: 2012:	      return pair<iterator,
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        -: 2013:			  iterator>(_M_lower_bound(__x, __y, __k),
        6: 2014:				    _M_upper_bound(__xu, __yu, __k));
        6: 2014-block  0
call    0 returned 6
        -: 2015:	    }
        -: 2016:	}
        -: 2017:      return pair<iterator, iterator>(iterator(__y),
    #####: 2018:				      iterator(__y));
    %%%%%: 2018-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2019:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11equal_rangeERS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE11equal_rangeERS8_ called 7 returned 100% blocks executed 83%
        7: 1995:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1996:    equal_range(const _Key& __k)
        -: 1997:    {
        7: 1998:      _Link_type __x = _M_begin();
        7: 1998-block  0
call    0 returned 7
        7: 1999:      _Base_ptr __y = _M_end();
call    0 returned 7
       12: 2000:      while (__x != 0)
       12: 2000-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        5: 2000-block  1
        -: 2001:	{
       12: 2002:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
       12: 2002-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 2 (fallthrough)
branch  3 taken 10
        2: 2003:	    __x = _S_right(__x);
        2: 2003-block  0
call    0 returned 2
       10: 2004:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
       10: 2004-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 3 (fallthrough)
branch  3 taken 7
        3: 2005:	    __y = __x, __x = _S_left(__x);
        3: 2005-block  0
call    0 returned 3
        -: 2006:	  else
        -: 2007:	    {
        7: 2008:	      _Link_type __xu(__x);
        7: 2009:	      _Base_ptr __yu(__y);
        7: 2010:	      __y = __x, __x = _S_left(__x);
        7: 2010-block  0
call    0 returned 7
        7: 2011:	      __xu = _S_right(__xu);
call    0 returned 7
        7: 2012:	      return pair<iterator,
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        -: 2013:			  iterator>(_M_lower_bound(__x, __y, __k),
        7: 2014:				    _M_upper_bound(__xu, __yu, __k));
        7: 2014-block  0
call    0 returned 7
        -: 2015:	    }
        -: 2016:	}
        -: 2017:      return pair<iterator, iterator>(iterator(__y),
    #####: 2018:				      iterator(__y));
    %%%%%: 2018-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2019:    }
------------------
        -: 2020:
        -: 2021:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2022:	   typename _Compare, typename _Alloc>
        -: 2023:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2024:			   _Compare, _Alloc>::const_iterator,
        -: 2025:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2026:			   _Compare, _Alloc>::const_iterator>
        -: 2027:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2028:    equal_range(const _Key& __k) const
        -: 2029:    {
        -: 2030:      _Const_Link_type __x = _M_begin();
        -: 2031:      _Const_Base_ptr __y = _M_end();
        -: 2032:      while (__x != 0)
        -: 2033:	{
        -: 2034:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
        -: 2035:	    __x = _S_right(__x);
        -: 2036:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 2037:	    __y = __x, __x = _S_left(__x);
        -: 2038:	  else
        -: 2039:	    {
        -: 2040:	      _Const_Link_type __xu(__x);
        -: 2041:	      _Const_Base_ptr __yu(__y);
        -: 2042:	      __y = __x, __x = _S_left(__x);
        -: 2043:	      __xu = _S_right(__xu);
        -: 2044:	      return pair<const_iterator,
        -: 2045:			  const_iterator>(_M_lower_bound(__x, __y, __k),
        -: 2046:					  _M_upper_bound(__xu, __yu, __k));
        -: 2047:	    }
        -: 2048:	}
        -: 2049:      return pair<const_iterator, const_iterator>(const_iterator(__y),
        -: 2050:						  const_iterator(__y));
        -: 2051:    }
        -: 2052:
        -: 2053:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2054:	   typename _Compare, typename _Alloc>
        -: 2055:    void
        -: 2056:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2057:    swap(_Rb_tree& __t)
        -: 2058:    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
        -: 2059:    {
        -: 2060:      if (_M_root() == 0)
        -: 2061:	{
        -: 2062:	  if (__t._M_root() != 0)
        -: 2063:	    _M_impl._M_move_data(__t._M_impl);
        -: 2064:	}
        -: 2065:      else if (__t._M_root() == 0)
        -: 2066:	__t._M_impl._M_move_data(_M_impl);
        -: 2067:      else
        -: 2068:	{
        -: 2069:	  std::swap(_M_root(),__t._M_root());
        -: 2070:	  std::swap(_M_leftmost(),__t._M_leftmost());
        -: 2071:	  std::swap(_M_rightmost(),__t._M_rightmost());
        -: 2072:
        -: 2073:	  _M_root()->_M_parent = _M_end();
        -: 2074:	  __t._M_root()->_M_parent = __t._M_end();
        -: 2075:	  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
        -: 2076:	}
        -: 2077:      // No need to swap header's color as it does not change.
        -: 2078:      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);
        -: 2079:
        -: 2080:      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
        -: 2081:				__t._M_get_Node_allocator());
        -: 2082:    }
        -: 2083:
        -: 2084:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2085:	   typename _Compare, typename _Alloc>
        -: 2086:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2087:			   _Compare, _Alloc>::_Base_ptr,
        -: 2088:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2089:			   _Compare, _Alloc>::_Base_ptr>
       82: 2090:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2091:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2092:    {
        -: 2093:      typedef pair<_Base_ptr, _Base_ptr> _Res;
       82: 2094:      _Link_type __x = _M_begin();
       82: 2095:      _Base_ptr __y = _M_end();
       82: 2096:      bool __comp = true;
      82*: 2097:      while (__x != 0)
        -: 2098:	{
    #####: 2099:	  __y = __x;
    #####: 2100:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
    #####: 2101:	  __x = __comp ? _S_left(__x) : _S_right(__x);
        -: 2102:	}
       82: 2103:      iterator __j = iterator(__y);
       82: 2104:      if (__comp)
        -: 2105:	{
       82: 2106:	  if (__j == begin())
       82: 2107:	    return _Res(__x, __y);
        -: 2108:	  else
    #####: 2109:	    --__j;
        -: 2110:	}
    #####: 2111:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
    #####: 2112:	return _Res(__x, __y);
    #####: 2113:      return _Res(__j._M_node, 0);
        -: 2114:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE24_M_get_insert_unique_posERS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE24_M_get_insert_unique_posERS8_ called 28 returned 100% blocks executed 50%
       28: 2090:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2091:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2092:    {
        -: 2093:      typedef pair<_Base_ptr, _Base_ptr> _Res;
       28: 2094:      _Link_type __x = _M_begin();
       28: 2094-block  0
call    0 returned 28
       28: 2095:      _Base_ptr __y = _M_end();
call    0 returned 28
       28: 2096:      bool __comp = true;
      28*: 2097:      while (__x != 0)
       28: 2097-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 28
        -: 2098:	{
    #####: 2099:	  __y = __x;
    #####: 2100:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
    %%%%%: 2100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2100-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2101:	  __x = __comp ? _S_left(__x) : _S_right(__x);
    %%%%%: 2101-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2101-block  1
call    2 never executed
    %%%%%: 2101-block  2
call    3 never executed
    %%%%%: 2101-block  3
        -: 2102:	}
       28: 2103:      iterator __j = iterator(__y);
       28: 2103-block  0
call    0 returned 28
       28: 2104:      if (__comp)
branch  0 taken 28 (fallthrough)
branch  1 taken 0
        -: 2105:	{
       28: 2106:	  if (__j == begin())
       28: 2106-block  0
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0
       28: 2107:	    return _Res(__x, __y);
       28: 2107-block  0
call    0 returned 28
        -: 2108:	  else
    #####: 2109:	    --__j;
    %%%%%: 2109-block  0
call    0 never executed
        -: 2110:	}
    #####: 2111:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
    %%%%%: 2111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2111-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2111-block  2
branch  6 never executed
branch  7 never executed
    #####: 2112:	return _Res(__x, __y);
    %%%%%: 2112-block  0
call    0 never executed
    #####: 2113:      return _Res(__j._M_node, 0);
    %%%%%: 2113-block  0
call    0 never executed
        -: 2114:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_ called 54 returned 100% blocks executed 50%
       54: 2090:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2091:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2092:    {
        -: 2093:      typedef pair<_Base_ptr, _Base_ptr> _Res;
       54: 2094:      _Link_type __x = _M_begin();
       54: 2094-block  0
call    0 returned 54
       54: 2095:      _Base_ptr __y = _M_end();
call    0 returned 54
       54: 2096:      bool __comp = true;
      54*: 2097:      while (__x != 0)
       54: 2097-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 54
        -: 2098:	{
    #####: 2099:	  __y = __x;
    #####: 2100:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
    %%%%%: 2100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2100-block  1
call    3 never executed
    #####: 2101:	  __x = __comp ? _S_left(__x) : _S_right(__x);
branch  0 never executed
branch  1 never executed
    %%%%%: 2101-block  0
call    2 never executed
    %%%%%: 2101-block  1
call    3 never executed
    %%%%%: 2101-block  2
        -: 2102:	}
       54: 2103:      iterator __j = iterator(__y);
       54: 2103-block  0
call    0 returned 54
       54: 2104:      if (__comp)
branch  0 taken 54 (fallthrough)
branch  1 taken 0
        -: 2105:	{
       54: 2106:	  if (__j == begin())
       54: 2106-block  0
call    0 returned 54
call    1 returned 54
branch  2 taken 54 (fallthrough)
branch  3 taken 0
       54: 2107:	    return _Res(__x, __y);
       54: 2107-block  0
call    0 returned 54
        -: 2108:	  else
    #####: 2109:	    --__j;
    %%%%%: 2109-block  0
call    0 never executed
        -: 2110:	}
    #####: 2111:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
    %%%%%: 2111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2111-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2112:	return _Res(__x, __y);
    %%%%%: 2112-block  0
call    0 never executed
    #####: 2113:      return _Res(__j._M_node, 0);
    %%%%%: 2113-block  0
call    0 never executed
        -: 2114:    }
------------------
        -: 2115:
        -: 2116:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2117:	   typename _Compare, typename _Alloc>
        -: 2118:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2119:			   _Compare, _Alloc>::_Base_ptr,
        -: 2120:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2121:			   _Compare, _Alloc>::_Base_ptr>
        -: 2122:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2123:    _M_get_insert_equal_pos(const key_type& __k)
        -: 2124:    {
        -: 2125:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2126:      _Link_type __x = _M_begin();
        -: 2127:      _Base_ptr __y = _M_end();
        -: 2128:      while (__x != 0)
        -: 2129:	{
        -: 2130:	  __y = __x;
        -: 2131:	  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
        -: 2132:		_S_left(__x) : _S_right(__x);
        -: 2133:	}
        -: 2134:      return _Res(__x, __y);
        -: 2135:    }
        -: 2136:
        -: 2137:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2138:	   typename _Compare, typename _Alloc>
        -: 2139:#if __cplusplus >= 201103L
        -: 2140:    template<typename _Arg>
        -: 2141:#endif
        -: 2142:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2143:			   _Compare, _Alloc>::iterator, bool>
        -: 2144:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2145:#if __cplusplus >= 201103L
        -: 2146:    _M_insert_unique(_Arg&& __v)
        -: 2147:#else
        -: 2148:    _M_insert_unique(const _Val& __v)
        -: 2149:#endif
        -: 2150:    {
        -: 2151:      typedef pair<iterator, bool> _Res;
        -: 2152:      pair<_Base_ptr, _Base_ptr> __res
        -: 2153:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
        -: 2154:
        -: 2155:      if (__res.second)
        -: 2156:	{
        -: 2157:	  _Alloc_node __an(*this);
        -: 2158:	  return _Res(_M_insert_(__res.first, __res.second,
        -: 2159:				 _GLIBCXX_FORWARD(_Arg, __v), __an),
        -: 2160:		      true);
        -: 2161:	}
        -: 2162:
        -: 2163:      return _Res(iterator(__res.first), false);
        -: 2164:    }
        -: 2165:
        -: 2166:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2167:	   typename _Compare, typename _Alloc>
        -: 2168:#if __cplusplus >= 201103L
        -: 2169:    template<typename _Arg>
        -: 2170:#endif
        -: 2171:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2172:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2173:#if __cplusplus >= 201103L
        -: 2174:    _M_insert_equal(_Arg&& __v)
        -: 2175:#else
        -: 2176:    _M_insert_equal(const _Val& __v)
        -: 2177:#endif
        -: 2178:    {
        -: 2179:      pair<_Base_ptr, _Base_ptr> __res
        -: 2180:	= _M_get_insert_equal_pos(_KeyOfValue()(__v));
        -: 2181:      _Alloc_node __an(*this);
        -: 2182:      return _M_insert_(__res.first, __res.second,
        -: 2183:			_GLIBCXX_FORWARD(_Arg, __v), __an);
        -: 2184:    }
        -: 2185:
        -: 2186:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2187:	   typename _Compare, typename _Alloc>
        -: 2188:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2189:			   _Compare, _Alloc>::_Base_ptr,
        -: 2190:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2191:			   _Compare, _Alloc>::_Base_ptr>
      304: 2192:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2193:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2194:				  const key_type& __k)
        -: 2195:    {
      304: 2196:      iterator __pos = __position._M_const_cast();
        -: 2197:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2198:
        -: 2199:      // end()
      304: 2200:      if (__pos._M_node == _M_end())
        -: 2201:	{
      246: 2202:	  if (size() > 0
      246: 2203:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
      164: 2204:	    return _Res(0, _M_rightmost());
        -: 2205:	  else
       82: 2206:	    return _M_get_insert_unique_pos(__k);
        -: 2207:	}
       58: 2208:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
        -: 2209:	{
        -: 2210:	  // First, try before...
       58: 2211:	  iterator __before = __pos;
       58: 2212:	  if (__pos._M_node == _M_leftmost()) // begin()
       15: 2213:	    return _Res(_M_leftmost(), _M_leftmost());
       43: 2214:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
        -: 2215:	    {
       43: 2216:	      if (_S_right(__before._M_node) == 0)
        8: 2217:		return _Res(0, __before._M_node);
        -: 2218:	      else
       35: 2219:		return _Res(__pos._M_node, __pos._M_node);
        -: 2220:	    }
        -: 2221:	  else
    #####: 2222:	    return _M_get_insert_unique_pos(__k);
        -: 2223:	}
    #####: 2224:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
        -: 2225:	{
        -: 2226:	  // ... then try after.
    #####: 2227:	  iterator __after = __pos;
    #####: 2228:	  if (__pos._M_node == _M_rightmost())
    #####: 2229:	    return _Res(0, _M_rightmost());
    #####: 2230:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
        -: 2231:	    {
    #####: 2232:	      if (_S_right(__pos._M_node) == 0)
    #####: 2233:		return _Res(0, __pos._M_node);
        -: 2234:	      else
    #####: 2235:		return _Res(__after._M_node, __after._M_node);
        -: 2236:	    }
        -: 2237:	  else
    #####: 2238:	    return _M_get_insert_unique_pos(__k);
        -: 2239:	}
        -: 2240:      else
        -: 2241:	// Equivalent keys.
    #####: 2242:	return _Res(__pos._M_node, 0);
        -: 2243:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS8_ called 104 returned 100% blocks executed 60%
      104: 2192:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2193:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2194:				  const key_type& __k)
        -: 2195:    {
      104: 2196:      iterator __pos = __position._M_const_cast();
      104: 2196-block  0
call    0 returned 104
        -: 2197:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2198:
        -: 2199:      // end()
      104: 2200:      if (__pos._M_node == _M_end())
call    0 returned 104
branch  1 taken 66 (fallthrough)
branch  2 taken 38
        -: 2201:	{
       66: 2202:	  if (size() > 0
       66: 2202-block  0
call    0 returned 66
       66: 2203:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
branch  0 taken 38 (fallthrough)
branch  1 taken 28
       38: 2203-block  0
call    2 returned 38
call    3 returned 38
branch  4 taken 38 (fallthrough)
branch  5 taken 0 (throw)
       38: 2203-block  1
call    6 returned 38
branch  7 taken 38 (fallthrough)
branch  8 taken 0 (throw)
       38: 2203-block  2
branch  9 taken 38 (fallthrough)
branch 10 taken 0
       38: 2203-block  3
       28: 2203-block  4
       66: 2203-block  5
branch 11 taken 38 (fallthrough)
branch 12 taken 28
       38: 2204:	    return _Res(0, _M_rightmost());
       38: 2204-block  0
call    0 returned 38
call    1 returned 38
        -: 2205:	  else
       28: 2206:	    return _M_get_insert_unique_pos(__k);
       28: 2206-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
        -: 2207:	}
       38: 2208:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
       38: 2208-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38: 2208-block  1
call    3 returned 38
branch  4 taken 38 (fallthrough)
branch  5 taken 0 (throw)
       38: 2208-block  2
branch  6 taken 38 (fallthrough)
branch  7 taken 0
        -: 2209:	{
        -: 2210:	  // First, try before...
       38: 2211:	  iterator __before = __pos;
       38: 2212:	  if (__pos._M_node == _M_leftmost()) // begin()
       38: 2212-block  0
call    0 returned 38
branch  1 taken 9 (fallthrough)
branch  2 taken 29
        9: 2213:	    return _Res(_M_leftmost(), _M_leftmost());
        9: 2213-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
       29: 2214:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
       29: 2214-block  0
call    0 returned 29
call    1 returned 29
branch  2 taken 29 (fallthrough)
branch  3 taken 0 (throw)
       29: 2214-block  1
call    4 returned 29
branch  5 taken 29 (fallthrough)
branch  6 taken 0 (throw)
       29: 2214-block  2
branch  7 taken 29 (fallthrough)
branch  8 taken 0
        -: 2215:	    {
       29: 2216:	      if (_S_right(__before._M_node) == 0)
       29: 2216-block  0
call    0 returned 29
branch  1 taken 2 (fallthrough)
branch  2 taken 27
        2: 2217:		return _Res(0, __before._M_node);
        2: 2217-block  0
call    0 returned 2
        -: 2218:	      else
       27: 2219:		return _Res(__pos._M_node, __pos._M_node);
       27: 2219-block  0
call    0 returned 27
        -: 2220:	    }
        -: 2221:	  else
    #####: 2222:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2222-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2223:	}
    #####: 2224:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    %%%%%: 2224-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2224-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2224-block  2
branch  6 never executed
branch  7 never executed
        -: 2225:	{
        -: 2226:	  // ... then try after.
    #####: 2227:	  iterator __after = __pos;
    #####: 2228:	  if (__pos._M_node == _M_rightmost())
    %%%%%: 2228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2229:	    return _Res(0, _M_rightmost());
    %%%%%: 2229-block  0
call    0 never executed
call    1 never executed
    #####: 2230:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
    %%%%%: 2230-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2230-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2230-block  2
branch  7 never executed
branch  8 never executed
        -: 2231:	    {
    #####: 2232:	      if (_S_right(__pos._M_node) == 0)
    %%%%%: 2232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2233:		return _Res(0, __pos._M_node);
    %%%%%: 2233-block  0
call    0 never executed
        -: 2234:	      else
    #####: 2235:		return _Res(__after._M_node, __after._M_node);
    %%%%%: 2235-block  0
call    0 never executed
        -: 2236:	    }
        -: 2237:	  else
    #####: 2238:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2238-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2239:	}
        -: 2240:      else
        -: 2241:	// Equivalent keys.
    #####: 2242:	return _Res(__pos._M_node, 0);
    %%%%%: 2242-block  0
call    0 never executed
        -: 2243:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_ called 200 returned 100% blocks executed 60%
      200: 2192:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2193:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2194:				  const key_type& __k)
        -: 2195:    {
      200: 2196:      iterator __pos = __position._M_const_cast();
      200: 2196-block  0
call    0 returned 200
        -: 2197:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2198:
        -: 2199:      // end()
      200: 2200:      if (__pos._M_node == _M_end())
call    0 returned 200
branch  1 taken 180 (fallthrough)
branch  2 taken 20
        -: 2201:	{
      180: 2202:	  if (size() > 0
      180: 2202-block  0
call    0 returned 180
      180: 2203:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
branch  0 taken 126 (fallthrough)
branch  1 taken 54
      126: 2203-block  0
call    2 returned 126
call    3 returned 126
branch  4 taken 126 (fallthrough)
branch  5 taken 0 (throw)
      126: 2203-block  1
call    6 returned 126
branch  7 taken 126 (fallthrough)
branch  8 taken 0
      126: 2203-block  2
       54: 2203-block  3
      180: 2203-block  4
branch  9 taken 126 (fallthrough)
branch 10 taken 54
      126: 2204:	    return _Res(0, _M_rightmost());
      126: 2204-block  0
call    0 returned 126
call    1 returned 126
        -: 2205:	  else
       54: 2206:	    return _M_get_insert_unique_pos(__k);
       54: 2206-block  0
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
        -: 2207:	}
       20: 2208:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
       20: 2208-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20: 2208-block  1
call    3 returned 20
branch  4 taken 20 (fallthrough)
branch  5 taken 0
        -: 2209:	{
        -: 2210:	  // First, try before...
       20: 2211:	  iterator __before = __pos;
       20: 2212:	  if (__pos._M_node == _M_leftmost()) // begin()
       20: 2212-block  0
call    0 returned 20
branch  1 taken 6 (fallthrough)
branch  2 taken 14
        6: 2213:	    return _Res(_M_leftmost(), _M_leftmost());
        6: 2213-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
       14: 2214:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
       14: 2214-block  0
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
       14: 2214-block  1
call    4 returned 14
branch  5 taken 14 (fallthrough)
branch  6 taken 0
        -: 2215:	    {
       14: 2216:	      if (_S_right(__before._M_node) == 0)
       14: 2216-block  0
call    0 returned 14
branch  1 taken 6 (fallthrough)
branch  2 taken 8
        6: 2217:		return _Res(0, __before._M_node);
        6: 2217-block  0
call    0 returned 6
        -: 2218:	      else
        8: 2219:		return _Res(__pos._M_node, __pos._M_node);
        8: 2219-block  0
call    0 returned 8
        -: 2220:	    }
        -: 2221:	  else
    #####: 2222:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2222-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2223:	}
    #####: 2224:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    %%%%%: 2224-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2224-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2225:	{
        -: 2226:	  // ... then try after.
    #####: 2227:	  iterator __after = __pos;
    #####: 2228:	  if (__pos._M_node == _M_rightmost())
    %%%%%: 2228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2229:	    return _Res(0, _M_rightmost());
    %%%%%: 2229-block  0
call    0 never executed
call    1 never executed
    #####: 2230:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
    %%%%%: 2230-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2230-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2231:	    {
    #####: 2232:	      if (_S_right(__pos._M_node) == 0)
    %%%%%: 2232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2233:		return _Res(0, __pos._M_node);
    %%%%%: 2233-block  0
call    0 never executed
        -: 2234:	      else
    #####: 2235:		return _Res(__after._M_node, __after._M_node);
    %%%%%: 2235-block  0
call    0 never executed
        -: 2236:	    }
        -: 2237:	  else
    #####: 2238:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2238-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2239:	}
        -: 2240:      else
        -: 2241:	// Equivalent keys.
    #####: 2242:	return _Res(__pos._M_node, 0);
    %%%%%: 2242-block  0
call    0 never executed
        -: 2243:    }
------------------
        -: 2244:
        -: 2245:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2246:	   typename _Compare, typename _Alloc>
        -: 2247:#if __cplusplus >= 201103L
        -: 2248:    template<typename _Arg, typename _NodeGen>
        -: 2249:#else
        -: 2250:    template<typename _NodeGen>
        -: 2251:#endif
        -: 2252:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2253:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2254:      _M_insert_unique_(const_iterator __position,
        -: 2255:#if __cplusplus >= 201103L
        -: 2256:			_Arg&& __v,
        -: 2257:#else
        -: 2258:			const _Val& __v,
        -: 2259:#endif
        -: 2260:			_NodeGen& __node_gen)
        -: 2261:    {
        -: 2262:      pair<_Base_ptr, _Base_ptr> __res
        -: 2263:	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
        -: 2264:
        -: 2265:      if (__res.second)
        -: 2266:	return _M_insert_(__res.first, __res.second,
        -: 2267:			  _GLIBCXX_FORWARD(_Arg, __v),
        -: 2268:			  __node_gen);
        -: 2269:      return iterator(__res.first);
        -: 2270:    }
        -: 2271:
        -: 2272:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2273:	   typename _Compare, typename _Alloc>
        -: 2274:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2275:			   _Compare, _Alloc>::_Base_ptr,
        -: 2276:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2277:			   _Compare, _Alloc>::_Base_ptr>
        -: 2278:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2279:    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
        -: 2280:    {
        -: 2281:      iterator __pos = __position._M_const_cast();
        -: 2282:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2283:
        -: 2284:      // end()
        -: 2285:      if (__pos._M_node == _M_end())
        -: 2286:	{
        -: 2287:	  if (size() > 0
        -: 2288:	      && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
        -: 2289:	    return _Res(0, _M_rightmost());
        -: 2290:	  else
        -: 2291:	    return _M_get_insert_equal_pos(__k);
        -: 2292:	}
        -: 2293:      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
        -: 2294:	{
        -: 2295:	  // First, try before...
        -: 2296:	  iterator __before = __pos;
        -: 2297:	  if (__pos._M_node == _M_leftmost()) // begin()
        -: 2298:	    return _Res(_M_leftmost(), _M_leftmost());
        -: 2299:	  else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
        -: 2300:	    {
        -: 2301:	      if (_S_right(__before._M_node) == 0)
        -: 2302:		return _Res(0, __before._M_node);
        -: 2303:	      else
        -: 2304:		return _Res(__pos._M_node, __pos._M_node);
        -: 2305:	    }
        -: 2306:	  else
        -: 2307:	    return _M_get_insert_equal_pos(__k);
        -: 2308:	}
        -: 2309:      else
        -: 2310:	{
        -: 2311:	  // ... then try after.
        -: 2312:	  iterator __after = __pos;
        -: 2313:	  if (__pos._M_node == _M_rightmost())
        -: 2314:	    return _Res(0, _M_rightmost());
        -: 2315:	  else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
        -: 2316:	    {
        -: 2317:	      if (_S_right(__pos._M_node) == 0)
        -: 2318:		return _Res(0, __pos._M_node);
        -: 2319:	      else
        -: 2320:		return _Res(__after._M_node, __after._M_node);
        -: 2321:	    }
        -: 2322:	  else
        -: 2323:	    return _Res(0, 0);
        -: 2324:	}
        -: 2325:    }
        -: 2326:
        -: 2327:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2328:	   typename _Compare, typename _Alloc>
        -: 2329:#if __cplusplus >= 201103L
        -: 2330:    template<typename _Arg, typename _NodeGen>
        -: 2331:#else
        -: 2332:    template<typename _NodeGen>
        -: 2333:#endif
        -: 2334:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2335:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2336:      _M_insert_equal_(const_iterator __position,
        -: 2337:#if __cplusplus >= 201103L
        -: 2338:		       _Arg&& __v,
        -: 2339:#else
        -: 2340:		       const _Val& __v,
        -: 2341:#endif
        -: 2342:		       _NodeGen& __node_gen)
        -: 2343:      {
        -: 2344:	pair<_Base_ptr, _Base_ptr> __res
        -: 2345:	  = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));
        -: 2346:
        -: 2347:	if (__res.second)
        -: 2348:	  return _M_insert_(__res.first, __res.second,
        -: 2349:			    _GLIBCXX_FORWARD(_Arg, __v),
        -: 2350:			    __node_gen);
        -: 2351:
        -: 2352:	return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));
        -: 2353:      }
        -: 2354:
        -: 2355:#if __cplusplus >= 201103L
        -: 2356:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2357:	   typename _Compare, typename _Alloc>
        -: 2358:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      304: 2359:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2360:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2361:    {
      254: 2362:      bool __insert_left = (__x != 0 || __p == _M_end()
      558: 2363:			    || _M_impl._M_key_compare(_S_key(__z),
        -: 2364:						      _S_key(__p)));
        -: 2365:
      304: 2366:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      304: 2367:				    this->_M_impl._M_header);
      304: 2368:      ++_M_impl._M_node_count;
      304: 2369:      return iterator(__z);
        -: 2370:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeIS9_E called 104 returned 100% blocks executed 100%
      104: 2359:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2360:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2361:    {
       68: 2362:      bool __insert_left = (__x != 0 || __p == _M_end()
       68: 2362-block  0
call    0 returned 68
branch  1 taken 40 (fallthrough)
branch  2 taken 28
      172: 2363:			    || _M_impl._M_key_compare(_S_key(__z),
      104: 2363-block  0
branch  0 taken 68 (fallthrough)
branch  1 taken 36
       40: 2363-block  1
call    2 returned 40
call    3 returned 40
call    4 returned 40
branch  5 taken 0 (fallthrough)
branch  6 taken 40
       64: 2363-block  2
       40: 2363-block  3
        -: 2364:						      _S_key(__p)));
        -: 2365:
      104: 2366:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      104: 2367:				    this->_M_impl._M_header);
      104: 2367-block  0
call    0 returned 104
      104: 2368:      ++_M_impl._M_node_count;
      104: 2369:      return iterator(__z);
call    0 returned 104
        -: 2370:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSJ_PSt13_Rb_tree_nodeISB_E called 200 returned 100% blocks executed 100%
      200: 2359:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2360:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2361:    {
      186: 2362:      bool __insert_left = (__x != 0 || __p == _M_end()
      186: 2362-block  0
call    0 returned 186
branch  1 taken 132 (fallthrough)
branch  2 taken 54
      386: 2363:			    || _M_impl._M_key_compare(_S_key(__z),
      200: 2363-block  0
branch  0 taken 186 (fallthrough)
branch  1 taken 14
      132: 2363-block  1
call    2 returned 132
call    3 returned 132
call    4 returned 132
branch  5 taken 0 (fallthrough)
branch  6 taken 132
       68: 2363-block  2
      132: 2363-block  3
        -: 2364:						      _S_key(__p)));
        -: 2365:
      200: 2366:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      200: 2367:				    this->_M_impl._M_header);
      200: 2367-block  0
call    0 returned 200
      200: 2368:      ++_M_impl._M_node_count;
      200: 2369:      return iterator(__z);
call    0 returned 200
        -: 2370:    }
------------------
        -: 2371:
        -: 2372:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2373:	   typename _Compare, typename _Alloc>
        -: 2374:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2375:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2376:    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
        -: 2377:    {
        -: 2378:      bool __insert_left = (__p == _M_end()
        -: 2379:			    || !_M_impl._M_key_compare(_S_key(__p),
        -: 2380:						       _S_key(__z)));
        -: 2381:
        -: 2382:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        -: 2383:				    this->_M_impl._M_header);
        -: 2384:      ++_M_impl._M_node_count;
        -: 2385:      return iterator(__z);
        -: 2386:    }
        -: 2387:
        -: 2388:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2389:	   typename _Compare, typename _Alloc>
        -: 2390:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2391:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2392:    _M_insert_equal_lower_node(_Link_type __z)
        -: 2393:    {
        -: 2394:      _Link_type __x = _M_begin();
        -: 2395:      _Base_ptr __y = _M_end();
        -: 2396:      while (__x != 0)
        -: 2397:	{
        -: 2398:	  __y = __x;
        -: 2399:	  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
        -: 2400:		_S_left(__x) : _S_right(__x);
        -: 2401:	}
        -: 2402:      return _M_insert_lower_node(__y, __z);
        -: 2403:    }
        -: 2404:
        -: 2405:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2406:	   typename _Compare, typename _Alloc>
        -: 2407:    template<typename... _Args>
        -: 2408:      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2409:			     _Compare, _Alloc>::iterator, bool>
        -: 2410:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2411:      _M_emplace_unique(_Args&&... __args)
        -: 2412:      {
        -: 2413:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2414:
        -: 2415:	__try
        -: 2416:	  {
        -: 2417:	    typedef pair<iterator, bool> _Res;
        -: 2418:	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
        -: 2419:	    if (__res.second)
        -: 2420:	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
        -: 2421:	
        -: 2422:	    _M_drop_node(__z);
        -: 2423:	    return _Res(iterator(__res.first), false);
        -: 2424:	  }
        -: 2425:	__catch(...)
        -: 2426:	  {
        -: 2427:	    _M_drop_node(__z);
        -: 2428:	    __throw_exception_again;
        -: 2429:	  }
        -: 2430:      }
        -: 2431:
        -: 2432:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2433:	   typename _Compare, typename _Alloc>
        -: 2434:    template<typename... _Args>
        -: 2435:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2436:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2437:      _M_emplace_equal(_Args&&... __args)
        -: 2438:      {
        -: 2439:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2440:
        -: 2441:	__try
        -: 2442:	  {
        -: 2443:	    auto __res = _M_get_insert_equal_pos(_S_key(__z));
        -: 2444:	    return _M_insert_node(__res.first, __res.second, __z);
        -: 2445:	  }
        -: 2446:	__catch(...)
        -: 2447:	  {
        -: 2448:	    _M_drop_node(__z);
        -: 2449:	    __throw_exception_again;
        -: 2450:	  }
        -: 2451:      }
        -: 2452:
        -: 2453:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2454:	   typename _Compare, typename _Alloc>
        -: 2455:    template<typename... _Args>
        -: 2456:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      304: 2457:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2458:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2459:      {
      304: 2460:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2461:
        -: 2462:	__try
        -: 2463:	  {
      304: 2464:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
        -: 2465:
      304: 2466:	    if (__res.second)
      304: 2467:	      return _M_insert_node(__res.first, __res.second, __z);
        -: 2468:
    #####: 2469:	    _M_drop_node(__z);
    #####: 2470:	    return iterator(__res.first);
        -: 2471:	  }
    =====: 2472:	__catch(...)
        -: 2473:	  {
    =====: 2474:	    _M_drop_node(__z);
    =====: 2475:	    __throw_exception_again;
        -: 2476:	  }
        -: 2477:      }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EDpOT_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS7_EESK_IJEEEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EDpOT_ called 104 returned 100% blocks executed 57%
      104: 2457:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2458:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2459:      {
      104: 2460:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
      104: 2460-block  0
call    0 returned 104
call    1 returned 104
call    2 returned 104
call    3 returned 104
        -: 2461:
        -: 2462:	__try
        -: 2463:	  {
      104: 2464:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
call    0 returned 104
branch  1 taken 104 (fallthrough)
branch  2 taken 0 (throw)
      104: 2464-block  0
call    3 returned 104
branch  4 taken 104 (fallthrough)
branch  5 taken 0 (throw)
        -: 2465:
      104: 2466:	    if (__res.second)
      104: 2466-block  0
branch  0 taken 104 (fallthrough)
branch  1 taken 0
      104: 2467:	      return _M_insert_node(__res.first, __res.second, __z);
      104: 2467-block  0
call    0 returned 104
branch  1 taken 104 (fallthrough)
branch  2 taken 0 (throw)
        -: 2468:
    #####: 2469:	    _M_drop_node(__z);
    %%%%%: 2469-block  0
call    0 never executed
    #####: 2470:	    return iterator(__res.first);
call    0 never executed
        -: 2471:	  }
    =====: 2472:	__catch(...)
    $$$$$: 2472-block  0
call    0 never executed
    $$$$$: 2472-block  1
call    1 never executed
        -: 2473:	  {
    =====: 2474:	    _M_drop_node(__z);
call    0 never executed
    =====: 2475:	    __throw_exception_again;
call    0 never executed
        -: 2476:	  }
        -: 2477:      }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_ called 200 returned 100% blocks executed 57%
      200: 2457:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2458:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2459:      {
      200: 2460:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
      200: 2460-block  0
call    0 returned 200
call    1 returned 200
call    2 returned 200
call    3 returned 200
        -: 2461:
        -: 2462:	__try
        -: 2463:	  {
      200: 2464:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200: 2464-block  0
call    3 returned 200
branch  4 taken 200 (fallthrough)
branch  5 taken 0 (throw)
        -: 2465:
      200: 2466:	    if (__res.second)
      200: 2466-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 0
      200: 2467:	      return _M_insert_node(__res.first, __res.second, __z);
      200: 2467-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -: 2468:
    #####: 2469:	    _M_drop_node(__z);
    %%%%%: 2469-block  0
call    0 never executed
    #####: 2470:	    return iterator(__res.first);
call    0 never executed
        -: 2471:	  }
    =====: 2472:	__catch(...)
    $$$$$: 2472-block  0
call    0 never executed
    $$$$$: 2472-block  1
call    1 never executed
        -: 2473:	  {
    =====: 2474:	    _M_drop_node(__z);
call    0 never executed
    =====: 2475:	    __throw_exception_again;
call    0 never executed
        -: 2476:	  }
        -: 2477:      }
------------------
        -: 2478:
        -: 2479:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2480:	   typename _Compare, typename _Alloc>
        -: 2481:    template<typename... _Args>
        -: 2482:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2483:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2484:      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
        -: 2485:      {
        -: 2486:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2487:
        -: 2488:	__try
        -: 2489:	  {
        -: 2490:	    auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));
        -: 2491:
        -: 2492:	    if (__res.second)
        -: 2493:	      return _M_insert_node(__res.first, __res.second, __z);
        -: 2494:
        -: 2495:	    return _M_insert_equal_lower_node(__z);
        -: 2496:	  }
        -: 2497:	__catch(...)
        -: 2498:	  {
        -: 2499:	    _M_drop_node(__z);
        -: 2500:	    __throw_exception_again;
        -: 2501:	  }
        -: 2502:      }
        -: 2503:#endif
        -: 2504:
        -: 2505:
        -: 2506:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2507:	   typename _Compare, typename _Alloc>
        -: 2508:    void
       12: 2509:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2510:    _M_erase_aux(const_iterator __position)
        -: 2511:    {
        -: 2512:      _Link_type __y =
        -: 2513:	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
       12: 2514:				(const_cast<_Base_ptr>(__position._M_node),
       12: 2515:				 this->_M_impl._M_header));
       12: 2516:      _M_drop_node(__y);
       12: 2517:      --_M_impl._M_node_count;
       12: 2518:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_erase_auxESt23_Rb_tree_const_iteratorISB_E:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_erase_auxESt23_Rb_tree_const_iteratorISB_E called 6 returned 100% blocks executed 100%
        6: 2509:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2510:    _M_erase_aux(const_iterator __position)
        -: 2511:    {
        -: 2512:      _Link_type __y =
        -: 2513:	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
        6: 2514:				(const_cast<_Base_ptr>(__position._M_node),
        6: 2515:				 this->_M_impl._M_header));
        6: 2515-block  0
call    0 returned 6
        6: 2516:      _M_drop_node(__y);
call    0 returned 6
        6: 2517:      --_M_impl._M_node_count;
        6: 2518:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS9_E:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS9_E called 6 returned 100% blocks executed 100%
        6: 2509:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2510:    _M_erase_aux(const_iterator __position)
        -: 2511:    {
        -: 2512:      _Link_type __y =
        -: 2513:	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
        6: 2514:				(const_cast<_Base_ptr>(__position._M_node),
        6: 2515:				 this->_M_impl._M_header));
        6: 2515-block  0
call    0 returned 6
        6: 2516:      _M_drop_node(__y);
call    0 returned 6
        6: 2517:      --_M_impl._M_node_count;
        6: 2518:    }
------------------
        -: 2519:
        -: 2520:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2521:	   typename _Compare, typename _Alloc>
        -: 2522:    void
       13: 2523:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2524:    _M_erase_aux(const_iterator __first, const_iterator __last)
        -: 2525:    {
      13*: 2526:      if (__first == begin() && __last == end())
       1*: 2527:	clear();
        -: 2528:      else
       24: 2529:	while (__first != __last)
       12: 2530:	  _M_erase_aux(__first++);
       13: 2531:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_erase_auxESt23_Rb_tree_const_iteratorISB_ESJ_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_erase_auxESt23_Rb_tree_const_iteratorISB_ESJ_ called 6 returned 100% blocks executed 89%
        6: 2523:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2524:    _M_erase_aux(const_iterator __first, const_iterator __last)
        -: 2525:    {
       6*: 2526:      if (__first == begin() && __last == end())
        6: 2526-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 2 (fallthrough)
branch  4 taken 4
        2: 2526-block  1
call    5 returned 2
call    6 returned 2
call    7 returned 2
branch  8 taken 0 (fallthrough)
branch  9 taken 2
    %%%%%: 2526-block  2
        6: 2526-block  3
        6: 2526-block  4
branch 10 taken 0 (fallthrough)
branch 11 taken 6
    #####: 2527:	clear();
    %%%%%: 2527-block  0
call    0 never executed
        -: 2528:      else
       12: 2529:	while (__first != __last)
       12: 2529-block  0
call    0 returned 12
branch  1 taken 6 (fallthrough)
branch  2 taken 6
        6: 2530:	  _M_erase_aux(__first++);
        6: 2530-block  0
call    0 returned 6
call    1 returned 6
        6: 2531:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS9_ESH_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS9_ESH_ called 7 returned 100% blocks executed 100%
        7: 2523:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2524:    _M_erase_aux(const_iterator __first, const_iterator __last)
        -: 2525:    {
        7: 2526:      if (__first == begin() && __last == end())
        7: 2526-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 5 (fallthrough)
branch  4 taken 2
        5: 2526-block  1
call    5 returned 5
call    6 returned 5
call    7 returned 5
branch  8 taken 1 (fallthrough)
branch  9 taken 4
        1: 2526-block  2
        6: 2526-block  3
        7: 2526-block  4
branch 10 taken 1 (fallthrough)
branch 11 taken 6
        1: 2527:	clear();
        1: 2527-block  0
call    0 returned 1
        -: 2528:      else
       12: 2529:	while (__first != __last)
       12: 2529-block  0
call    0 returned 12
branch  1 taken 6 (fallthrough)
branch  2 taken 6
        6: 2530:	  _M_erase_aux(__first++);
        6: 2530-block  0
call    0 returned 6
call    1 returned 6
        7: 2531:    }
------------------
        -: 2532:
        -: 2533:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2534:	   typename _Compare, typename _Alloc>
        -: 2535:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
       13: 2536:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2537:    erase(const _Key& __x)
        -: 2538:    {
       13: 2539:      pair<iterator, iterator> __p = equal_range(__x);
       13: 2540:      const size_type __old_size = size();
       13: 2541:      _M_erase_aux(__p.first, __p.second);
       13: 2542:      return __old_size - size();
        -: 2543:    }
------------------
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5eraseERS7_:
function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St6vectorIS5_SaIS5_EEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE5eraseERS7_ called 6 returned 100% blocks executed 82%
        6: 2536:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2537:    erase(const _Key& __x)
        -: 2538:    {
        6: 2539:      pair<iterator, iterator> __p = equal_range(__x);
        6: 2539-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 2540:      const size_type __old_size = size();
        6: 2540-block  0
call    0 returned 6
        6: 2541:      _M_erase_aux(__p.first, __p.second);
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 2541-block  0
    $$$$$: 2541-block  1
        6: 2542:      return __old_size - size();
        6: 2542-block  0
call    0 returned 6
        6: 2542-block  1
        -: 2543:    }
------------------
_ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5eraseERS8_:
function _ZNSt8_Rb_treeISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES0_IKS7_iESt10_Select1stIS9_ESt4lessIS7_ESaIS9_EE5eraseERS8_ called 7 returned 100% blocks executed 82%
        7: 2536:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2537:    erase(const _Key& __x)
        -: 2538:    {
        7: 2539:      pair<iterator, iterator> __p = equal_range(__x);
        7: 2539-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2540:      const size_type __old_size = size();
        7: 2540-block  0
call    0 returned 7
        7: 2541:      _M_erase_aux(__p.first, __p.second);
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 2541-block  0
    $$$$$: 2541-block  1
        7: 2542:      return __old_size - size();
        7: 2542-block  0
call    0 returned 7
        7: 2542-block  1
        -: 2543:    }
------------------
        -: 2544:
        -: 2545:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2546:	   typename _Compare, typename _Alloc>
        -: 2547:    void
        -: 2548:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2549:    erase(const _Key* __first, const _Key* __last)
        -: 2550:    {
        -: 2551:      while (__first != __last)
        -: 2552:	erase(*__first++);
        -: 2553:    }
        -: 2554:
        -: 2555:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2556:	   typename _Compare, typename _Alloc>
        -: 2557:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2558:		      _Compare, _Alloc>::iterator
        -: 2559:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2560:    find(const _Key& __k)
        -: 2561:    {
        -: 2562:      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
        -: 2563:      return (__j == end()
        -: 2564:	      || _M_impl._M_key_compare(__k,
        -: 2565:					_S_key(__j._M_node))) ? end() : __j;
        -: 2566:    }
        -: 2567:
        -: 2568:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2569:	   typename _Compare, typename _Alloc>
        -: 2570:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2571:		      _Compare, _Alloc>::const_iterator
      546: 2572:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2573:    find(const _Key& __k) const
        -: 2574:    {
      546: 2575:      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
     1092: 2576:      return (__j == end()
      459: 2577:	      || _M_impl._M_key_compare(__k,
     1551: 2578:					_S_key(__j._M_node))) ? end() : __j;
        -: 2579:    }
        -: 2580:
        -: 2581:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2582:	   typename _Compare, typename _Alloc>
        -: 2583:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
        -: 2584:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2585:    count(const _Key& __k) const
        -: 2586:    {
        -: 2587:      pair<const_iterator, const_iterator> __p = equal_range(__k);
        -: 2588:      const size_type __n = std::distance(__p.first, __p.second);
        -: 2589:      return __n;
        -: 2590:    }
        -: 2591:
        -: 2592:  _GLIBCXX_PURE unsigned int
        -: 2593:  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
        -: 2594:		       const _Rb_tree_node_base* __root) throw ();
        -: 2595:
        -: 2596:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2597:	   typename _Compare, typename _Alloc>
        -: 2598:    bool
        -: 2599:    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
        -: 2600:    {
        -: 2601:      if (_M_impl._M_node_count == 0 || begin() == end())
        -: 2602:	return _M_impl._M_node_count == 0 && begin() == end()
        -: 2603:	       && this->_M_impl._M_header._M_left == _M_end()
        -: 2604:	       && this->_M_impl._M_header._M_right == _M_end();
        -: 2605:
        -: 2606:      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
        -: 2607:      for (const_iterator __it = begin(); __it != end(); ++__it)
        -: 2608:	{
        -: 2609:	  _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
        -: 2610:	  _Const_Link_type __L = _S_left(__x);
        -: 2611:	  _Const_Link_type __R = _S_right(__x);
        -: 2612:
        -: 2613:	  if (__x->_M_color == _S_red)
        -: 2614:	    if ((__L && __L->_M_color == _S_red)
        -: 2615:		|| (__R && __R->_M_color == _S_red))
        -: 2616:	      return false;
        -: 2617:
        -: 2618:	  if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
        -: 2619:	    return false;
        -: 2620:	  if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
        -: 2621:	    return false;
        -: 2622:
        -: 2623:	  if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
        -: 2624:	    return false;
        -: 2625:	}
        -: 2626:
        -: 2627:      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
        -: 2628:	return false;
        -: 2629:      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
        -: 2630:	return false;
        -: 2631:      return true;
        -: 2632:    }
        -: 2633:
        -: 2634:#if __cplusplus > 201402L
        -: 2635:  // Allow access to internals of compatible _Rb_tree specializations.
        -: 2636:  template<typename _Key, typename _Val, typename _Sel, typename _Cmp1,
        -: 2637:	   typename _Alloc, typename _Cmp2>
        -: 2638:    struct _Rb_tree_merge_helper<_Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>,
        -: 2639:				 _Cmp2>
        -: 2640:    {
        -: 2641:    private:
        -: 2642:      friend class _Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>;
        -: 2643:
        -: 2644:      static auto&
        -: 2645:      _S_get_impl(_Rb_tree<_Key, _Val, _Sel, _Cmp2, _Alloc>& __tree)
        -: 2646:      { return __tree._M_impl; }
        -: 2647:    };
        -: 2648:#endif // C++17
        -: 2649:
        -: 2650:_GLIBCXX_END_NAMESPACE_VERSION
        -: 2651:} // namespace
        -: 2652:
        -: 2653:#endif
