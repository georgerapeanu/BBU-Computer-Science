        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/tests/googletest/googletest/include/gtest/gtest-test-part.h
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// IWYU pragma: private, include "gtest/gtest.h"
        -:   31:// IWYU pragma: friend gtest/.*
        -:   32:// IWYU pragma: friend gmock/.*
        -:   33:
        -:   34:#ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_
        -:   35:#define GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_
        -:   36:
        -:   37:#include <iosfwd>
        -:   38:#include <vector>
        -:   39:
        -:   40:#include "gtest/internal/gtest-internal.h"
        -:   41:#include "gtest/internal/gtest-string.h"
        -:   42:
        -:   43:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:   44:/* class A needs to have dll-interface to be used by clients of class B */)
        -:   45:
        -:   46:namespace testing {
        -:   47:
        -:   48:// A copyable object representing the result of a test part (i.e. an
        -:   49:// assertion or an explicit FAIL(), ADD_FAILURE(), or SUCCESS()).
        -:   50://
        -:   51:// Don't inherit from TestPartResult as its destructor is not virtual.
        -:   52:class GTEST_API_ TestPartResult {
        -:   53: public:
        -:   54:  // The possible outcomes of a test part (i.e. an assertion or an
        -:   55:  // explicit SUCCEED(), FAIL(), or ADD_FAILURE()).
        -:   56:  enum Type {
        -:   57:    kSuccess,          // Succeeded.
        -:   58:    kNonFatalFailure,  // Failed but the test can continue.
        -:   59:    kFatalFailure,     // Failed and the test should be terminated.
        -:   60:    kSkip              // Skipped.
        -:   61:  };
        -:   62:
        -:   63:  // C'tor.  TestPartResult does NOT have a default constructor.
        -:   64:  // Always use this constructor (with parameters) to create a
        -:   65:  // TestPartResult object.
function _ZN7testing14TestPartResultC2ENS0_4TypeEPKciS3_ called 0 returned 0% blocks executed 0%
    #####:   66:  TestPartResult(Type a_type, const char* a_file_name, int a_line_number,
        -:   67:                 const char* a_message)
    #####:   68:      : type_(a_type),
        -:   69:        file_name_(a_file_name == nullptr ? "" : a_file_name),
        -:   70:        line_number_(a_line_number),
        -:   71:        summary_(ExtractSummary(a_message)),
    #####:   72:        message_(a_message) {}
    %%%%%:   72-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   72-block  1
    %%%%%:   72-block  2
    %%%%%:   72-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   72-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   72-block  5
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   72-block  6
call   14 never executed
    $$$$$:   72-block  7
call   15 never executed
    $$$$$:   72-block  8
call   16 never executed
    $$$$$:   72-block  9
call   17 never executed
    $$$$$:   72-block 10
    $$$$$:   72-block 11
call   18 never executed
    $$$$$:   72-block 12
call   19 never executed
        -:   73:
        -:   74:  // Gets the outcome of the test part.
function _ZNK7testing14TestPartResult4typeEv called 0 returned 0% blocks executed 0%
    #####:   75:  Type type() const { return type_; }
    %%%%%:   75-block  0
        -:   76:
        -:   77:  // Gets the name of the source file where the test part took place, or
        -:   78:  // NULL if it's unknown.
function _ZNK7testing14TestPartResult9file_nameEv called 0 returned 0% blocks executed 0%
    #####:   79:  const char* file_name() const {
    #####:   80:    return file_name_.empty() ? nullptr : file_name_.c_str();
    %%%%%:   80-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   80-block  1
    %%%%%:   80-block  2
call    3 never executed
    %%%%%:   80-block  3
        -:   81:  }
        -:   82:
        -:   83:  // Gets the line in the source file where the test part took place,
        -:   84:  // or -1 if it's unknown.
function _ZNK7testing14TestPartResult11line_numberEv called 0 returned 0% blocks executed 0%
    #####:   85:  int line_number() const { return line_number_; }
    %%%%%:   85-block  0
        -:   86:
        -:   87:  // Gets the summary of the failure message.
function _ZNK7testing14TestPartResult7summaryEv called 0 returned 0% blocks executed 0%
    #####:   88:  const char* summary() const { return summary_.c_str(); }
    %%%%%:   88-block  0
call    0 never executed
        -:   89:
        -:   90:  // Gets the message associated with the test part.
function _ZNK7testing14TestPartResult7messageEv called 0 returned 0% blocks executed 0%
    #####:   91:  const char* message() const { return message_.c_str(); }
    %%%%%:   91-block  0
call    0 never executed
        -:   92:
        -:   93:  // Returns true if and only if the test part was skipped.
function _ZNK7testing14TestPartResult7skippedEv called 0 returned 0% blocks executed 0%
    #####:   94:  bool skipped() const { return type_ == kSkip; }
    %%%%%:   94-block  0
        -:   95:
        -:   96:  // Returns true if and only if the test part passed.
        -:   97:  bool passed() const { return type_ == kSuccess; }
        -:   98:
        -:   99:  // Returns true if and only if the test part non-fatally failed.
function _ZNK7testing14TestPartResult17nonfatally_failedEv called 0 returned 0% blocks executed 0%
    #####:  100:  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }
    %%%%%:  100-block  0
        -:  101:
        -:  102:  // Returns true if and only if the test part fatally failed.
function _ZNK7testing14TestPartResult14fatally_failedEv called 0 returned 0% blocks executed 0%
    #####:  103:  bool fatally_failed() const { return type_ == kFatalFailure; }
    %%%%%:  103-block  0
        -:  104:
        -:  105:  // Returns true if and only if the test part failed.
function _ZNK7testing14TestPartResult6failedEv called 0 returned 0% blocks executed 0%
    #####:  106:  bool failed() const { return fatally_failed() || nonfatally_failed(); }
    %%%%%:  106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  106-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  106-block  2
    %%%%%:  106-block  3
    %%%%%:  106-block  4
        -:  107:
        -:  108: private:
        -:  109:  Type type_;
        -:  110:
        -:  111:  // Gets the summary of the failure message by omitting the stack
        -:  112:  // trace in it.
        -:  113:  static std::string ExtractSummary(const char* message);
        -:  114:
        -:  115:  // The name of the source file where the test part took place, or
        -:  116:  // "" if the source file is unknown.
        -:  117:  std::string file_name_;
        -:  118:  // The line in the source file where the test part took place, or -1
        -:  119:  // if the line number is unknown.
        -:  120:  int line_number_;
        -:  121:  std::string summary_;  // The test failure summary.
        -:  122:  std::string message_;  // The test failure message.
        -:  123:};
        -:  124:
        -:  125:// Prints a TestPartResult object.
        -:  126:std::ostream& operator<<(std::ostream& os, const TestPartResult& result);
        -:  127:
        -:  128:// An array of TestPartResult objects.
        -:  129://
        -:  130:// Don't inherit from TestPartResultArray as its destructor is not
        -:  131:// virtual.
        -:  132:class GTEST_API_ TestPartResultArray {
        -:  133: public:
        -:  134:  TestPartResultArray() {}
        -:  135:
        -:  136:  // Appends the given TestPartResult to the array.
        -:  137:  void Append(const TestPartResult& result);
        -:  138:
        -:  139:  // Returns the TestPartResult at the given index (0-based).
        -:  140:  const TestPartResult& GetTestPartResult(int index) const;
        -:  141:
        -:  142:  // Returns the number of TestPartResult objects in the array.
        -:  143:  int size() const;
        -:  144:
        -:  145: private:
        -:  146:  std::vector<TestPartResult> array_;
        -:  147:
        -:  148:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestPartResultArray);
        -:  149:};
        -:  150:
        -:  151:// This interface knows how to report a test part result.
        -:  152:class GTEST_API_ TestPartResultReporterInterface {
        -:  153: public:
       2*:  154:  virtual ~TestPartResultReporterInterface() {}
------------------
_ZN7testing31TestPartResultReporterInterfaceD0Ev:
function _ZN7testing31TestPartResultReporterInterfaceD0Ev called 0 returned 0% blocks executed 0%
    #####:  154:  virtual ~TestPartResultReporterInterface() {}
    %%%%%:  154-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing31TestPartResultReporterInterfaceD2Ev:
function _ZN7testing31TestPartResultReporterInterfaceD2Ev called 2 returned 100% blocks executed 100%
        2:  154:  virtual ~TestPartResultReporterInterface() {}
------------------
        -:  155:
        -:  156:  virtual void ReportTestPartResult(const TestPartResult& result) = 0;
        -:  157:};
        -:  158:
        -:  159:namespace internal {
        -:  160:
        -:  161:// This helper class is used by {ASSERT|EXPECT}_NO_FATAL_FAILURE to check if a
        -:  162:// statement generates new fatal failures. To do so it registers itself as the
        -:  163:// current test part result reporter. Besides checking if fatal failures were
        -:  164:// reported, it only delegates the reporting to the former result reporter.
        -:  165:// The original result reporter is restored in the destructor.
        -:  166:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:  167:class GTEST_API_ HasNewFatalFailureHelper
        -:  168:    : public TestPartResultReporterInterface {
        -:  169: public:
        -:  170:  HasNewFatalFailureHelper();
        -:  171:  ~HasNewFatalFailureHelper() override;
        -:  172:  void ReportTestPartResult(const TestPartResult& result) override;
        -:  173:  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }
        -:  174:
        -:  175: private:
        -:  176:  bool has_new_fatal_failure_;
        -:  177:  TestPartResultReporterInterface* original_reporter_;
        -:  178:
        -:  179:  GTEST_DISALLOW_COPY_AND_ASSIGN_(HasNewFatalFailureHelper);
        -:  180:};
        -:  181:
        -:  182:}  // namespace internal
        -:  183:
        -:  184:}  // namespace testing
        -:  185:
        -:  186:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -:  187:
        -:  188:#endif  // GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_
