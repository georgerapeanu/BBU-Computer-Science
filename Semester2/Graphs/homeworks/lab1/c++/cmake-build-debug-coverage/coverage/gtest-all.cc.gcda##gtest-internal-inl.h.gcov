        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/tests/googletest/googletest/src/gtest-internal-inl.h
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// Utility functions and classes used by the Google C++ testing framework.//
        -:   31:// This file contains purely Google Test's internal implementation.  Please
        -:   32:// DO NOT #INCLUDE IT IN A USER PROGRAM.
        -:   33:
        -:   34:#ifndef GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_
        -:   35:#define GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_
        -:   36:
        -:   37:#ifndef _WIN32_WCE
        -:   38:#include <errno.h>
        -:   39:#endif  // !_WIN32_WCE
        -:   40:#include <stddef.h>
        -:   41:#include <stdlib.h>  // For strtoll/_strtoul64/malloc/free.
        -:   42:#include <string.h>  // For memmove.
        -:   43:
        -:   44:#include <algorithm>
        -:   45:#include <cstdint>
        -:   46:#include <memory>
        -:   47:#include <string>
        -:   48:#include <vector>
        -:   49:
        -:   50:#include "gtest/internal/gtest-port.h"
        -:   51:
        -:   52:#if GTEST_CAN_STREAM_RESULTS_
        -:   53:#include <arpa/inet.h>  // NOLINT
        -:   54:#include <netdb.h>      // NOLINT
        -:   55:#endif
        -:   56:
        -:   57:#if GTEST_OS_WINDOWS
        -:   58:#include <windows.h>  // NOLINT
        -:   59:#endif                // GTEST_OS_WINDOWS
        -:   60:
        -:   61:#include "gtest/gtest-spi.h"
        -:   62:#include "gtest/gtest.h"
        -:   63:
        -:   64:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:   65:/* class A needs to have dll-interface to be used by clients of class B */)
        -:   66:
        -:   67:// Declares the flags.
        -:   68://
        -:   69:// We don't want the users to modify this flag in the code, but want
        -:   70:// Google Test's own unit tests to be able to access it. Therefore we
        -:   71:// declare it here as opposed to in gtest.h.
        -:   72:GTEST_DECLARE_bool_(death_test_use_fork);
        -:   73:
        -:   74:namespace testing {
        -:   75:namespace internal {
        -:   76:
        -:   77:// The value of GetTestTypeId() as seen from within the Google Test
        -:   78:// library.  This is solely for testing GetTestTypeId().
        -:   79:GTEST_API_ extern const TypeId kTestTypeIdInGoogleTest;
        -:   80:
        -:   81:// A valid random seed must be in [1, kMaxRandomSeed].
        -:   82:const int kMaxRandomSeed = 99999;
        -:   83:
        -:   84:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:   85:// is specified on the command line.
        -:   86:GTEST_API_ extern bool g_help_flag;
        -:   87:
        -:   88:// Returns the current time in milliseconds.
        -:   89:GTEST_API_ TimeInMillis GetTimeInMillis();
        -:   90:
        -:   91:// Returns true if and only if Google Test should use colors in the output.
        -:   92:GTEST_API_ bool ShouldUseColor(bool stdout_is_tty);
        -:   93:
        -:   94:// Formats the given time in milliseconds as seconds.
        -:   95:GTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);
        -:   96:
        -:   97:// Converts the given time in milliseconds to a date string in the ISO 8601
        -:   98:// format, without the timezone information.  N.B.: due to the use the
        -:   99:// non-reentrant localtime() function, this function is not thread safe.  Do
        -:  100:// not use it in any code that can be called from multiple threads.
        -:  101:GTEST_API_ std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms);
        -:  102:
        -:  103:// Parses a string for an Int32 flag, in the form of "--flag=value".
        -:  104://
        -:  105:// On success, stores the value of the flag in *value, and returns
        -:  106:// true.  On failure, returns false without changing *value.
        -:  107:GTEST_API_ bool ParseFlag(const char* str, const char* flag, int32_t* value);
        -:  108:
        -:  109:// Returns a random seed in range [1, kMaxRandomSeed] based on the
        -:  110:// given --gtest_random_seed flag value.
function _ZN7testing8internal21GetRandomSeedFromFlagEi called 1 returned 100% blocks executed 83%
        1:  111:inline int GetRandomSeedFromFlag(int32_t random_seed_flag) {
        -:  112:  const unsigned int raw_seed =
       1*:  113:      (random_seed_flag == 0) ? static_cast<unsigned int>(GetTimeInMillis())
        1:  113-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  113-block  1
call    2 returned 1
    %%%%%:  113-block  2
        1:  114:                              : static_cast<unsigned int>(random_seed_flag);
        -:  115:
        -:  116:  // Normalizes the actual seed to range [1, kMaxRandomSeed] such that
        -:  117:  // it's easy to type.
        1:  118:  const int normalized_seed =
        1:  119:      static_cast<int>((raw_seed - 1U) %
        -:  120:                       static_cast<unsigned int>(kMaxRandomSeed)) +
        -:  121:      1;
        1:  122:  return normalized_seed;
        1:  122-block  0
        -:  123:}
        -:  124:
        -:  125:// Returns the first valid random seed after 'seed'.  The behavior is
        -:  126:// undefined if 'seed' is invalid.  The seed after kMaxRandomSeed is
        -:  127:// considered to be 1.
function _ZN7testing8internal17GetNextRandomSeedEi called 0 returned 0% blocks executed 0%
    #####:  128:inline int GetNextRandomSeed(int seed) {
    #####:  129:  GTEST_CHECK_(1 <= seed && seed <= kMaxRandomSeed)
    %%%%%:  129-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  129-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  129-block  2
    %%%%%:  129-block  3
    %%%%%:  129-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  129-block  5
call    7 never executed
call    8 never executed
    %%%%%:  129-block  6
call    9 never executed
    $$$$$:  129-block  7
call   10 never executed
    #####:  130:      << "Invalid random seed " << seed << " - must be in [1, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  130-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  130-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  130-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  131:      << kMaxRandomSeed << "].";
    %%%%%:  131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  132:  const int next_seed = seed + 1;
    #####:  133:  return (next_seed > kMaxRandomSeed) ? 1 : next_seed;
    %%%%%:  133-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  133-block  1
    %%%%%:  133-block  2
    %%%%%:  133-block  3
    %%%%%:  133-block  4
        -:  134:}
        -:  135:
        -:  136:// This class saves the values of all Google Test flags in its c'tor, and
        -:  137:// restores them in its d'tor.
        -:  138:class GTestFlagSaver {
        -:  139: public:
        -:  140:  // The c'tor.
function _ZN7testing8internal14GTestFlagSaverC2Ev called 18 returned 100% blocks executed 56%
       18:  141:  GTestFlagSaver() {
       18:  141-block  0
call    0 returned 18
call    1 returned 18
call    2 returned 18
call    3 returned 18
call    4 returned 18
call    5 returned 18
    $$$$$:  141-block  1
call    6 never executed
    $$$$$:  141-block  2
call    7 never executed
    $$$$$:  141-block  3
call    8 never executed
    $$$$$:  141-block  4
call    9 never executed
    $$$$$:  141-block  5
call   10 never executed
    $$$$$:  141-block  6
call   11 never executed
       18:  142:    also_run_disabled_tests_ = GTEST_FLAG_GET(also_run_disabled_tests);
       18:  143:    break_on_failure_ = GTEST_FLAG_GET(break_on_failure);
       18:  144:    catch_exceptions_ = GTEST_FLAG_GET(catch_exceptions);
       18:  145:    color_ = GTEST_FLAG_GET(color);
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  146:    death_test_style_ = GTEST_FLAG_GET(death_test_style);
       18:  146-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  147:    death_test_use_fork_ = GTEST_FLAG_GET(death_test_use_fork);
       18:  148:    fail_fast_ = GTEST_FLAG_GET(fail_fast);
       18:  149:    filter_ = GTEST_FLAG_GET(filter);
       18:  149-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  150:    internal_run_death_test_ = GTEST_FLAG_GET(internal_run_death_test);
       18:  150-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  151:    list_tests_ = GTEST_FLAG_GET(list_tests);
       18:  152:    output_ = GTEST_FLAG_GET(output);
       18:  152-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  153:    brief_ = GTEST_FLAG_GET(brief);
       18:  154:    print_time_ = GTEST_FLAG_GET(print_time);
       18:  155:    print_utf8_ = GTEST_FLAG_GET(print_utf8);
       18:  156:    random_seed_ = GTEST_FLAG_GET(random_seed);
       18:  157:    repeat_ = GTEST_FLAG_GET(repeat);
       18:  158:    recreate_environments_when_repeating_ =
        -:  159:        GTEST_FLAG_GET(recreate_environments_when_repeating);
       18:  160:    shuffle_ = GTEST_FLAG_GET(shuffle);
       18:  161:    stack_trace_depth_ = GTEST_FLAG_GET(stack_trace_depth);
       18:  162:    stream_result_to_ = GTEST_FLAG_GET(stream_result_to);
       18:  162-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  163:    throw_on_failure_ = GTEST_FLAG_GET(throw_on_failure);
       18:  164:  }
       18:  164-block  0
        -:  165:
        -:  166:  // The d'tor is not virtual.  DO NOT INHERIT FROM THIS CLASS.
function _ZN7testing8internal14GTestFlagSaverD2Ev called 18 returned 100% blocks executed 100%
       18:  167:  ~GTestFlagSaver() {
call    0 returned 18
call    1 returned 18
call    2 returned 18
call    3 returned 18
call    4 returned 18
       18:  168:    GTEST_FLAG_SET(also_run_disabled_tests, also_run_disabled_tests_);
       18:  169:    GTEST_FLAG_SET(break_on_failure, break_on_failure_);
       18:  170:    GTEST_FLAG_SET(catch_exceptions, catch_exceptions_);
       18:  171:    GTEST_FLAG_SET(color, color_);
       18:  171-block  0
call    0 returned 18
       18:  172:    GTEST_FLAG_SET(death_test_style, death_test_style_);
call    0 returned 18
       18:  173:    GTEST_FLAG_SET(death_test_use_fork, death_test_use_fork_);
       18:  174:    GTEST_FLAG_SET(filter, filter_);
call    0 returned 18
       18:  175:    GTEST_FLAG_SET(fail_fast, fail_fast_);
       18:  176:    GTEST_FLAG_SET(internal_run_death_test, internal_run_death_test_);
call    0 returned 18
       18:  177:    GTEST_FLAG_SET(list_tests, list_tests_);
       18:  178:    GTEST_FLAG_SET(output, output_);
call    0 returned 18
       18:  179:    GTEST_FLAG_SET(brief, brief_);
       18:  180:    GTEST_FLAG_SET(print_time, print_time_);
       18:  181:    GTEST_FLAG_SET(print_utf8, print_utf8_);
       18:  182:    GTEST_FLAG_SET(random_seed, random_seed_);
       18:  183:    GTEST_FLAG_SET(repeat, repeat_);
       18:  184:    GTEST_FLAG_SET(recreate_environments_when_repeating,
        -:  185:                   recreate_environments_when_repeating_);
       18:  186:    GTEST_FLAG_SET(shuffle, shuffle_);
       18:  187:    GTEST_FLAG_SET(stack_trace_depth, stack_trace_depth_);
       18:  188:    GTEST_FLAG_SET(stream_result_to, stream_result_to_);
call    0 returned 18
       18:  189:    GTEST_FLAG_SET(throw_on_failure, throw_on_failure_);
call    0 returned 18
       18:  190:  }
        -:  191:
        -:  192: private:
        -:  193:  // Fields for saving the original values of flags.
        -:  194:  bool also_run_disabled_tests_;
        -:  195:  bool break_on_failure_;
        -:  196:  bool catch_exceptions_;
        -:  197:  std::string color_;
        -:  198:  std::string death_test_style_;
        -:  199:  bool death_test_use_fork_;
        -:  200:  bool fail_fast_;
        -:  201:  std::string filter_;
        -:  202:  std::string internal_run_death_test_;
        -:  203:  bool list_tests_;
        -:  204:  std::string output_;
        -:  205:  bool brief_;
        -:  206:  bool print_time_;
        -:  207:  bool print_utf8_;
        -:  208:  int32_t random_seed_;
        -:  209:  int32_t repeat_;
        -:  210:  bool recreate_environments_when_repeating_;
        -:  211:  bool shuffle_;
        -:  212:  int32_t stack_trace_depth_;
        -:  213:  std::string stream_result_to_;
        -:  214:  bool throw_on_failure_;
        -:  215:} GTEST_ATTRIBUTE_UNUSED_;
        -:  216:
        -:  217:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -:  218:// code_point parameter is of type UInt32 because wchar_t may not be
        -:  219:// wide enough to contain a code point.
        -:  220:// If the code_point is not a valid Unicode code point
        -:  221:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -:  222:// to "(Invalid Unicode 0xXXXXXXXX)".
        -:  223:GTEST_API_ std::string CodePointToUtf8(uint32_t code_point);
        -:  224:
        -:  225:// Converts a wide string to a narrow string in UTF-8 encoding.
        -:  226:// The wide string is assumed to have the following encoding:
        -:  227://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -:  228://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -:  229:// Parameter str points to a null-terminated wide string.
        -:  230:// Parameter num_chars may additionally limit the number
        -:  231:// of wchar_t characters processed. -1 is used when the entire string
        -:  232:// should be processed.
        -:  233:// If the string contains code points that are not valid Unicode code points
        -:  234:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -:  235:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -:  236:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -:  237:// will be encoded as individual Unicode characters from Basic Normal Plane.
        -:  238:GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);
        -:  239:
        -:  240:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -:  241:// if the variable is present. If a file already exists at this location, this
        -:  242:// function will write over it. If the variable is present, but the file cannot
        -:  243:// be created, prints an error and exits.
        -:  244:void WriteToShardStatusFileIfNeeded();
        -:  245:
        -:  246:// Checks whether sharding is enabled by examining the relevant
        -:  247:// environment variable values. If the variables are present,
        -:  248:// but inconsistent (e.g., shard_index >= total_shards), prints
        -:  249:// an error and exits. If in_subprocess_for_death_test, sharding is
        -:  250:// disabled because it must only be applied to the original test
        -:  251:// process. Otherwise, we could filter out death tests we intended to execute.
        -:  252:GTEST_API_ bool ShouldShard(const char* total_shards_str,
        -:  253:                            const char* shard_index_str,
        -:  254:                            bool in_subprocess_for_death_test);
        -:  255:
        -:  256:// Parses the environment variable var as a 32-bit integer. If it is unset,
        -:  257:// returns default_val. If it is not a 32-bit integer, prints an error and
        -:  258:// and aborts.
        -:  259:GTEST_API_ int32_t Int32FromEnvOrDie(const char* env_var, int32_t default_val);
        -:  260:
        -:  261:// Given the total number of shards, the shard index, and the test id,
        -:  262:// returns true if and only if the test should be run on this shard. The test id
        -:  263:// is some arbitrary but unique non-negative integer assigned to each test
        -:  264:// method. Assumes that 0 <= shard_index < total_shards.
        -:  265:GTEST_API_ bool ShouldRunTestOnShard(int total_shards, int shard_index,
        -:  266:                                     int test_id);
        -:  267:
        -:  268:// STL container utilities.
        -:  269:
        -:  270:// Returns the number of elements in the given container that satisfy
        -:  271:// the given predicate.
        -:  272:template <class Container, typename Predicate>
      141:  273:inline int CountIf(const Container& c, Predicate predicate) {
        -:  274:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  275:  // Solaris has a non-standard signature.
      141:  276:  int count = 0;
     307*:  277:  for (auto it = c.begin(); it != c.end(); ++it) {
     166*:  278:    if (predicate(*it)) ++count;
        -:  279:  }
      141:  280:  return count;
        -:  281:}
------------------
_ZN7testing8internal7CountIfISt6vectorIPNS_8TestInfoESaIS4_EEPFbPKS3_EEEiRKT_T0_:
function _ZN7testing8internal7CountIfISt6vectorIPNS_8TestInfoESaIS4_EEPFbPKS3_EEEiRKT_T0_ called 9 returned 100% blocks executed 100%
        9:  273:inline int CountIf(const Container& c, Predicate predicate) {
        -:  274:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  275:  // Solaris has a non-standard signature.
        9:  276:  int count = 0;
      171:  277:  for (auto it = c.begin(); it != c.end(); ++it) {
        9:  277-block  0
call    0 returned 9
      171:  277-block  1
call    1 returned 171
call    2 returned 171
branch  3 taken 162 (fallthrough)
branch  4 taken 9
      162:  277-block  2
call    5 returned 162
      162:  278:    if (predicate(*it)) ++count;
      162:  278-block  0
call    0 returned 162
call    1 returned 162
branch  2 taken 162 (fallthrough)
branch  3 taken 0 (throw)
      162:  278-block  1
branch  4 taken 90 (fallthrough)
branch  5 taken 72
       90:  278-block  2
        -:  279:  }
        9:  280:  return count;
        9:  280-block  0
        9:  280-block  1
        -:  281:}
------------------
_ZN7testing8internal7CountIfISt6vectorINS_14TestPartResultESaIS3_EEPFbRKS3_EEEiRKT_T0_:
function _ZN7testing8internal7CountIfISt6vectorINS_14TestPartResultESaIS3_EEPFbRKS3_EEEiRKT_T0_ called 128 returned 100% blocks executed 58%
      128:  273:inline int CountIf(const Container& c, Predicate predicate) {
        -:  274:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  275:  // Solaris has a non-standard signature.
      128:  276:  int count = 0;
     128*:  277:  for (auto it = c.begin(); it != c.end(); ++it) {
      128:  277-block  0
call    0 returned 128
      128:  277-block  1
call    1 returned 128
call    2 returned 128
branch  3 taken 0 (fallthrough)
branch  4 taken 128
    %%%%%:  277-block  2
call    5 never executed
    #####:  278:    if (predicate(*it)) ++count;
    %%%%%:  278-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  278-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:  278-block  2
        -:  279:  }
      128:  280:  return count;
      128:  280-block  0
      128:  280-block  1
        -:  281:}
------------------
_ZN7testing8internal7CountIfISt6vectorIPNS_9TestSuiteESaIS4_EEPFbPKS3_EEEiRKT_T0_:
function _ZN7testing8internal7CountIfISt6vectorIPNS_9TestSuiteESaIS4_EEPFbPKS3_EEEiRKT_T0_ called 4 returned 100% blocks executed 100%
        4:  273:inline int CountIf(const Container& c, Predicate predicate) {
        -:  274:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  275:  // Solaris has a non-standard signature.
        4:  276:  int count = 0;
        8:  277:  for (auto it = c.begin(); it != c.end(); ++it) {
        4:  277-block  0
call    0 returned 4
        8:  277-block  1
call    1 returned 8
call    2 returned 8
branch  3 taken 4 (fallthrough)
branch  4 taken 4
        4:  277-block  2
call    5 returned 4
        4:  278:    if (predicate(*it)) ++count;
        4:  278-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  278-block  1
branch  4 taken 2 (fallthrough)
branch  5 taken 2
        2:  278-block  2
        -:  279:  }
        4:  280:  return count;
        4:  280-block  0
        4:  280-block  1
        -:  281:}
------------------
        -:  282:
        -:  283:// Applies a function/functor to each element in the container.
        -:  284:template <class Container, typename Functor>
        7:  285:void ForEach(const Container& c, Functor functor) {
        7:  286:  std::for_each(c.begin(), c.end(), functor);
        7:  287:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_11EnvironmentESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_11EnvironmentESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
        2:  285:void ForEach(const Container& c, Functor functor) {
        2:  286:  std::for_each(c.begin(), c.end(), functor);
        2:  286-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  287:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_17TestEventListenerESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_17TestEventListenerESaIS4_EEPFvS4_EEEvRKT_T0_ called 1 returned 100% blocks executed 100%
        1:  285:void ForEach(const Container& c, Functor functor) {
        1:  286:  std::for_each(c.begin(), c.end(), functor);
        1:  286-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:  287:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_8TestInfoESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_8TestInfoESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
        2:  285:void ForEach(const Container& c, Functor functor) {
        2:  286:  std::for_each(c.begin(), c.end(), functor);
        2:  286-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  287:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_9TestSuiteESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_9TestSuiteESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
        2:  285:void ForEach(const Container& c, Functor functor) {
        2:  286:  std::for_each(c.begin(), c.end(), functor);
        2:  286-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  287:}
------------------
        -:  288:
        -:  289:// Returns the i-th element of the vector, or default_value if i is not
        -:  290:// in range [0, v.size()).
        -:  291:template <typename E>
function _ZN7testing8internal12GetElementOrIiEET_RKSt6vectorIS2_SaIS2_EEiS2_ called 19 returned 100% blocks executed 88%
       19:  292:inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {
      38*:  293:  return (i < 0 || i >= static_cast<int>(v.size())) ? default_value
       19:  293-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 0
       19:  293-block  1
call    2 returned 19
branch  3 taken 0 (fallthrough)
branch  4 taken 19
    %%%%%:  293-block  2
       38:  294:                                                    : v[static_cast<size_t>(i)];
       19:  294-block  0
call    0 returned 19
       19:  294-block  1
        -:  295:}
        -:  296:
        -:  297:// Performs an in-place shuffle of a range of the vector's elements.
        -:  298:// 'begin' and 'end' are element indices as an STL-style range;
        -:  299:// i.e. [begin, end) are shuffled, where 'end' == size() means to
        -:  300:// shuffle to the end of the vector.
        -:  301:template <typename E>
function _ZN7testing8internal12ShuffleRangeIiEEvPNS0_6RandomEiiPSt6vectorIT_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####:  302:void ShuffleRange(internal::Random* random, int begin, int end,
        -:  303:                  std::vector<E>* v) {
    #####:  304:  const int size = static_cast<int>(v->size());
    %%%%%:  304-block  0
call    0 never executed
    #####:  305:  GTEST_CHECK_(0 <= begin && begin <= size)
branch  0 never executed
branch  1 never executed
    %%%%%:  305-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:  305-block  1
    %%%%%:  305-block  2
    %%%%%:  305-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  305-block  4
call    7 never executed
call    8 never executed
    %%%%%:  305-block  5
call    9 never executed
    $$$$$:  305-block  6
call   10 never executed
    $$$$$:  305-block  7
call   11 never executed
    #####:  306:      << "Invalid shuffle range start " << begin << ": must be in range [0, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  306-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  306-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  306-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  307:      << size << "].";
    %%%%%:  307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  307-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  308:  GTEST_CHECK_(begin <= end && end <= size)
    %%%%%:  308-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  308-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  308-block  2
    %%%%%:  308-block  3
    %%%%%:  308-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  308-block  5
call    7 never executed
call    8 never executed
    %%%%%:  308-block  6
call    9 never executed
    $$$$$:  308-block  7
call   10 never executed
    #####:  309:      << "Invalid shuffle range finish " << end << ": must be in range ["
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  309-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  309-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  309-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  310:      << begin << ", " << size << "].";
    %%%%%:  310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  310-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  310-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  310-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  311:
        -:  312:  // Fisher-Yates shuffle, from
        -:  313:  // http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
    #####:  314:  for (int range_width = end - begin; range_width >= 2; range_width--) {
    %%%%%:  314-block  0
    %%%%%:  314-block  1
branch  0 never executed
branch  1 never executed
    #####:  315:    const int last_in_range = begin + range_width - 1;
    #####:  316:    const int selected =
        -:  317:        begin +
    #####:  318:        static_cast<int>(random->Generate(static_cast<uint32_t>(range_width)));
    %%%%%:  318-block  0
call    0 never executed
    #####:  319:    std::swap((*v)[static_cast<size_t>(selected)],
call    0 never executed
call    1 never executed
    #####:  320:              (*v)[static_cast<size_t>(last_in_range)]);
call    0 never executed
        -:  321:  }
    #####:  322:}
    %%%%%:  322-block  0
        -:  323:
        -:  324:// Performs an in-place shuffle of the vector's elements.
        -:  325:template <typename E>
function _ZN7testing8internal7ShuffleIiEEvPNS0_6RandomEPSt6vectorIT_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####:  326:inline void Shuffle(internal::Random* random, std::vector<E>* v) {
    #####:  327:  ShuffleRange(random, 0, static_cast<int>(v->size()), v);
    %%%%%:  327-block  0
call    0 never executed
call    1 never executed
    #####:  328:}
        -:  329:
        -:  330:// A function for deleting an object.  Handy for being used as a
        -:  331:// functor.
        -:  332:template <typename T>
      20*:  333:static void Delete(T* x) {
      20*:  334:  delete x;
      20*:  335:}
------------------
_ZN7testing8internalL6DeleteINS_11EnvironmentEEEvPT_:
function _ZN7testing8internalL6DeleteINS_11EnvironmentEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:  333:static void Delete(T* x) {
    #####:  334:  delete x;
    %%%%%:  334-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  334-block  1
call    2 never executed
    #####:  335:}
------------------
_ZN7testing8internalL6DeleteINS_9TestSuiteEEEvPT_:
function _ZN7testing8internalL6DeleteINS_9TestSuiteEEEvPT_ called 1 returned 100% blocks executed 100%
        1:  333:static void Delete(T* x) {
        1:  334:  delete x;
        1:  334-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  334-block  1
call    2 returned 1
        1:  335:}
------------------
_ZN7testing8internalL6DeleteINS_17TestEventListenerEEEvPT_:
function _ZN7testing8internalL6DeleteINS_17TestEventListenerEEEvPT_ called 1 returned 100% blocks executed 100%
        1:  333:static void Delete(T* x) {
        1:  334:  delete x;
        1:  334-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  334-block  1
call    2 returned 1
        1:  335:}
------------------
_ZN7testing8internalL6DeleteINS_8TestInfoEEEvPT_:
function _ZN7testing8internalL6DeleteINS_8TestInfoEEEvPT_ called 18 returned 100% blocks executed 100%
       18:  333:static void Delete(T* x) {
       18:  334:  delete x;
       18:  334-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:  334-block  1
call    2 returned 18
call    3 returned 18
       18:  335:}
------------------
        -:  336:
        -:  337:// A predicate that checks the key of a TestProperty against a known key.
        -:  338://
        -:  339:// TestPropertyKeyIs is copyable.
        -:  340:class TestPropertyKeyIs {
        -:  341: public:
        -:  342:  // Constructor.
        -:  343:  //
        -:  344:  // TestPropertyKeyIs has NO default constructor.
function _ZN7testing8internal17TestPropertyKeyIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  345:  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}
    %%%%%:  345-block  0
call    0 never executed
        -:  346:
        -:  347:  // Returns true if and only if the test name of test property matches on key_.
function _ZNK7testing8internal17TestPropertyKeyIsclERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####:  348:  bool operator()(const TestProperty& test_property) const {
    #####:  349:    return test_property.key() == key_;
    %%%%%:  349-block  0
call    0 never executed
call    1 never executed
        -:  350:  }
        -:  351:
        -:  352: private:
        -:  353:  std::string key_;
        -:  354:};
        -:  355:
        -:  356:// Class UnitTestOptions.
        -:  357://
        -:  358:// This class contains functions for processing options the user
        -:  359:// specifies when running the tests.  It has only static members.
        -:  360://
        -:  361:// In most cases, the user can specify an option using either an
        -:  362:// environment variable or a command line flag.  E.g. you can set the
        -:  363:// test filter using either GTEST_FILTER or --gtest_filter.  If both
        -:  364:// the variable and the flag are present, the latter overrides the
        -:  365:// former.
        -:  366:class GTEST_API_ UnitTestOptions {
        -:  367: public:
        -:  368:  // Functions for processing the gtest_output flag.
        -:  369:
        -:  370:  // Returns the output format, or "" for normal printed output.
        -:  371:  static std::string GetOutputFormat();
        -:  372:
        -:  373:  // Returns the absolute path of the requested output file, or the
        -:  374:  // default (test_detail.xml in the original working directory) if
        -:  375:  // none was explicitly specified.
        -:  376:  static std::string GetAbsolutePathToOutputFile();
        -:  377:
        -:  378:  // Functions for processing the gtest_filter flag.
        -:  379:
        -:  380:  // Returns true if and only if the user-specified filter matches the test
        -:  381:  // suite name and the test name.
        -:  382:  static bool FilterMatchesTest(const std::string& test_suite_name,
        -:  383:                                const std::string& test_name);
        -:  384:
        -:  385:#if GTEST_OS_WINDOWS
        -:  386:  // Function for supporting the gtest_catch_exception flag.
        -:  387:
        -:  388:  // Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  389:  // given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  390:  // This function is useful as an __except condition.
        -:  391:  static int GTestShouldProcessSEH(DWORD exception_code);
        -:  392:#endif  // GTEST_OS_WINDOWS
        -:  393:
        -:  394:  // Returns true if "name" matches the ':' separated list of glob-style
        -:  395:  // filters in "filter".
        -:  396:  static bool MatchesFilter(const std::string& name, const char* filter);
        -:  397:};
        -:  398:
        -:  399:// Returns the current application's name, removing directory path if that
        -:  400:// is present.  Used by UnitTestOptions::GetOutputFile.
        -:  401:GTEST_API_ FilePath GetCurrentExecutableName();
        -:  402:
        -:  403:// The role interface for getting the OS stack trace as a string.
        -:  404:class OsStackTraceGetterInterface {
        -:  405: public:
function _ZN7testing8internal27OsStackTraceGetterInterfaceC2Ev called 1 returned 100% blocks executed 100%
        1:  406:  OsStackTraceGetterInterface() {}
       1*:  407:  virtual ~OsStackTraceGetterInterface() {}
------------------
_ZN7testing8internal27OsStackTraceGetterInterfaceD0Ev:
function _ZN7testing8internal27OsStackTraceGetterInterfaceD0Ev called 0 returned 0% blocks executed 0%
    #####:  407:  virtual ~OsStackTraceGetterInterface() {}
    %%%%%:  407-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal27OsStackTraceGetterInterfaceD2Ev:
function _ZN7testing8internal27OsStackTraceGetterInterfaceD2Ev called 1 returned 100% blocks executed 100%
        1:  407:  virtual ~OsStackTraceGetterInterface() {}
------------------
        -:  408:
        -:  409:  // Returns the current OS stack trace as an std::string.  Parameters:
        -:  410:  //
        -:  411:  //   max_depth  - the maximum number of stack frames to be included
        -:  412:  //                in the trace.
        -:  413:  //   skip_count - the number of top frames to be skipped; doesn't count
        -:  414:  //                against max_depth.
        -:  415:  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;
        -:  416:
        -:  417:  // UponLeavingGTest() should be called immediately before Google Test calls
        -:  418:  // user code. It saves some information about the current stack that
        -:  419:  // CurrentStackTrace() will use to find and hide Google Test stack frames.
        -:  420:  virtual void UponLeavingGTest() = 0;
        -:  421:
        -:  422:  // This string is inserted in place of stack frames that are part of
        -:  423:  // Google Test's implementation.
        -:  424:  static const char* const kElidedFramesMarker;
        -:  425:
        -:  426: private:
        -:  427:  GTEST_DISALLOW_COPY_AND_ASSIGN_(OsStackTraceGetterInterface);
        -:  428:};
        -:  429:
        -:  430:// A working implementation of the OsStackTraceGetterInterface interface.
        -:  431:class OsStackTraceGetter : public OsStackTraceGetterInterface {
        -:  432: public:
function _ZN7testing8internal18OsStackTraceGetterC2Ev called 1 returned 100% blocks executed 100%
        1:  433:  OsStackTraceGetter() {}
        1:  433-block  0
call    0 returned 1
        -:  434:
        -:  435:  std::string CurrentStackTrace(int max_depth, int skip_count) override;
        -:  436:  void UponLeavingGTest() override;
        -:  437:
        -:  438: private:
        -:  439:#if GTEST_HAS_ABSL
        -:  440:  Mutex mutex_;  // Protects all internal state.
        -:  441:
        -:  442:  // We save the stack frame below the frame that calls user code.
        -:  443:  // We do this because the address of the frame immediately below
        -:  444:  // the user code changes between the call to UponLeavingGTest()
        -:  445:  // and any calls to the stack trace code from within the user code.
        -:  446:  void* caller_frame_ = nullptr;
        -:  447:#endif  // GTEST_HAS_ABSL
        -:  448:
        -:  449:  GTEST_DISALLOW_COPY_AND_ASSIGN_(OsStackTraceGetter);
        -:  450:};
        -:  451:
        -:  452:// Information about a Google Test trace point.
        -:  453:struct TraceInfo {
        -:  454:  const char* file;
        -:  455:  int line;
        -:  456:  std::string message;
        -:  457:};
        -:  458:
        -:  459:// This is the default global test part result reporter used in UnitTestImpl.
        -:  460:// This class should only be used by UnitTestImpl.
        -:  461:class DefaultGlobalTestPartResultReporter
        -:  462:    : public TestPartResultReporterInterface {
        -:  463: public:
        -:  464:  explicit DefaultGlobalTestPartResultReporter(UnitTestImpl* unit_test);
        -:  465:  // Implements the TestPartResultReporterInterface. Reports the test part
        -:  466:  // result in the current test.
        -:  467:  void ReportTestPartResult(const TestPartResult& result) override;
        -:  468:
        -:  469: private:
        -:  470:  UnitTestImpl* const unit_test_;
        -:  471:
        -:  472:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultGlobalTestPartResultReporter);
        -:  473:};
        -:  474:
        -:  475:// This is the default per thread test part result reporter used in
        -:  476:// UnitTestImpl. This class should only be used by UnitTestImpl.
        -:  477:class DefaultPerThreadTestPartResultReporter
        -:  478:    : public TestPartResultReporterInterface {
        -:  479: public:
        -:  480:  explicit DefaultPerThreadTestPartResultReporter(UnitTestImpl* unit_test);
        -:  481:  // Implements the TestPartResultReporterInterface. The implementation just
        -:  482:  // delegates to the current global test part result reporter of *unit_test_.
        -:  483:  void ReportTestPartResult(const TestPartResult& result) override;
        -:  484:
        -:  485: private:
        -:  486:  UnitTestImpl* const unit_test_;
        -:  487:
        -:  488:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultPerThreadTestPartResultReporter);
        -:  489:};
        -:  490:
        -:  491:// The private implementation of the UnitTest class.  We don't protect
        -:  492:// the methods under a mutex, as this class is not accessible by a
        -:  493:// user and the UnitTest class that delegates work to this class does
        -:  494:// proper locking.
        -:  495:class GTEST_API_ UnitTestImpl {
        -:  496: public:
        -:  497:  explicit UnitTestImpl(UnitTest* parent);
        -:  498:  virtual ~UnitTestImpl();
        -:  499:
        -:  500:  // There are two different ways to register your own TestPartResultReporter.
        -:  501:  // You can register your own repoter to listen either only for test results
        -:  502:  // from the current thread or for results from all threads.
        -:  503:  // By default, each per-thread test result repoter just passes a new
        -:  504:  // TestPartResult to the global test result reporter, which registers the
        -:  505:  // test part result for the currently running test.
        -:  506:
        -:  507:  // Returns the global test part result reporter.
        -:  508:  TestPartResultReporterInterface* GetGlobalTestPartResultReporter();
        -:  509:
        -:  510:  // Sets the global test part result reporter.
        -:  511:  void SetGlobalTestPartResultReporter(
        -:  512:      TestPartResultReporterInterface* reporter);
        -:  513:
        -:  514:  // Returns the test part result reporter for the current thread.
        -:  515:  TestPartResultReporterInterface* GetTestPartResultReporterForCurrentThread();
        -:  516:
        -:  517:  // Sets the test part result reporter for the current thread.
        -:  518:  void SetTestPartResultReporterForCurrentThread(
        -:  519:      TestPartResultReporterInterface* reporter);
        -:  520:
        -:  521:  // Gets the number of successful test suites.
        -:  522:  int successful_test_suite_count() const;
        -:  523:
        -:  524:  // Gets the number of failed test suites.
        -:  525:  int failed_test_suite_count() const;
        -:  526:
        -:  527:  // Gets the number of all test suites.
        -:  528:  int total_test_suite_count() const;
        -:  529:
        -:  530:  // Gets the number of all test suites that contain at least one test
        -:  531:  // that should run.
        -:  532:  int test_suite_to_run_count() const;
        -:  533:
        -:  534:  // Gets the number of successful tests.
        -:  535:  int successful_test_count() const;
        -:  536:
        -:  537:  // Gets the number of skipped tests.
        -:  538:  int skipped_test_count() const;
        -:  539:
        -:  540:  // Gets the number of failed tests.
        -:  541:  int failed_test_count() const;
        -:  542:
        -:  543:  // Gets the number of disabled tests that will be reported in the XML report.
        -:  544:  int reportable_disabled_test_count() const;
        -:  545:
        -:  546:  // Gets the number of disabled tests.
        -:  547:  int disabled_test_count() const;
        -:  548:
        -:  549:  // Gets the number of tests to be printed in the XML report.
        -:  550:  int reportable_test_count() const;
        -:  551:
        -:  552:  // Gets the number of all tests.
        -:  553:  int total_test_count() const;
        -:  554:
        -:  555:  // Gets the number of tests that should run.
        -:  556:  int test_to_run_count() const;
        -:  557:
        -:  558:  // Gets the time of the test program start, in ms from the start of the
        -:  559:  // UNIX epoch.
function _ZNK7testing8internal12UnitTestImpl15start_timestampEv called 0 returned 0% blocks executed 0%
    #####:  560:  TimeInMillis start_timestamp() const { return start_timestamp_; }
    %%%%%:  560-block  0
        -:  561:
        -:  562:  // Gets the elapsed time, in milliseconds.
function _ZNK7testing8internal12UnitTestImpl12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1:  563:  TimeInMillis elapsed_time() const { return elapsed_time_; }
        1:  563-block  0
        -:  564:
        -:  565:  // Returns true if and only if the unit test passed (i.e. all test suites
        -:  566:  // passed).
function _ZNK7testing8internal12UnitTestImpl6PassedEv called 2 returned 100% blocks executed 100%
        2:  567:  bool Passed() const { return !Failed(); }
        2:  567-block  0
call    0 returned 2
        -:  568:
        -:  569:  // Returns true if and only if the unit test failed (i.e. some test suite
        -:  570:  // failed or something outside of all tests failed).
function _ZNK7testing8internal12UnitTestImpl6FailedEv called 2 returned 100% blocks executed 89%
        2:  571:  bool Failed() const {
       2*:  572:    return failed_test_suite_count() > 0 || ad_hoc_test_result()->Failed();
        2:  572-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  572-block  1
call    3 returned 2
call    4 returned 2
branch  5 taken 0 (fallthrough)
branch  6 taken 2
    %%%%%:  572-block  2
        2:  572-block  3
        2:  572-block  4
        -:  573:  }
        -:  574:
        -:  575:  // Gets the i-th test suite among all the test suites. i can range from 0 to
        -:  576:  // total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8internal12UnitTestImpl12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####:  577:  const TestSuite* GetTestSuite(int i) const {
    #####:  578:    const int index = GetElementOr(test_suite_indices_, i, -1);
    %%%%%:  578-block  0
call    0 never executed
    #####:  579:    return index < 0 ? nullptr : test_suites_[static_cast<size_t>(i)];
branch  0 never executed
branch  1 never executed
    %%%%%:  579-block  0
call    2 never executed
    %%%%%:  579-block  1
    %%%%%:  579-block  2
        -:  580:  }
        -:  581:
        -:  582:  //  Legacy API is deprecated but still available
        -:  583:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8internal12UnitTestImpl11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####:  584:  const TestCase* GetTestCase(int i) const { return GetTestSuite(i); }
    %%%%%:  584-block  0
call    0 never executed
        -:  585:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -:  586:
        -:  587:  // Gets the i-th test suite among all the test suites. i can range from 0 to
        -:  588:  // total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8internal12UnitTestImpl19GetMutableSuiteCaseEi called 1 returned 100% blocks executed 86%
        1:  589:  TestSuite* GetMutableSuiteCase(int i) {
        1:  590:    const int index = GetElementOr(test_suite_indices_, i, -1);
        1:  590-block  0
call    0 returned 1
       1*:  591:    return index < 0 ? nullptr : test_suites_[static_cast<size_t>(index)];
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  591-block  0
call    2 returned 1
    %%%%%:  591-block  1
        1:  591-block  2
        -:  592:  }
        -:  593:
        -:  594:  // Provides access to the event listener list.
function _ZN7testing8internal12UnitTestImpl9listenersEv called 21 returned 100% blocks executed 100%
       21:  595:  TestEventListeners* listeners() { return &listeners_; }
       21:  595-block  0
        -:  596:
        -:  597:  // Returns the TestResult for the test that's currently running, or
        -:  598:  // the TestResult for the ad hoc test if no test is running.
        -:  599:  TestResult* current_test_result();
        -:  600:
        -:  601:  // Returns the TestResult for the ad hoc test.
function _ZNK7testing8internal12UnitTestImpl18ad_hoc_test_resultEv called 2 returned 100% blocks executed 100%
        2:  602:  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }
        2:  602-block  0
        -:  603:
        -:  604:  // Sets the OS stack trace getter.
        -:  605:  //
        -:  606:  // Does nothing if the input and the current OS stack trace getter
        -:  607:  // are the same; otherwise, deletes the old getter and makes the
        -:  608:  // input the current getter.
        -:  609:  void set_os_stack_trace_getter(OsStackTraceGetterInterface* getter);
        -:  610:
        -:  611:  // Returns the current OS stack trace getter if it is not NULL;
        -:  612:  // otherwise, creates an OsStackTraceGetter, makes it the current
        -:  613:  // getter, and returns it.
        -:  614:  OsStackTraceGetterInterface* os_stack_trace_getter();
        -:  615:
        -:  616:  // Returns the current OS stack trace as an std::string.
        -:  617:  //
        -:  618:  // The maximum number of stack frames to be included is specified by
        -:  619:  // the gtest_stack_trace_depth flag.  The skip_count parameter
        -:  620:  // specifies the number of top frames to be skipped, which doesn't
        -:  621:  // count against the number of frames to be included.
        -:  622:  //
        -:  623:  // For example, if Foo() calls Bar(), which in turn calls
        -:  624:  // CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -:  625:  // trace but Bar() and CurrentOsStackTraceExceptTop() won't.
        -:  626:  std::string CurrentOsStackTraceExceptTop(int skip_count)
        -:  627:      GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_;
        -:  628:
        -:  629:  // Finds and returns a TestSuite with the given name.  If one doesn't
        -:  630:  // exist, creates one and returns it.
        -:  631:  //
        -:  632:  // Arguments:
        -:  633:  //
        -:  634:  //   test_suite_name: name of the test suite
        -:  635:  //   type_param:      the name of the test's type parameter, or NULL if
        -:  636:  //                    this is not a typed or a type-parameterized test.
        -:  637:  //   set_up_tc:       pointer to the function that sets up the test suite
        -:  638:  //   tear_down_tc:    pointer to the function that tears down the test suite
        -:  639:  TestSuite* GetTestSuite(const char* test_suite_name, const char* type_param,
        -:  640:                          internal::SetUpTestSuiteFunc set_up_tc,
        -:  641:                          internal::TearDownTestSuiteFunc tear_down_tc);
        -:  642:
        -:  643://  Legacy API is deprecated but still available
        -:  644:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -:  645:  TestCase* GetTestCase(const char* test_case_name, const char* type_param,
        -:  646:                        internal::SetUpTestSuiteFunc set_up_tc,
        -:  647:                        internal::TearDownTestSuiteFunc tear_down_tc) {
        -:  648:    return GetTestSuite(test_case_name, type_param, set_up_tc, tear_down_tc);
        -:  649:  }
        -:  650:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -:  651:
        -:  652:  // Adds a TestInfo to the unit test.
        -:  653:  //
        -:  654:  // Arguments:
        -:  655:  //
        -:  656:  //   set_up_tc:    pointer to the function that sets up the test suite
        -:  657:  //   tear_down_tc: pointer to the function that tears down the test suite
        -:  658:  //   test_info:    the TestInfo object
function _ZN7testing8internal12UnitTestImpl11AddTestInfoEPFvvES3_PNS_8TestInfoE called 18 returned 100% blocks executed 56%
       18:  659:  void AddTestInfo(internal::SetUpTestSuiteFunc set_up_tc,
        -:  660:                   internal::TearDownTestSuiteFunc tear_down_tc,
        -:  661:                   TestInfo* test_info) {
        -:  662:#if GTEST_HAS_DEATH_TEST
        -:  663:    // In order to support thread-safe death tests, we need to
        -:  664:    // remember the original working directory when the test program
        -:  665:    // was first invoked.  We cannot do this in RUN_ALL_TESTS(), as
        -:  666:    // the user may have changed the current directory before calling
        -:  667:    // RUN_ALL_TESTS().  Therefore we capture the current directory in
        -:  668:    // AddTestInfo(), which is called to register a TEST or TEST_F
        -:  669:    // before main() is reached.
       18:  670:    if (original_working_dir_.IsEmpty()) {
       18:  670-block  0
call    0 returned 18
branch  1 taken 1 (fallthrough)
branch  2 taken 17
        1:  671:      original_working_dir_.Set(FilePath::GetCurrentDir());
        1:  671-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  671-block  1
call    4 returned 1
    $$$$$:  671-block  2
call    5 never executed
    $$$$$:  671-block  3
call    6 never executed
       1*:  672:      GTEST_CHECK_(!original_working_dir_.IsEmpty())
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  672-block  0
call    4 never executed
call    5 never executed
    %%%%%:  672-block  1
call    6 never executed
    $$$$$:  672-block  2
call    7 never executed
    #####:  673:          << "Failed to get the current working directory.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  673-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  674:    }
        -:  675:#endif  // GTEST_HAS_DEATH_TEST
        -:  676:
        -:  677:    GetTestSuite(test_info->test_suite_name(), test_info->type_param(),
        -:  678:                 set_up_tc, tear_down_tc)
       18:  679:        ->AddTestInfo(test_info);
       18:  679-block  0
call    0 returned 18
call    1 returned 18
call    2 returned 18
call    3 returned 18
       18:  680:  }
        -:  681:
        -:  682:  // Returns ParameterizedTestSuiteRegistry object used to keep track of
        -:  683:  // value-parameterized tests and instantiate and register them.
function _ZN7testing8internal12UnitTestImpl27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####:  684:  internal::ParameterizedTestSuiteRegistry& parameterized_test_registry() {
    #####:  685:    return parameterized_test_registry_;
    %%%%%:  685-block  0
        -:  686:  }
        -:  687:
function _ZN7testing8internal12UnitTestImpl33ignored_parameterized_test_suitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  688:  std::set<std::string>* ignored_parameterized_test_suites() {
        1:  689:    return &ignored_parameterized_test_suites_;
        1:  689-block  0
        -:  690:  }
        -:  691:
        -:  692:  // Returns TypeParameterizedTestSuiteRegistry object used to keep track of
        -:  693:  // type-parameterized tests and instantiations of them.
        -:  694:  internal::TypeParameterizedTestSuiteRegistry&
function _ZN7testing8internal12UnitTestImpl32type_parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####:  695:  type_parameterized_test_registry() {
    #####:  696:    return type_parameterized_test_registry_;
    %%%%%:  696-block  0
        -:  697:  }
        -:  698:
        -:  699:  // Sets the TestSuite object for the test that's currently running.
function _ZN7testing8internal12UnitTestImpl22set_current_test_suiteEPNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  700:  void set_current_test_suite(TestSuite* a_current_test_suite) {
        2:  701:    current_test_suite_ = a_current_test_suite;
        2:  702:  }
        -:  703:
        -:  704:  // Sets the TestInfo object for the test that's currently running.  If
        -:  705:  // current_test_info is NULL, the assertion results will be stored in
        -:  706:  // ad_hoc_test_result_.
function _ZN7testing8internal12UnitTestImpl21set_current_test_infoEPNS_8TestInfoE called 36 returned 100% blocks executed 100%
       36:  707:  void set_current_test_info(TestInfo* a_current_test_info) {
       36:  708:    current_test_info_ = a_current_test_info;
       36:  709:  }
        -:  710:
        -:  711:  // Registers all parameterized tests defined using TEST_P and
        -:  712:  // INSTANTIATE_TEST_SUITE_P, creating regular tests for each test/parameter
        -:  713:  // combination. This method can be called more then once; it has guards
        -:  714:  // protecting from registering the tests more then once.  If
        -:  715:  // value-parameterized tests are disabled, RegisterParameterizedTests is
        -:  716:  // present but does nothing.
        -:  717:  void RegisterParameterizedTests();
        -:  718:
        -:  719:  // Runs all tests in this UnitTest object, prints the result, and
        -:  720:  // returns true if all tests are successful.  If any exception is
        -:  721:  // thrown during a test, this test is considered to be failed, but
        -:  722:  // the rest of the tests will still be run.
        -:  723:  bool RunAllTests();
        -:  724:
        -:  725:  // Clears the results of all tests, except the ad hoc tests.
function _ZN7testing8internal12UnitTestImpl23ClearNonAdHocTestResultEv called 1 returned 100% blocks executed 100%
        1:  726:  void ClearNonAdHocTestResult() {
        1:  727:    ForEach(test_suites_, TestSuite::ClearTestSuiteResult);
        1:  727-block  0
call    0 returned 1
        1:  728:  }
        -:  729:
        -:  730:  // Clears the results of ad-hoc test assertions.
        -:  731:  void ClearAdHocTestResult() { ad_hoc_test_result_.Clear(); }
        -:  732:
        -:  733:  // Adds a TestProperty to the current TestResult object when invoked in a
        -:  734:  // context of a test or a test suite, or to the global property set. If the
        -:  735:  // result already contains a property with the same key, the value will be
        -:  736:  // updated.
        -:  737:  void RecordProperty(const TestProperty& test_property);
        -:  738:
        -:  739:  enum ReactionToSharding { HONOR_SHARDING_PROTOCOL, IGNORE_SHARDING_PROTOCOL };
        -:  740:
        -:  741:  // Matches the full name of each test against the user-specified
        -:  742:  // filter to decide whether the test should run, then records the
        -:  743:  // result in each TestSuite and TestInfo object.
        -:  744:  // If shard_tests == HONOR_SHARDING_PROTOCOL, further filters tests
        -:  745:  // based on sharding variables in the environment.
        -:  746:  // Returns the number of tests that should run.
        -:  747:  int FilterTests(ReactionToSharding shard_tests);
        -:  748:
        -:  749:  // Prints the names of the tests matching the user-specified filter flag.
        -:  750:  void ListTestsMatchingFilter();
        -:  751:
function _ZNK7testing8internal12UnitTestImpl18current_test_suiteEv called 18 returned 100% blocks executed 100%
       18:  752:  const TestSuite* current_test_suite() const { return current_test_suite_; }
       18:  752-block  0
function _ZN7testing8internal12UnitTestImpl17current_test_infoEv called 18 returned 100% blocks executed 100%
       18:  753:  TestInfo* current_test_info() { return current_test_info_; }
       18:  753-block  0
function _ZNK7testing8internal12UnitTestImpl17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####:  754:  const TestInfo* current_test_info() const { return current_test_info_; }
    %%%%%:  754-block  0
        -:  755:
        -:  756:  // Returns the vector of environments that need to be set-up/torn-down
        -:  757:  // before/after the tests are run.
function _ZN7testing8internal12UnitTestImpl12environmentsEv called 0 returned 0% blocks executed 0%
    #####:  758:  std::vector<Environment*>& environments() { return environments_; }
    %%%%%:  758-block  0
        -:  759:
        -:  760:  // Getters for the per-thread Google Test trace stack.
function _ZN7testing8internal12UnitTestImpl17gtest_trace_stackEv called 0 returned 0% blocks executed 0%
    #####:  761:  std::vector<TraceInfo>& gtest_trace_stack() {
    #####:  762:    return *(gtest_trace_stack_.pointer());
    %%%%%:  762-block  0
call    0 never executed
        -:  763:  }
        -:  764:  const std::vector<TraceInfo>& gtest_trace_stack() const {
        -:  765:    return gtest_trace_stack_.get();
        -:  766:  }
        -:  767:
        -:  768:#if GTEST_HAS_DEATH_TEST
function _ZN7testing8internal12UnitTestImpl34InitDeathTestSubprocessControlInfoEv called 1 returned 100% blocks executed 100%
        1:  769:  void InitDeathTestSubprocessControlInfo() {
        1:  770:    internal_run_death_test_flag_.reset(ParseInternalRunDeathTestFlag());
        1:  770-block  0
call    0 returned 1
call    1 returned 1
        1:  771:  }
        -:  772:  // Returns a pointer to the parsed --gtest_internal_run_death_test
        -:  773:  // flag, or NULL if that flag was not specified.
        -:  774:  // This information is useful only in a death test child process.
        -:  775:  // Must not be called before a call to InitGoogleTest.
function _ZNK7testing8internal12UnitTestImpl28internal_run_death_test_flagEv called 0 returned 0% blocks executed 0%
    #####:  776:  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {
    #####:  777:    return internal_run_death_test_flag_.get();
    %%%%%:  777-block  0
call    0 never executed
        -:  778:  }
        -:  779:
        -:  780:  // Returns a pointer to the current death test factory.
function _ZN7testing8internal12UnitTestImpl18death_test_factoryEv called 0 returned 0% blocks executed 0%
    #####:  781:  internal::DeathTestFactory* death_test_factory() {
    #####:  782:    return death_test_factory_.get();
    %%%%%:  782-block  0
call    0 never executed
        -:  783:  }
        -:  784:
        -:  785:  void SuppressTestEventsIfInSubprocess();
        -:  786:
        -:  787:  friend class ReplaceDeathTestFactory;
        -:  788:#endif  // GTEST_HAS_DEATH_TEST
        -:  789:
        -:  790:  // Initializes the event listener performing XML output as specified by
        -:  791:  // UnitTestOptions. Must not be called before InitGoogleTest.
        -:  792:  void ConfigureXmlOutput();
        -:  793:
        -:  794:#if GTEST_CAN_STREAM_RESULTS_
        -:  795:  // Initializes the event listener for streaming test results to a socket.
        -:  796:  // Must not be called before InitGoogleTest.
        -:  797:  void ConfigureStreamingOutput();
        -:  798:#endif
        -:  799:
        -:  800:  // Performs initialization dependent upon flag values obtained in
        -:  801:  // ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -:  802:  // ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -:  803:  // this function is also called from RunAllTests.  Since this function can be
        -:  804:  // called more than once, it has to be idempotent.
        -:  805:  void PostFlagParsingInit();
        -:  806:
        -:  807:  // Gets the random seed used at the start of the current test iteration.
function _ZNK7testing8internal12UnitTestImpl11random_seedEv called 0 returned 0% blocks executed 0%
    #####:  808:  int random_seed() const { return random_seed_; }
    %%%%%:  808-block  0
        -:  809:
        -:  810:  // Gets the random number generator.
function _ZN7testing8internal12UnitTestImpl6randomEv called 0 returned 0% blocks executed 0%
    #####:  811:  internal::Random* random() { return &random_; }
    %%%%%:  811-block  0
        -:  812:
        -:  813:  // Shuffles all test suites, and the tests within each test suite,
        -:  814:  // making sure that death tests are still run first.
        -:  815:  void ShuffleTests();
        -:  816:
        -:  817:  // Restores the test suites and tests to their order before the first shuffle.
        -:  818:  void UnshuffleTests();
        -:  819:
        -:  820:  // Returns the value of GTEST_FLAG(catch_exceptions) at the moment
        -:  821:  // UnitTest::Run() starts.
function _ZNK7testing8internal12UnitTestImpl16catch_exceptionsEv called 93 returned 100% blocks executed 100%
       93:  822:  bool catch_exceptions() const { return catch_exceptions_; }
       93:  822-block  0
        -:  823:
        -:  824: private:
        -:  825:  friend class ::testing::UnitTest;
        -:  826:
        -:  827:  // Used by UnitTest::Run() to capture the state of
        -:  828:  // GTEST_FLAG(catch_exceptions) at the moment it starts.
function _ZN7testing8internal12UnitTestImpl20set_catch_exceptionsEb called 1 returned 100% blocks executed 100%
        1:  829:  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }
        -:  830:
        -:  831:  // The UnitTest object that owns this implementation object.
        -:  832:  UnitTest* const parent_;
        -:  833:
        -:  834:  // The working directory when the first TEST() or TEST_F() was
        -:  835:  // executed.
        -:  836:  internal::FilePath original_working_dir_;
        -:  837:
        -:  838:  // The default test part result reporters.
        -:  839:  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;
        -:  840:  DefaultPerThreadTestPartResultReporter
        -:  841:      default_per_thread_test_part_result_reporter_;
        -:  842:
        -:  843:  // Points to (but doesn't own) the global test part result reporter.
        -:  844:  TestPartResultReporterInterface* global_test_part_result_repoter_;
        -:  845:
        -:  846:  // Protects read and write access to global_test_part_result_reporter_.
        -:  847:  internal::Mutex global_test_part_result_reporter_mutex_;
        -:  848:
        -:  849:  // Points to (but doesn't own) the per-thread test part result reporter.
        -:  850:  internal::ThreadLocal<TestPartResultReporterInterface*>
        -:  851:      per_thread_test_part_result_reporter_;
        -:  852:
        -:  853:  // The vector of environments that need to be set-up/torn-down
        -:  854:  // before/after the tests are run.
        -:  855:  std::vector<Environment*> environments_;
        -:  856:
        -:  857:  // The vector of TestSuites in their original order.  It owns the
        -:  858:  // elements in the vector.
        -:  859:  std::vector<TestSuite*> test_suites_;
        -:  860:
        -:  861:  // Provides a level of indirection for the test suite list to allow
        -:  862:  // easy shuffling and restoring the test suite order.  The i-th
        -:  863:  // element of this vector is the index of the i-th test suite in the
        -:  864:  // shuffled order.
        -:  865:  std::vector<int> test_suite_indices_;
        -:  866:
        -:  867:  // ParameterizedTestRegistry object used to register value-parameterized
        -:  868:  // tests.
        -:  869:  internal::ParameterizedTestSuiteRegistry parameterized_test_registry_;
        -:  870:  internal::TypeParameterizedTestSuiteRegistry
        -:  871:      type_parameterized_test_registry_;
        -:  872:
        -:  873:  // The set holding the name of parameterized
        -:  874:  // test suites that may go uninstantiated.
        -:  875:  std::set<std::string> ignored_parameterized_test_suites_;
        -:  876:
        -:  877:  // Indicates whether RegisterParameterizedTests() has been called already.
        -:  878:  bool parameterized_tests_registered_;
        -:  879:
        -:  880:  // Index of the last death test suite registered.  Initially -1.
        -:  881:  int last_death_test_suite_;
        -:  882:
        -:  883:  // This points to the TestSuite for the currently running test.  It
        -:  884:  // changes as Google Test goes through one test suite after another.
        -:  885:  // When no test is running, this is set to NULL and Google Test
        -:  886:  // stores assertion results in ad_hoc_test_result_.  Initially NULL.
        -:  887:  TestSuite* current_test_suite_;
        -:  888:
        -:  889:  // This points to the TestInfo for the currently running test.  It
        -:  890:  // changes as Google Test goes through one test after another.  When
        -:  891:  // no test is running, this is set to NULL and Google Test stores
        -:  892:  // assertion results in ad_hoc_test_result_.  Initially NULL.
        -:  893:  TestInfo* current_test_info_;
        -:  894:
        -:  895:  // Normally, a user only writes assertions inside a TEST or TEST_F,
        -:  896:  // or inside a function called by a TEST or TEST_F.  Since Google
        -:  897:  // Test keeps track of which test is current running, it can
        -:  898:  // associate such an assertion with the test it belongs to.
        -:  899:  //
        -:  900:  // If an assertion is encountered when no TEST or TEST_F is running,
        -:  901:  // Google Test attributes the assertion result to an imaginary "ad hoc"
        -:  902:  // test, and records the result in ad_hoc_test_result_.
        -:  903:  TestResult ad_hoc_test_result_;
        -:  904:
        -:  905:  // The list of event listeners that can be used to track events inside
        -:  906:  // Google Test.
        -:  907:  TestEventListeners listeners_;
        -:  908:
        -:  909:  // The OS stack trace getter.  Will be deleted when the UnitTest
        -:  910:  // object is destructed.  By default, an OsStackTraceGetter is used,
        -:  911:  // but the user can set this field to use a custom getter if that is
        -:  912:  // desired.
        -:  913:  OsStackTraceGetterInterface* os_stack_trace_getter_;
        -:  914:
        -:  915:  // True if and only if PostFlagParsingInit() has been called.
        -:  916:  bool post_flag_parse_init_performed_;
        -:  917:
        -:  918:  // The random number seed used at the beginning of the test run.
        -:  919:  int random_seed_;
        -:  920:
        -:  921:  // Our random number generator.
        -:  922:  internal::Random random_;
        -:  923:
        -:  924:  // The time of the test program start, in ms from the start of the
        -:  925:  // UNIX epoch.
        -:  926:  TimeInMillis start_timestamp_;
        -:  927:
        -:  928:  // How long the test took to run, in milliseconds.
        -:  929:  TimeInMillis elapsed_time_;
        -:  930:
        -:  931:#if GTEST_HAS_DEATH_TEST
        -:  932:  // The decomposed components of the gtest_internal_run_death_test flag,
        -:  933:  // parsed when RUN_ALL_TESTS is called.
        -:  934:  std::unique_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;
        -:  935:  std::unique_ptr<internal::DeathTestFactory> death_test_factory_;
        -:  936:#endif  // GTEST_HAS_DEATH_TEST
        -:  937:
        -:  938:  // A per-thread stack of traces created by the SCOPED_TRACE() macro.
        -:  939:  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;
        -:  940:
        -:  941:  // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()
        -:  942:  // starts.
        -:  943:  bool catch_exceptions_;
        -:  944:
        -:  945:  GTEST_DISALLOW_COPY_AND_ASSIGN_(UnitTestImpl);
        -:  946:};  // class UnitTestImpl
        -:  947:
        -:  948:// Convenience function for accessing the global UnitTest
        -:  949:// implementation object.
function _ZN7testing8internal15GetUnitTestImplEv called 241 returned 100% blocks executed 100%
      241:  950:inline UnitTestImpl* GetUnitTestImpl() {
      241:  951:  return UnitTest::GetInstance()->impl();
      241:  951-block  0
call    0 returned 241
call    1 returned 241
        -:  952:}
        -:  953:
        -:  954:#if GTEST_USES_SIMPLE_RE
        -:  955:
        -:  956:// Internal helper functions for implementing the simple regular
        -:  957:// expression matcher.
        -:  958:GTEST_API_ bool IsInSet(char ch, const char* str);
        -:  959:GTEST_API_ bool IsAsciiDigit(char ch);
        -:  960:GTEST_API_ bool IsAsciiPunct(char ch);
        -:  961:GTEST_API_ bool IsRepeat(char ch);
        -:  962:GTEST_API_ bool IsAsciiWhiteSpace(char ch);
        -:  963:GTEST_API_ bool IsAsciiWordChar(char ch);
        -:  964:GTEST_API_ bool IsValidEscape(char ch);
        -:  965:GTEST_API_ bool AtomMatchesChar(bool escaped, char pattern, char ch);
        -:  966:GTEST_API_ bool ValidateRegex(const char* regex);
        -:  967:GTEST_API_ bool MatchRegexAtHead(const char* regex, const char* str);
        -:  968:GTEST_API_ bool MatchRepetitionAndRegexAtHead(bool escaped, char ch,
        -:  969:                                              char repeat, const char* regex,
        -:  970:                                              const char* str);
        -:  971:GTEST_API_ bool MatchRegexAnywhere(const char* regex, const char* str);
        -:  972:
        -:  973:#endif  // GTEST_USES_SIMPLE_RE
        -:  974:
        -:  975:// Parses the command line for Google Test flags, without initializing
        -:  976:// other parts of Google Test.
        -:  977:GTEST_API_ void ParseGoogleTestFlagsOnly(int* argc, char** argv);
        -:  978:GTEST_API_ void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv);
        -:  979:
        -:  980:#if GTEST_HAS_DEATH_TEST
        -:  981:
        -:  982:// Returns the message describing the last system error, regardless of the
        -:  983:// platform.
        -:  984:GTEST_API_ std::string GetLastErrnoDescription();
        -:  985:
        -:  986:// Attempts to parse a string into a positive integer pointed to by the
        -:  987:// number parameter.  Returns true if that is possible.
        -:  988:// GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we can use
        -:  989:// it here.
        -:  990:template <typename Integer>
function _ZN7testing8internal18ParseNaturalNumberIiEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_ called 0 returned 0% blocks executed 0%
    #####:  991:bool ParseNaturalNumber(const ::std::string& str, Integer* number) {
        -:  992:  // Fail fast if the given string does not begin with a digit;
        -:  993:  // this bypasses strtoXXX's "optional leading whitespace and plus
        -:  994:  // or minus sign" semantics, which are undesirable here.
    #####:  995:  if (str.empty() || !IsDigit(str[0])) {
    %%%%%:  995-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  995-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  995-block  2
    %%%%%:  995-block  3
    %%%%%:  995-block  4
branch  7 never executed
branch  8 never executed
    #####:  996:    return false;
    %%%%%:  996-block  0
        -:  997:  }
    #####:  998:  errno = 0;
        -:  999:
        -: 1000:  char* end;
        -: 1001:  // BiggestConvertible is the largest integer type that system-provided
        -: 1002:  // string-to-number conversion routines can return.
        -: 1003:  using BiggestConvertible = unsigned long long;  // NOLINT
        -: 1004:
    #####: 1005:  const BiggestConvertible parsed = strtoull(str.c_str(), &end, 10);  // NOLINT
    %%%%%: 1005-block  0
call    0 never executed
call    1 never executed
    #####: 1006:  const bool parse_success = *end == '\0' && errno == 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1006-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1006-block  1
    %%%%%: 1006-block  2
        -: 1007:
    #####: 1008:  GTEST_CHECK_(sizeof(Integer) <= sizeof(parsed));
    %%%%%: 1008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1008-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1008-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1008-block  3
call   10 never executed
    $$$$$: 1008-block  4
call   11 never executed
    $$$$$: 1008-block  5
        -: 1009:
    #####: 1010:  const Integer result = static_cast<Integer>(parsed);
    #####: 1011:  if (parse_success && static_cast<BiggestConvertible>(result) == parsed) {
    %%%%%: 1011-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1011-block  1
branch  2 never executed
branch  3 never executed
    #####: 1012:    *number = result;
    #####: 1013:    return true;
    %%%%%: 1013-block  0
        -: 1014:  }
    #####: 1015:  return false;
    %%%%%: 1015-block  0
        -: 1016:}
        -: 1017:#endif  // GTEST_HAS_DEATH_TEST
        -: 1018:
        -: 1019:// TestResult contains some private methods that should be hidden from
        -: 1020:// Google Test user but are required for testing. This class allow our tests
        -: 1021:// to access them.
        -: 1022://
        -: 1023:// This class is supplied only for the purpose of testing Google Test's own
        -: 1024:// constructs. Do not use it in user tests, either directly or indirectly.
        -: 1025:class TestResultAccessor {
        -: 1026: public:
        -: 1027:  static void RecordProperty(TestResult* test_result,
        -: 1028:                             const std::string& xml_element,
        -: 1029:                             const TestProperty& property) {
        -: 1030:    test_result->RecordProperty(xml_element, property);
        -: 1031:  }
        -: 1032:
        -: 1033:  static void ClearTestPartResults(TestResult* test_result) {
        -: 1034:    test_result->ClearTestPartResults();
        -: 1035:  }
        -: 1036:
        -: 1037:  static const std::vector<testing::TestPartResult>& test_part_results(
        -: 1038:      const TestResult& test_result) {
        -: 1039:    return test_result.test_part_results();
        -: 1040:  }
        -: 1041:};
        -: 1042:
        -: 1043:#if GTEST_CAN_STREAM_RESULTS_
        -: 1044:
        -: 1045:// Streams test results to the given port on the given host machine.
        -: 1046:class StreamingListener : public EmptyTestEventListener {
        -: 1047: public:
        -: 1048:  // Abstract base class for writing strings to a socket.
        -: 1049:  class AbstractSocketWriter {
        -: 1050:   public:
    #####: 1051:    virtual ~AbstractSocketWriter() {}
------------------
_ZN7testing8internal17StreamingListener20AbstractSocketWriterD0Ev:
function _ZN7testing8internal17StreamingListener20AbstractSocketWriterD0Ev called 0 returned 0% blocks executed 0%
    #####: 1051:    virtual ~AbstractSocketWriter() {}
    %%%%%: 1051-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17StreamingListener20AbstractSocketWriterD2Ev:
function _ZN7testing8internal17StreamingListener20AbstractSocketWriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 1051:    virtual ~AbstractSocketWriter() {}
------------------
        -: 1052:
        -: 1053:    // Sends a string to the socket.
        -: 1054:    virtual void Send(const std::string& message) = 0;
        -: 1055:
        -: 1056:    // Closes the socket.
function _ZN7testing8internal17StreamingListener20AbstractSocketWriter15CloseConnectionEv called 0 returned 0% blocks executed 0%
    #####: 1057:    virtual void CloseConnection() {}
        -: 1058:
        -: 1059:    // Sends a string and a newline to the socket.
function _ZN7testing8internal17StreamingListener20AbstractSocketWriter6SendLnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1060:    void SendLn(const std::string& message) { Send(message + "\n"); }
    %%%%%: 1060-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1060-block  1
call    4 never executed
    $$$$$: 1060-block  2
call    5 never executed
        -: 1061:  };
        -: 1062:
        -: 1063:  // Concrete class for actually writing strings to a socket.
        -: 1064:  class SocketWriter : public AbstractSocketWriter {
        -: 1065:   public:
function _ZN7testing8internal17StreamingListener12SocketWriterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####: 1066:    SocketWriter(const std::string& host, const std::string& port)
    #####: 1067:        : sockfd_(-1), host_name_(host), port_num_(port) {
    %%%%%: 1067-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1067-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1067-block  2
call    7 never executed
    $$$$$: 1067-block  3
call    8 never executed
    $$$$$: 1067-block  4
call    9 never executed
    #####: 1068:      MakeConnection();
    %%%%%: 1068-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1069:    }
    %%%%%: 1069-block  0
        -: 1070:
    #####: 1071:    ~SocketWriter() override {
    #####: 1072:      if (sockfd_ != -1) CloseConnection();
    #####: 1073:    }
------------------
_ZN7testing8internal17StreamingListener12SocketWriterD0Ev:
function _ZN7testing8internal17StreamingListener12SocketWriterD0Ev called 0 returned 0% blocks executed 0%
    #####: 1071:    ~SocketWriter() override {
        -: 1072:      if (sockfd_ != -1) CloseConnection();
    #####: 1073:    }
    %%%%%: 1073-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17StreamingListener12SocketWriterD2Ev:
function _ZN7testing8internal17StreamingListener12SocketWriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 1071:    ~SocketWriter() override {
    %%%%%: 1071-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1072:      if (sockfd_ != -1) CloseConnection();
    %%%%%: 1072-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1072-block  1
call    2 never executed
    #####: 1073:    }
------------------
        -: 1074:
        -: 1075:    // Sends a string to the socket.
function _ZN7testing8internal17StreamingListener12SocketWriter4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1076:    void Send(const std::string& message) override {
    #####: 1077:      GTEST_CHECK_(sockfd_ != -1)
    %%%%%: 1077-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1077-block  1
call    3 never executed
call    4 never executed
    %%%%%: 1077-block  2
call    5 never executed
    $$$$$: 1077-block  3
call    6 never executed
    $$$$$: 1077-block  4
call    7 never executed
    #####: 1078:          << "Send() can be called only when there is a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1078-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1079:
    #####: 1080:      const auto len = static_cast<size_t>(message.length());
    %%%%%: 1080-block  0
call    0 never executed
    #####: 1081:      if (write(sockfd_, message.c_str(), len) != static_cast<ssize_t>(len)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1082:        GTEST_LOG_(WARNING) << "stream_result_to: failed to stream to "
    %%%%%: 1082-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1082-block  1
call    2 never executed
    $$$$$: 1082-block  2
call    3 never executed
    #####: 1083:                            << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1083-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1083-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1083-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 1084:      }
    #####: 1085:    }
    %%%%%: 1085-block  0
        -: 1086:
        -: 1087:   private:
        -: 1088:    // Creates a client socket and connects to the server.
        -: 1089:    void MakeConnection();
        -: 1090:
        -: 1091:    // Closes the socket.
function _ZN7testing8internal17StreamingListener12SocketWriter15CloseConnectionEv called 0 returned 0% blocks executed 0%
    #####: 1092:    void CloseConnection() override {
    #####: 1093:      GTEST_CHECK_(sockfd_ != -1)
    %%%%%: 1093-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1093-block  1
call    3 never executed
call    4 never executed
    %%%%%: 1093-block  2
call    5 never executed
    $$$$$: 1093-block  3
call    6 never executed
    #####: 1094:          << "CloseConnection() can be called only when there is a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1094-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:
    #####: 1096:      close(sockfd_);
    %%%%%: 1096-block  0
call    0 never executed
    #####: 1097:      sockfd_ = -1;
    #####: 1098:    }
        -: 1099:
        -: 1100:    int sockfd_;  // socket file descriptor
        -: 1101:    const std::string host_name_;
        -: 1102:    const std::string port_num_;
        -: 1103:
        -: 1104:    GTEST_DISALLOW_COPY_AND_ASSIGN_(SocketWriter);
        -: 1105:  };  // class SocketWriter
        -: 1106:
        -: 1107:  // Escapes '=', '&', '%', and '\n' characters in str as "%xx".
        -: 1108:  static std::string UrlEncode(const char* str);
        -: 1109:
function _ZN7testing8internal17StreamingListenerC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1110:  StreamingListener(const std::string& host, const std::string& port)
    #####: 1111:      : socket_writer_(new SocketWriter(host, port)) {
    %%%%%: 1111-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1111-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1111-block  2
call    7 never executed
    $$$$$: 1111-block  3
call    8 never executed
    $$$$$: 1111-block  4
call    9 never executed
    $$$$$: 1111-block  5
call   10 never executed
    #####: 1112:    Start();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1113:  }
    %%%%%: 1113-block  0
        -: 1114:
        -: 1115:  explicit StreamingListener(AbstractSocketWriter* socket_writer)
        -: 1116:      : socket_writer_(socket_writer) {
        -: 1117:    Start();
        -: 1118:  }
        -: 1119:
function _ZN7testing8internal17StreamingListener18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 1120:  void OnTestProgramStart(const UnitTest& /* unit_test */) override {
    #####: 1121:    SendLn("event=TestProgramStart");
    %%%%%: 1121-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1121-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1121-block  2
call    7 never executed
call    8 never executed
    $$$$$: 1121-block  3
call    9 never executed
    $$$$$: 1121-block  4
    $$$$$: 1121-block  5
call   10 never executed
    #####: 1122:  }
        -: 1123:
function _ZN7testing8internal17StreamingListener16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 1124:  void OnTestProgramEnd(const UnitTest& unit_test) override {
        -: 1125:    // Note that Google Test current only report elapsed time for each
        -: 1126:    // test iteration, not for the entire test program.
    #####: 1127:    SendLn("event=TestProgramEnd&passed=" + FormatBool(unit_test.Passed()));
    %%%%%: 1127-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1127-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1127-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1127-block  3
call   10 never executed
    $$$$$: 1127-block  4
    $$$$$: 1127-block  5
call   11 never executed
        -: 1128:
        -: 1129:    // Notify the streaming server to stop.
    #####: 1130:    socket_writer_->CloseConnection();
call    0 never executed
call    1 never executed
    #####: 1131:  }
        -: 1132:
function _ZN7testing8internal17StreamingListener20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 1133:  void OnTestIterationStart(const UnitTest& /* unit_test */,
        -: 1134:                            int iteration) override {
    #####: 1135:    SendLn("event=TestIterationStart&iteration=" +
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1135-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1135-block  1
call    6 never executed
    $$$$$: 1135-block  2
call    7 never executed
    $$$$$: 1135-block  3
    #####: 1136:           StreamableToString(iteration));
    %%%%%: 1136-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1136-block  1
call    2 never executed
    #####: 1137:  }
        -: 1138:
function _ZN7testing8internal17StreamingListener18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 1139:  void OnTestIterationEnd(const UnitTest& unit_test,
        -: 1140:                          int /* iteration */) override {
    #####: 1141:    SendLn("event=TestIterationEnd&passed=" + FormatBool(unit_test.Passed()) +
    %%%%%: 1141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1141-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1141-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1141-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1141-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 1141-block  5
call   17 never executed
    $$$$$: 1141-block  6
    $$$$$: 1141-block  7
call   18 never executed
    $$$$$: 1141-block  8
    $$$$$: 1141-block  9
call   19 never executed
    $$$$$: 1141-block 10
    #####: 1142:           "&elapsed_time=" + StreamableToString(unit_test.elapsed_time()) +
    %%%%%: 1142-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1142-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1142-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1142-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1142-block  4
call   14 never executed
    $$$$$: 1142-block  5
    $$$$$: 1142-block  6
call   15 never executed
    $$$$$: 1142-block  7
    $$$$$: 1142-block  8
call   16 never executed
    $$$$$: 1142-block  9
        -: 1143:           "ms");
    #####: 1144:  }
        -: 1145:
        -: 1146:  // Note that "event=TestCaseStart" is a wire format and has to remain
        -: 1147:  // "case" for compatibility
function _ZN7testing8internal17StreamingListener16OnTestSuiteStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 1148:  void OnTestSuiteStart(const TestSuite& test_suite) override {
    #####: 1149:    SendLn(std::string("event=TestCaseStart&name=") + test_suite.name());
    %%%%%: 1149-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1149-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1149-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1149-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1149-block  4
call   14 never executed
    $$$$$: 1149-block  5
    $$$$$: 1149-block  6
call   15 never executed
    $$$$$: 1149-block  7
    $$$$$: 1149-block  8
call   16 never executed
    #####: 1150:  }
        -: 1151:
        -: 1152:  // Note that "event=TestCaseEnd" is a wire format and has to remain
        -: 1153:  // "case" for compatibility
function _ZN7testing8internal17StreamingListener14OnTestSuiteEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 1154:  void OnTestSuiteEnd(const TestSuite& test_suite) override {
    #####: 1155:    SendLn("event=TestCaseEnd&passed=" + FormatBool(test_suite.Passed()) +
    %%%%%: 1155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1155-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1155-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1155-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1155-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 1155-block  5
call   17 never executed
    $$$$$: 1155-block  6
    $$$$$: 1155-block  7
call   18 never executed
    $$$$$: 1155-block  8
    $$$$$: 1155-block  9
call   19 never executed
    $$$$$: 1155-block 10
    #####: 1156:           "&elapsed_time=" + StreamableToString(test_suite.elapsed_time()) +
    %%%%%: 1156-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1156-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1156-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1156-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1156-block  4
call   14 never executed
    $$$$$: 1156-block  5
    $$$$$: 1156-block  6
call   15 never executed
    $$$$$: 1156-block  7
    $$$$$: 1156-block  8
call   16 never executed
    $$$$$: 1156-block  9
        -: 1157:           "ms");
    #####: 1158:  }
        -: 1159:
function _ZN7testing8internal17StreamingListener11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 1160:  void OnTestStart(const TestInfo& test_info) override {
    #####: 1161:    SendLn(std::string("event=TestStart&name=") + test_info.name());
    %%%%%: 1161-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1161-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1161-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1161-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1161-block  4
call   14 never executed
    $$$$$: 1161-block  5
    $$$$$: 1161-block  6
call   15 never executed
    $$$$$: 1161-block  7
    $$$$$: 1161-block  8
call   16 never executed
    #####: 1162:  }
        -: 1163:
function _ZN7testing8internal17StreamingListener9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 1164:  void OnTestEnd(const TestInfo& test_info) override {
    #####: 1165:    SendLn("event=TestEnd&passed=" +
    %%%%%: 1165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1165-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1165-block  2
call    6 never executed
    $$$$$: 1165-block  3
    #####: 1166:           FormatBool((test_info.result())->Passed()) + "&elapsed_time=" +
    %%%%%: 1166-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1166-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1166-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1166-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 1166-block  4
call   16 never executed
    $$$$$: 1166-block  5
    $$$$$: 1166-block  6
call   17 never executed
    $$$$$: 1166-block  7
    $$$$$: 1166-block  8
call   18 never executed
    $$$$$: 1166-block  9
    #####: 1167:           StreamableToString((test_info.result())->elapsed_time()) + "ms");
    %%%%%: 1167-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1167-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1167-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 1167-block  3
call   11 never executed
    $$$$$: 1167-block  4
    $$$$$: 1167-block  5
call   12 never executed
    $$$$$: 1167-block  6
    #####: 1168:  }
        -: 1169:
function _ZN7testing8internal17StreamingListener16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1170:  void OnTestPartResult(const TestPartResult& test_part_result) override {
    #####: 1171:    const char* file_name = test_part_result.file_name();
    %%%%%: 1171-block  0
call    0 never executed
    #####: 1172:    if (file_name == nullptr) file_name = "";
branch  0 never executed
branch  1 never executed
    %%%%%: 1172-block  0
    #####: 1173:    SendLn("event=TestPartResult&file=" + UrlEncode(file_name) +
    %%%%%: 1173-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1173-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1173-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1173-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1173-block  4
call   14 never executed
    $$$$$: 1173-block  5
    $$$$$: 1173-block  6
call   15 never executed
    $$$$$: 1173-block  7
    $$$$$: 1173-block  8
call   16 never executed
    $$$$$: 1173-block  9
    #####: 1174:           "&line=" + StreamableToString(test_part_result.line_number()) +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1174-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1174-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1174-block  2
call   13 never executed
    $$$$$: 1174-block  3
    $$$$$: 1174-block  4
call   14 never executed
    $$$$$: 1174-block  5
    $$$$$: 1174-block  6
call   15 never executed
    $$$$$: 1174-block  7
    $$$$$: 1174-block  8
    #####: 1175:           "&message=" + UrlEncode(test_part_result.message()));
    %%%%%: 1175-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1175-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1175-block  2
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 1175-block  3
call    8 never executed
    $$$$$: 1175-block  4
    $$$$$: 1175-block  5
call    9 never executed
    #####: 1176:  }
        -: 1177:
        -: 1178: private:
        -: 1179:  // Sends the given message and a newline to the socket.
function _ZN7testing8internal17StreamingListener6SendLnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1180:  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }
    %%%%%: 1180-block  0
call    0 never executed
call    1 never executed
        -: 1181:
        -: 1182:  // Called at the start of streaming to notify the receiver what
        -: 1183:  // protocol we are using.
function _ZN7testing8internal17StreamingListener5StartEv called 0 returned 0% blocks executed 0%
    #####: 1184:  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }
    %%%%%: 1184-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1184-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1184-block  2
call    7 never executed
call    8 never executed
    $$$$$: 1184-block  3
call    9 never executed
    $$$$$: 1184-block  4
    $$$$$: 1184-block  5
call   10 never executed
        -: 1185:
function _ZN7testing8internal17StreamingListener10FormatBoolB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####: 1186:  std::string FormatBool(bool value) { return value ? "1" : "0"; }
    %%%%%: 1186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1186-block  1
    %%%%%: 1186-block  2
    %%%%%: 1186-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1186-block  4
call    6 never executed
    %%%%%: 1186-block  5
    $$$$$: 1186-block  6
call    7 never executed
        -: 1187:
        -: 1188:  const std::unique_ptr<AbstractSocketWriter> socket_writer_;
        -: 1189:
        -: 1190:  GTEST_DISALLOW_COPY_AND_ASSIGN_(StreamingListener);
        -: 1191:};  // class StreamingListener
        -: 1192:
        -: 1193:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 1194:
        -: 1195:}  // namespace internal
        -: 1196:}  // namespace testing
        -: 1197:
        -: 1198:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -: 1199:
        -: 1200:#endif  // GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_
