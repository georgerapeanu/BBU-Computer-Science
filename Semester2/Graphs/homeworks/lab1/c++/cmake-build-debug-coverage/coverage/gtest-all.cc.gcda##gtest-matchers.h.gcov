        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/tests/googletest/googletest/include/gtest/gtest-matchers.h
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/Graphs/homeworks/lab1/c++/cmake-build-debug-coverage/tests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2007, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   31://
        -:   32:// This file implements just enough of the matcher interface to allow
        -:   33:// EXPECT_DEATH and friends to accept a matcher argument.
        -:   34:
        -:   35:// IWYU pragma: private, include "gtest/gtest.h"
        -:   36:// IWYU pragma: friend gtest/.*
        -:   37:// IWYU pragma: friend gmock/.*
        -:   38:
        -:   39:#ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_
        -:   40:#define GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_
        -:   41:
        -:   42:#include <atomic>
        -:   43:#include <memory>
        -:   44:#include <ostream>
        -:   45:#include <string>
        -:   46:#include <type_traits>
        -:   47:
        -:   48:#include "gtest/gtest-printers.h"
        -:   49:#include "gtest/internal/gtest-internal.h"
        -:   50:#include "gtest/internal/gtest-port.h"
        -:   51:
        -:   52:// MSVC warning C5046 is new as of VS2017 version 15.8.
        -:   53:#if defined(_MSC_VER) && _MSC_VER >= 1915
        -:   54:#define GTEST_MAYBE_5046_ 5046
        -:   55:#else
        -:   56:#define GTEST_MAYBE_5046_
        -:   57:#endif
        -:   58:
        -:   59:GTEST_DISABLE_MSC_WARNINGS_PUSH_(
        -:   60:    4251 GTEST_MAYBE_5046_ /* class A needs to have dll-interface to be used by
        -:   61:                              clients of class B */
        -:   62:    /* Symbol involving type with internal linkage not defined */)
        -:   63:
        -:   64:namespace testing {
        -:   65:
        -:   66:// To implement a matcher Foo for type T, define:
        -:   67://   1. a class FooMatcherMatcher that implements the matcher interface:
        -:   68://     using is_gtest_matcher = void;
        -:   69://     bool MatchAndExplain(const T&, std::ostream*);
        -:   70://       (MatchResultListener* can also be used instead of std::ostream*)
        -:   71://     void DescribeTo(std::ostream*);
        -:   72://     void DescribeNegationTo(std::ostream*);
        -:   73://
        -:   74://   2. a factory function that creates a Matcher<T> object from a
        -:   75://      FooMatcherMatcher.
        -:   76:
        -:   77:class MatchResultListener {
        -:   78: public:
        -:   79:  // Creates a listener object with the given underlying ostream.  The
        -:   80:  // listener does not own the ostream, and does not dereference it
        -:   81:  // in the constructor or destructor.
function _ZN7testing19MatchResultListenerC2EPSo called 0 returned 0% blocks executed 0%
    #####:   82:  explicit MatchResultListener(::std::ostream* os) : stream_(os) {}
        -:   83:  virtual ~MatchResultListener() = 0;  // Makes this class abstract.
        -:   84:
        -:   85:  // Streams x to the underlying ostream; does nothing if the ostream
        -:   86:  // is NULL.
        -:   87:  template <typename T>
        -:   88:  MatchResultListener& operator<<(const T& x) {
        -:   89:    if (stream_ != nullptr) *stream_ << x;
        -:   90:    return *this;
        -:   91:  }
        -:   92:
        -:   93:  // Returns the underlying ostream.
function _ZN7testing19MatchResultListener6streamEv called 0 returned 0% blocks executed 0%
    #####:   94:  ::std::ostream* stream() { return stream_; }
    %%%%%:   94-block  0
        -:   95:
        -:   96:  // Returns true if and only if the listener is interested in an explanation
        -:   97:  // of the match result.  A matcher's MatchAndExplain() method can use
        -:   98:  // this information to avoid generating the explanation when no one
        -:   99:  // intends to hear it.
        -:  100:  bool IsInterested() const { return stream_ != nullptr; }
        -:  101:
        -:  102: private:
        -:  103:  ::std::ostream* const stream_;
        -:  104:
        -:  105:  GTEST_DISALLOW_COPY_AND_ASSIGN_(MatchResultListener);
        -:  106:};
        -:  107:
    #####:  108:inline MatchResultListener::~MatchResultListener() {}
------------------
_ZN7testing19MatchResultListenerD0Ev:
function _ZN7testing19MatchResultListenerD0Ev called 0 returned 0% blocks executed 0%
    #####:  108:inline MatchResultListener::~MatchResultListener() {}
    %%%%%:  108-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing19MatchResultListenerD2Ev:
function _ZN7testing19MatchResultListenerD2Ev called 0 returned 0% blocks executed 0%
    #####:  108:inline MatchResultListener::~MatchResultListener() {}
------------------
        -:  109:
        -:  110:// An instance of a subclass of this knows how to describe itself as a
        -:  111:// matcher.
        -:  112:class GTEST_API_ MatcherDescriberInterface {
        -:  113: public:
    #####:  114:  virtual ~MatcherDescriberInterface() {}
------------------
_ZN7testing25MatcherDescriberInterfaceD0Ev:
function _ZN7testing25MatcherDescriberInterfaceD0Ev called 0 returned 0% blocks executed 0%
    #####:  114:  virtual ~MatcherDescriberInterface() {}
    %%%%%:  114-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing25MatcherDescriberInterfaceD2Ev:
function _ZN7testing25MatcherDescriberInterfaceD2Ev called 0 returned 0% blocks executed 0%
    #####:  114:  virtual ~MatcherDescriberInterface() {}
------------------
        -:  115:
        -:  116:  // Describes this matcher to an ostream.  The function should print
        -:  117:  // a verb phrase that describes the property a value matching this
        -:  118:  // matcher should have.  The subject of the verb phrase is the value
        -:  119:  // being matched.  For example, the DescribeTo() method of the Gt(7)
        -:  120:  // matcher prints "is greater than 7".
        -:  121:  virtual void DescribeTo(::std::ostream* os) const = 0;
        -:  122:
        -:  123:  // Describes the negation of this matcher to an ostream.  For
        -:  124:  // example, if the description of this matcher is "is greater than
        -:  125:  // 7", the negated description could be "is not greater than 7".
        -:  126:  // You are not required to override this when implementing
        -:  127:  // MatcherInterface, but it is highly advised so that your matcher
        -:  128:  // can produce good error messages.
function _ZNK7testing25MatcherDescriberInterface18DescribeNegationToEPSo called 0 returned 0% blocks executed 0%
    #####:  129:  virtual void DescribeNegationTo(::std::ostream* os) const {
    #####:  130:    *os << "not (";
    %%%%%:  130-block  0
call    0 never executed
    #####:  131:    DescribeTo(os);
call    0 never executed
    #####:  132:    *os << ")";
call    0 never executed
    #####:  133:  }
        -:  134:};
        -:  135:
        -:  136:// The implementation of a matcher.
        -:  137:template <typename T>
        -:  138:class MatcherInterface : public MatcherDescriberInterface {
        -:  139: public:
        -:  140:  // Returns true if and only if the matcher matches x; also explains the
        -:  141:  // match result to 'listener' if necessary (see the next paragraph), in
        -:  142:  // the form of a non-restrictive relative clause ("which ...",
        -:  143:  // "whose ...", etc) that describes x.  For example, the
        -:  144:  // MatchAndExplain() method of the Pointee(...) matcher should
        -:  145:  // generate an explanation like "which points to ...".
        -:  146:  //
        -:  147:  // Implementations of MatchAndExplain() should add an explanation of
        -:  148:  // the match result *if and only if* they can provide additional
        -:  149:  // information that's not already present (or not obvious) in the
        -:  150:  // print-out of x and the matcher's description.  Whether the match
        -:  151:  // succeeds is not a factor in deciding whether an explanation is
        -:  152:  // needed, as sometimes the caller needs to print a failure message
        -:  153:  // when the match succeeds (e.g. when the matcher is used inside
        -:  154:  // Not()).
        -:  155:  //
        -:  156:  // For example, a "has at least 10 elements" matcher should explain
        -:  157:  // what the actual element count is, regardless of the match result,
        -:  158:  // as it is useful information to the reader; on the other hand, an
        -:  159:  // "is empty" matcher probably only needs to explain what the actual
        -:  160:  // size is when the match fails, as it's redundant to say that the
        -:  161:  // size is 0 when the value is already known to be empty.
        -:  162:  //
        -:  163:  // You should override this method when defining a new matcher.
        -:  164:  //
        -:  165:  // It's the responsibility of the caller (Google Test) to guarantee
        -:  166:  // that 'listener' is not NULL.  This helps to simplify a matcher's
        -:  167:  // implementation when it doesn't care about the performance, as it
        -:  168:  // can talk to 'listener' without checking its validity first.
        -:  169:  // However, in order to implement dummy listeners efficiently,
        -:  170:  // listener->stream() may be NULL.
        -:  171:  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;
        -:  172:
        -:  173:  // Inherits these methods from MatcherDescriberInterface:
        -:  174:  //   virtual void DescribeTo(::std::ostream* os) const = 0;
        -:  175:  //   virtual void DescribeNegationTo(::std::ostream* os) const;
        -:  176:};
        -:  177:
        -:  178:namespace internal {
        -:  179:
        -:  180:struct AnyEq {
        -:  181:  template <typename A, typename B>
function _ZNK7testing8internal5AnyEqclINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEbRKT_RKT0_ called 0 returned 0% blocks executed 0%
    #####:  182:  bool operator()(const A& a, const B& b) const {
    #####:  183:    return a == b;
    %%%%%:  183-block  0
call    0 never executed
        -:  184:  }
        -:  185:};
        -:  186:struct AnyNe {
        -:  187:  template <typename A, typename B>
        -:  188:  bool operator()(const A& a, const B& b) const {
        -:  189:    return a != b;
        -:  190:  }
        -:  191:};
        -:  192:struct AnyLt {
        -:  193:  template <typename A, typename B>
        -:  194:  bool operator()(const A& a, const B& b) const {
        -:  195:    return a < b;
        -:  196:  }
        -:  197:};
        -:  198:struct AnyGt {
        -:  199:  template <typename A, typename B>
        -:  200:  bool operator()(const A& a, const B& b) const {
        -:  201:    return a > b;
        -:  202:  }
        -:  203:};
        -:  204:struct AnyLe {
        -:  205:  template <typename A, typename B>
        -:  206:  bool operator()(const A& a, const B& b) const {
        -:  207:    return a <= b;
        -:  208:  }
        -:  209:};
        -:  210:struct AnyGe {
        -:  211:  template <typename A, typename B>
        -:  212:  bool operator()(const A& a, const B& b) const {
        -:  213:    return a >= b;
        -:  214:  }
        -:  215:};
        -:  216:
        -:  217:// A match result listener that ignores the explanation.
        -:  218:class DummyMatchResultListener : public MatchResultListener {
        -:  219: public:
function _ZN7testing8internal24DummyMatchResultListenerC2Ev called 0 returned 0% blocks executed 0%
    #####:  220:  DummyMatchResultListener() : MatchResultListener(nullptr) {}
    %%%%%:  220-block  0
call    0 never executed
        -:  221:
        -:  222: private:
        -:  223:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DummyMatchResultListener);
        -:  224:};
        -:  225:
        -:  226:// A match result listener that forwards the explanation to a given
        -:  227:// ostream.  The difference between this and MatchResultListener is
        -:  228:// that the former is concrete.
        -:  229:class StreamMatchResultListener : public MatchResultListener {
        -:  230: public:
        -:  231:  explicit StreamMatchResultListener(::std::ostream* os)
        -:  232:      : MatchResultListener(os) {}
        -:  233:
        -:  234: private:
        -:  235:  GTEST_DISALLOW_COPY_AND_ASSIGN_(StreamMatchResultListener);
        -:  236:};
        -:  237:
        -:  238:struct SharedPayloadBase {
        -:  239:  std::atomic<int> ref{1};
        -:  240:  void Ref() { ref.fetch_add(1, std::memory_order_relaxed); }
function _ZN7testing8internal17SharedPayloadBase5UnrefEv called 0 returned 0% blocks executed 0%
    #####:  241:  bool Unref() { return ref.fetch_sub(1, std::memory_order_acq_rel) == 1; }
    %%%%%:  241-block  0
    %%%%%:  241-block  1
        -:  242:};
        -:  243:
        -:  244:template <typename T>
        -:  245:struct SharedPayload : SharedPayloadBase {
        -:  246:  explicit SharedPayload(const T& v) : value(v) {}
function _ZN7testing8internal13SharedPayloadINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2EOS9_ called 0 returned 0% blocks executed 0%
    #####:  247:  explicit SharedPayload(T&& v) : value(std::move(v)) {}
    %%%%%:  247-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  248:
function _ZN7testing8internal13SharedPayloadINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7DestroyEPNS0_17SharedPayloadBaseE called 0 returned 0% blocks executed 0%
    #####:  249:  static void Destroy(SharedPayloadBase* shared) {
    #####:  250:    delete static_cast<SharedPayload*>(shared);
    %%%%%:  250-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  250-block  1
call    2 never executed
call    3 never executed
    #####:  251:  }
        -:  252:
        -:  253:  T value;
        -:  254:};
        -:  255:
        -:  256:// An internal class for implementing Matcher<T>, which will derive
        -:  257:// from it.  We put functionalities common to all Matcher<T>
        -:  258:// specializations here to avoid code duplication.
        -:  259:template <typename T>
        -:  260:class MatcherBase : private MatcherDescriberInterface {
        -:  261: public:
        -:  262:  // Returns true if and only if the matcher matches x; also explains the
        -:  263:  // match result to 'listener'.
function _ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE15MatchAndExplainES9_PNS_19MatchResultListenerE called 0 returned 0% blocks executed 0%
    #####:  264:  bool MatchAndExplain(const T& x, MatchResultListener* listener) const {
    #####:  265:    GTEST_CHECK_(vtable_ != nullptr);
    %%%%%:  265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  265-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  265-block  2
call    8 never executed
    $$$$$:  265-block  3
call    9 never executed
    #####:  266:    return vtable_->match_and_explain(*this, x, listener);
    %%%%%:  266-block  0
call    0 never executed
    %%%%%:  266-block  1
        -:  267:  }
        -:  268:
        -:  269:  // Returns true if and only if this matcher matches x.
function _ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7MatchesES9_ called 0 returned 0% blocks executed 0%
    #####:  270:  bool Matches(const T& x) const {
    #####:  271:    DummyMatchResultListener dummy;
    %%%%%:  271-block  0
call    0 never executed
    $$$$$:  271-block  1
call    1 never executed
    #####:  272:    return MatchAndExplain(x, &dummy);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  272-block  0
call    3 never executed
    %%%%%:  272-block  1
        -:  273:  }
        -:  274:
        -:  275:  // Describes this matcher to an ostream.
    #####:  276:  void DescribeTo(::std::ostream* os) const final {
    #####:  277:    GTEST_CHECK_(vtable_ != nullptr);
    #####:  278:    vtable_->describe(*this, os, false);
    #####:  279:  }
------------------
_ZNK7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10DescribeToEPSo:
function _ZNK7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10DescribeToEPSo called 0 returned 0% blocks executed 0%
    #####:  276:  void DescribeTo(::std::ostream* os) const final {
    #####:  277:    GTEST_CHECK_(vtable_ != nullptr);
    %%%%%:  277-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  277-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  277-block  2
call    8 never executed
    $$$$$:  277-block  3
call    9 never executed
    #####:  278:    vtable_->describe(*this, os, false);
    %%%%%:  278-block  0
call    0 never executed
    #####:  279:  }
------------------
_ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10DescribeToEPSo:
function _ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10DescribeToEPSo called 0 returned 0% blocks executed 0%
    #####:  276:  void DescribeTo(::std::ostream* os) const final {
    #####:  277:    GTEST_CHECK_(vtable_ != nullptr);
    %%%%%:  277-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  277-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  277-block  2
call    8 never executed
    $$$$$:  277-block  3
call    9 never executed
    #####:  278:    vtable_->describe(*this, os, false);
    %%%%%:  278-block  0
call    0 never executed
    #####:  279:  }
------------------
        -:  280:
        -:  281:  // Describes the negation of this matcher to an ostream.
    #####:  282:  void DescribeNegationTo(::std::ostream* os) const final {
    #####:  283:    GTEST_CHECK_(vtable_ != nullptr);
    #####:  284:    vtable_->describe(*this, os, true);
    #####:  285:  }
------------------
_ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE18DescribeNegationToEPSo:
function _ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE18DescribeNegationToEPSo called 0 returned 0% blocks executed 0%
    #####:  282:  void DescribeNegationTo(::std::ostream* os) const final {
    #####:  283:    GTEST_CHECK_(vtable_ != nullptr);
    %%%%%:  283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  283-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  283-block  2
call    8 never executed
    $$$$$:  283-block  3
call    9 never executed
    #####:  284:    vtable_->describe(*this, os, true);
    %%%%%:  284-block  0
call    0 never executed
    #####:  285:  }
------------------
_ZNK7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE18DescribeNegationToEPSo:
function _ZNK7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE18DescribeNegationToEPSo called 0 returned 0% blocks executed 0%
    #####:  282:  void DescribeNegationTo(::std::ostream* os) const final {
    #####:  283:    GTEST_CHECK_(vtable_ != nullptr);
    %%%%%:  283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  283-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  283-block  2
call    8 never executed
    $$$$$:  283-block  3
call    9 never executed
    #####:  284:    vtable_->describe(*this, os, true);
    %%%%%:  284-block  0
call    0 never executed
    #####:  285:  }
------------------
        -:  286:
        -:  287:  // Explains why x matches, or doesn't match, the matcher.
        -:  288:  void ExplainMatchResultTo(const T& x, ::std::ostream* os) const {
        -:  289:    StreamMatchResultListener listener(os);
        -:  290:    MatchAndExplain(x, &listener);
        -:  291:  }
        -:  292:
        -:  293:  // Returns the describer for this matcher object; retains ownership
        -:  294:  // of the describer, which is only guaranteed to be alive when
        -:  295:  // this matcher object is alive.
        -:  296:  const MatcherDescriberInterface* GetDescriber() const {
        -:  297:    if (vtable_ == nullptr) return nullptr;
        -:  298:    return vtable_->get_describer(*this);
        -:  299:  }
        -:  300:
        -:  301: protected:
    #####:  302:  MatcherBase() : vtable_(nullptr) {}
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:  302:  MatcherBase() : vtable_(nullptr) {}
    %%%%%:  302-block  0
call    0 never executed
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:  302:  MatcherBase() : vtable_(nullptr) {}
    %%%%%:  302-block  0
call    0 never executed
------------------
        -:  303:
        -:  304:  // Constructs a matcher from its implementation.
        -:  305:  template <typename U>
        -:  306:  explicit MatcherBase(const MatcherInterface<U>* impl) {
        -:  307:    Init(impl);
        -:  308:  }
        -:  309:
        -:  310:  template <typename M, typename = typename std::remove_reference<
        -:  311:                            M>::type::is_gtest_matcher>
    #####:  312:  MatcherBase(M&& m) {  // NOLINT
    #####:  313:    Init(std::forward<M>(m));
    #####:  314:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2INS0_9EqMatcherIS7_EEvEEOT_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2INS0_9EqMatcherIS7_EEvEEOT_ called 0 returned 0% blocks executed 0%
    #####:  312:  MatcherBase(M&& m) {  // NOLINT
    %%%%%:  312-block  0
call    0 never executed
    $$$$$:  312-block  1
call    1 never executed
    #####:  313:    Init(std::forward<M>(m));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  314:  }
    %%%%%:  314-block  0
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2INS0_9EqMatcherIS7_EEvEEOT_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2INS0_9EqMatcherIS7_EEvEEOT_ called 0 returned 0% blocks executed 0%
    #####:  312:  MatcherBase(M&& m) {  // NOLINT
    %%%%%:  312-block  0
call    0 never executed
    $$$$$:  312-block  1
call    1 never executed
    #####:  313:    Init(std::forward<M>(m));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  314:  }
    %%%%%:  314-block  0
------------------
        -:  315:
        -:  316:  MatcherBase(const MatcherBase& other)
        -:  317:      : vtable_(other.vtable_), buffer_(other.buffer_) {
        -:  318:    if (IsShared()) buffer_.shared->Ref();
        -:  319:  }
        -:  320:
        -:  321:  MatcherBase& operator=(const MatcherBase& other) {
        -:  322:    if (this == &other) return *this;
        -:  323:    Destroy();
        -:  324:    vtable_ = other.vtable_;
        -:  325:    buffer_ = other.buffer_;
        -:  326:    if (IsShared()) buffer_.shared->Ref();
        -:  327:    return *this;
        -:  328:  }
        -:  329:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2EOSA_ called 0 returned 0% blocks executed 0%
    #####:  330:  MatcherBase(MatcherBase&& other)
    #####:  331:      : vtable_(other.vtable_), buffer_(other.buffer_) {
    %%%%%:  331-block  0
call    0 never executed
    #####:  332:    other.vtable_ = nullptr;
    #####:  333:  }
        -:  334:
    #####:  335:  MatcherBase& operator=(MatcherBase&& other) {
    #####:  336:    if (this == &other) return *this;
    #####:  337:    Destroy();
    #####:  338:    vtable_ = other.vtable_;
    #####:  339:    buffer_ = other.buffer_;
    #####:  340:    other.vtable_ = nullptr;
    #####:  341:    return *this;
        -:  342:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEaSEOS8_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEaSEOS8_ called 0 returned 0% blocks executed 0%
    #####:  335:  MatcherBase& operator=(MatcherBase&& other) {
    #####:  336:    if (this == &other) return *this;
    %%%%%:  336-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  336-block  1
    #####:  337:    Destroy();
    %%%%%:  337-block  0
call    0 never executed
    #####:  338:    vtable_ = other.vtable_;
    #####:  339:    buffer_ = other.buffer_;
    #####:  340:    other.vtable_ = nullptr;
    #####:  341:    return *this;
        -:  342:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEaSEOSA_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEaSEOSA_ called 0 returned 0% blocks executed 0%
    #####:  335:  MatcherBase& operator=(MatcherBase&& other) {
    #####:  336:    if (this == &other) return *this;
    %%%%%:  336-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  336-block  1
    #####:  337:    Destroy();
    %%%%%:  337-block  0
call    0 never executed
    #####:  338:    vtable_ = other.vtable_;
    #####:  339:    buffer_ = other.buffer_;
    #####:  340:    other.vtable_ = nullptr;
    #####:  341:    return *this;
        -:  342:  }
------------------
        -:  343:
    #####:  344:  ~MatcherBase() override { Destroy(); }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev called 0 returned 0% blocks executed 0%
    #####:  344:  ~MatcherBase() override { Destroy(); }
    %%%%%:  344-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  344:  ~MatcherBase() override { Destroy(); }
    %%%%%:  344-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev called 0 returned 0% blocks executed 0%
    #####:  344:  ~MatcherBase() override { Destroy(); }
    %%%%%:  344-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  344:  ~MatcherBase() override { Destroy(); }
    %%%%%:  344-block  0
call    0 never executed
call    1 never executed
------------------
        -:  345:
        -:  346: private:
        -:  347:  struct VTable {
        -:  348:    bool (*match_and_explain)(const MatcherBase&, const T&,
        -:  349:                              MatchResultListener*);
        -:  350:    void (*describe)(const MatcherBase&, std::ostream*, bool negation);
        -:  351:    // Returns the captured object if it implements the interface, otherwise
        -:  352:    // returns the MatcherBase itself.
        -:  353:    const MatcherDescriberInterface* (*get_describer)(const MatcherBase&);
        -:  354:    // Called on shared instances when the reference count reaches 0.
        -:  355:    void (*shared_destroy)(SharedPayloadBase*);
        -:  356:  };
        -:  357:
    #####:  358:  bool IsShared() const {
    #####:  359:    return vtable_ != nullptr && vtable_->shared_destroy != nullptr;
        -:  360:  }
------------------
_ZNK7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8IsSharedEv:
function _ZNK7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8IsSharedEv called 0 returned 0% blocks executed 0%
    #####:  358:  bool IsShared() const {
    #####:  359:    return vtable_ != nullptr && vtable_->shared_destroy != nullptr;
    %%%%%:  359-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  359-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  359-block  2
    %%%%%:  359-block  3
    %%%%%:  359-block  4
        -:  360:  }
------------------
_ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8IsSharedEv:
function _ZNK7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8IsSharedEv called 0 returned 0% blocks executed 0%
    #####:  358:  bool IsShared() const {
    #####:  359:    return vtable_ != nullptr && vtable_->shared_destroy != nullptr;
    %%%%%:  359-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  359-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  359-block  2
    %%%%%:  359-block  3
    %%%%%:  359-block  4
        -:  360:  }
------------------
        -:  361:
        -:  362:  // If the implementation uses a listener, call that.
        -:  363:  template <typename P>
    #####:  364:  static auto MatchAndExplainImpl(const MatcherBase& m, const T& value,
        -:  365:                                  MatchResultListener* listener)
        -:  366:      -> decltype(P::Get(m).MatchAndExplain(value, listener->stream())) {
    #####:  367:    return P::Get(m).MatchAndExplain(value, listener->stream());
        -:  368:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE19MatchAndExplainImplINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEDTcldtclsrT_3Getfp_E15MatchAndExplainfp0_clptfp1_L_ZNS_19MatchResultListener6streamEvEEEERKS8_RKS7_PSF_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE19MatchAndExplainImplINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEDTcldtclsrT_3Getfp_E15MatchAndExplainfp0_clptfp1_L_ZNS_19MatchResultListener6streamEvEEEERKS8_RKS7_PSF_ called 0 returned 0% blocks executed 0%
    #####:  364:  static auto MatchAndExplainImpl(const MatcherBase& m, const T& value,
        -:  365:                                  MatchResultListener* listener)
        -:  366:      -> decltype(P::Get(m).MatchAndExplain(value, listener->stream())) {
    #####:  367:    return P::Get(m).MatchAndExplain(value, listener->stream());
    %%%%%:  367-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  368:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE19MatchAndExplainImplINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEDTcldtclsrT_3Getfp_E15MatchAndExplainfp0_clptfp1_L_ZNS_19MatchResultListener6streamEvEEEERKSA_S9_PSH_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE19MatchAndExplainImplINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEDTcldtclsrT_3Getfp_E15MatchAndExplainfp0_clptfp1_L_ZNS_19MatchResultListener6streamEvEEEERKSA_S9_PSH_ called 0 returned 0% blocks executed 0%
    #####:  364:  static auto MatchAndExplainImpl(const MatcherBase& m, const T& value,
        -:  365:                                  MatchResultListener* listener)
        -:  366:      -> decltype(P::Get(m).MatchAndExplain(value, listener->stream())) {
    #####:  367:    return P::Get(m).MatchAndExplain(value, listener->stream());
    %%%%%:  367-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  368:  }
------------------
        -:  369:
        -:  370:  template <typename P>
        -:  371:  static auto MatchAndExplainImpl(const MatcherBase& m, const T& value,
        -:  372:                                  MatchResultListener* listener)
        -:  373:      -> decltype(P::Get(m).MatchAndExplain(value, listener)) {
        -:  374:    return P::Get(m).MatchAndExplain(value, listener);
        -:  375:  }
        -:  376:
        -:  377:  template <typename P>
    #####:  378:  static void DescribeImpl(const MatcherBase& m, std::ostream* os,
        -:  379:                           bool negation) {
    #####:  380:    if (negation) {
    #####:  381:      P::Get(m).DescribeNegationTo(os);
        -:  382:    } else {
    #####:  383:      P::Get(m).DescribeTo(os);
        -:  384:    }
    #####:  385:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12DescribeImplINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEvRKS8_PSob:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12DescribeImplINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEvRKS8_PSob called 0 returned 0% blocks executed 0%
    #####:  378:  static void DescribeImpl(const MatcherBase& m, std::ostream* os,
        -:  379:                           bool negation) {
    #####:  380:    if (negation) {
    %%%%%:  380-block  0
branch  0 never executed
branch  1 never executed
    #####:  381:      P::Get(m).DescribeNegationTo(os);
    %%%%%:  381-block  0
call    0 never executed
call    1 never executed
        -:  382:    } else {
    #####:  383:      P::Get(m).DescribeTo(os);
    %%%%%:  383-block  0
call    0 never executed
call    1 never executed
        -:  384:    }
    #####:  385:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12DescribeImplINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEvRKSA_PSob:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12DescribeImplINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEvRKSA_PSob called 0 returned 0% blocks executed 0%
    #####:  378:  static void DescribeImpl(const MatcherBase& m, std::ostream* os,
        -:  379:                           bool negation) {
    #####:  380:    if (negation) {
    %%%%%:  380-block  0
branch  0 never executed
branch  1 never executed
    #####:  381:      P::Get(m).DescribeNegationTo(os);
    %%%%%:  381-block  0
call    0 never executed
call    1 never executed
        -:  382:    } else {
    #####:  383:      P::Get(m).DescribeTo(os);
    %%%%%:  383-block  0
call    0 never executed
call    1 never executed
        -:  384:    }
    #####:  385:  }
------------------
        -:  386:
        -:  387:  template <typename P>
    #####:  388:  static const MatcherDescriberInterface* GetDescriberImpl(
        -:  389:      const MatcherBase& m) {
        -:  390:    // If the impl is a MatcherDescriberInterface, then return it.
        -:  391:    // Otherwise use MatcherBase itself.
        -:  392:    // This allows us to implement the GetDescriber() function without support
        -:  393:    // from the impl, but some users really want to get their impl back when
        -:  394:    // they call GetDescriber().
        -:  395:    // We use std::get on a tuple as a workaround of not having `if constexpr`.
        -:  396:    return std::get<(
        -:  397:        std::is_convertible<decltype(&P::Get(m)),
        -:  398:                            const MatcherDescriberInterface*>::value
        -:  399:            ? 1
    #####:  400:            : 0)>(std::make_tuple(&m, &P::Get(m)));
        -:  401:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE16GetDescriberImplINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNS_25MatcherDescriberInterfaceERKS8_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE16GetDescriberImplINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNS_25MatcherDescriberInterfaceERKS8_ called 0 returned 0% blocks executed 0%
    #####:  388:  static const MatcherDescriberInterface* GetDescriberImpl(
        -:  389:      const MatcherBase& m) {
        -:  390:    // If the impl is a MatcherDescriberInterface, then return it.
        -:  391:    // Otherwise use MatcherBase itself.
        -:  392:    // This allows us to implement the GetDescriber() function without support
        -:  393:    // from the impl, but some users really want to get their impl back when
        -:  394:    // they call GetDescriber().
        -:  395:    // We use std::get on a tuple as a workaround of not having `if constexpr`.
        -:  396:    return std::get<(
        -:  397:        std::is_convertible<decltype(&P::Get(m)),
        -:  398:                            const MatcherDescriberInterface*>::value
        -:  399:            ? 1
    #####:  400:            : 0)>(std::make_tuple(&m, &P::Get(m)));
    %%%%%:  400-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  400-block  1
call    4 never executed
    %%%%%:  400-block  2
    $$$$$:  400-block  3
        -:  401:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE16GetDescriberImplINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNS_25MatcherDescriberInterfaceERKSA_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE16GetDescriberImplINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNS_25MatcherDescriberInterfaceERKSA_ called 0 returned 0% blocks executed 0%
    #####:  388:  static const MatcherDescriberInterface* GetDescriberImpl(
        -:  389:      const MatcherBase& m) {
        -:  390:    // If the impl is a MatcherDescriberInterface, then return it.
        -:  391:    // Otherwise use MatcherBase itself.
        -:  392:    // This allows us to implement the GetDescriber() function without support
        -:  393:    // from the impl, but some users really want to get their impl back when
        -:  394:    // they call GetDescriber().
        -:  395:    // We use std::get on a tuple as a workaround of not having `if constexpr`.
        -:  396:    return std::get<(
        -:  397:        std::is_convertible<decltype(&P::Get(m)),
        -:  398:                            const MatcherDescriberInterface*>::value
        -:  399:            ? 1
    #####:  400:            : 0)>(std::make_tuple(&m, &P::Get(m)));
    %%%%%:  400-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  400-block  1
call    4 never executed
    %%%%%:  400-block  2
    $$$$$:  400-block  3
        -:  401:  }
------------------
        -:  402:
        -:  403:  template <typename P>
    #####:  404:  const VTable* GetVTable() {
        -:  405:    static constexpr VTable kVTable = {&MatchAndExplainImpl<P>,
        -:  406:                                       &DescribeImpl<P>, &GetDescriberImpl<P>,
        -:  407:                                       P::shared_destroy};
    #####:  408:    return &kVTable;
        -:  409:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9GetVTableINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNS8_6VTableEv:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9GetVTableINS8_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNS8_6VTableEv called 0 returned 0% blocks executed 0%
    #####:  404:  const VTable* GetVTable() {
        -:  405:    static constexpr VTable kVTable = {&MatchAndExplainImpl<P>,
        -:  406:                                       &DescribeImpl<P>, &GetDescriberImpl<P>,
        -:  407:                                       P::shared_destroy};
    #####:  408:    return &kVTable;
    %%%%%:  408-block  0
        -:  409:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9GetVTableINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNSA_6VTableEv:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9GetVTableINSA_11ValuePolicyINS0_9EqMatcherIS7_EELb0EEEEEPKNSA_6VTableEv called 0 returned 0% blocks executed 0%
    #####:  404:  const VTable* GetVTable() {
        -:  405:    static constexpr VTable kVTable = {&MatchAndExplainImpl<P>,
        -:  406:                                       &DescribeImpl<P>, &GetDescriberImpl<P>,
        -:  407:                                       P::shared_destroy};
    #####:  408:    return &kVTable;
    %%%%%:  408-block  0
        -:  409:  }
------------------
        -:  410:
        -:  411:  union Buffer {
        -:  412:    // Add some types to give Buffer some common alignment/size use cases.
        -:  413:    void* ptr;
        -:  414:    double d;
        -:  415:    int64_t i;
        -:  416:    // And add one for the out-of-line cases.
        -:  417:    SharedPayloadBase* shared;
        -:  418:  };
        -:  419:
    #####:  420:  void Destroy() {
    #####:  421:    if (IsShared() && buffer_.shared->Unref()) {
    #####:  422:      vtable_->shared_destroy(buffer_.shared);
        -:  423:    }
    #####:  424:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7DestroyEv:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7DestroyEv called 0 returned 0% blocks executed 0%
    #####:  420:  void Destroy() {
    #####:  421:    if (IsShared() && buffer_.shared->Unref()) {
    %%%%%:  421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  421-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  421-block  2
    %%%%%:  421-block  3
    %%%%%:  421-block  4
branch  6 never executed
branch  7 never executed
    #####:  422:      vtable_->shared_destroy(buffer_.shared);
    %%%%%:  422-block  0
call    0 never executed
        -:  423:    }
    #####:  424:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7DestroyEv:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7DestroyEv called 0 returned 0% blocks executed 0%
    #####:  420:  void Destroy() {
    #####:  421:    if (IsShared() && buffer_.shared->Unref()) {
    %%%%%:  421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  421-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  421-block  2
    %%%%%:  421-block  3
    %%%%%:  421-block  4
branch  6 never executed
branch  7 never executed
    #####:  422:      vtable_->shared_destroy(buffer_.shared);
    %%%%%:  422-block  0
call    0 never executed
        -:  423:    }
    #####:  424:  }
------------------
        -:  425:
        -:  426:  template <typename M>
        -:  427:  static constexpr bool IsInlined() {
        -:  428:    return sizeof(M) <= sizeof(Buffer) && alignof(M) <= alignof(Buffer) &&
        -:  429:           std::is_trivially_copy_constructible<M>::value &&
        -:  430:           std::is_trivially_destructible<M>::value;
        -:  431:  }
        -:  432:
        -:  433:  template <typename M, bool = MatcherBase::IsInlined<M>()>
        -:  434:  struct ValuePolicy {
        -:  435:    static const M& Get(const MatcherBase& m) {
        -:  436:      // When inlined along with Init, need to be explicit to avoid violating
        -:  437:      // strict aliasing rules.
        -:  438:      const M* ptr =
        -:  439:          static_cast<const M*>(static_cast<const void*>(&m.buffer_));
        -:  440:      return *ptr;
        -:  441:    }
        -:  442:    static void Init(MatcherBase& m, M impl) {
        -:  443:      ::new (static_cast<void*>(&m.buffer_)) M(impl);
        -:  444:    }
        -:  445:    static constexpr auto shared_destroy = nullptr;
        -:  446:  };
        -:  447:
        -:  448:  template <typename M>
        -:  449:  struct ValuePolicy<M, false> {
        -:  450:    using Shared = SharedPayload<M>;
    #####:  451:    static const M& Get(const MatcherBase& m) {
    #####:  452:      return static_cast<Shared*>(m.buffer_.shared)->value;
        -:  453:    }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE3GetERKS8_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE3GetERKS8_ called 0 returned 0% blocks executed 0%
    #####:  451:    static const M& Get(const MatcherBase& m) {
    #####:  452:      return static_cast<Shared*>(m.buffer_.shared)->value;
    %%%%%:  452-block  0
        -:  453:    }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE3GetERKSA_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE3GetERKSA_ called 0 returned 0% blocks executed 0%
    #####:  451:    static const M& Get(const MatcherBase& m) {
    #####:  452:      return static_cast<Shared*>(m.buffer_.shared)->value;
    %%%%%:  452-block  0
        -:  453:    }
------------------
        -:  454:    template <typename Arg>
    #####:  455:    static void Init(MatcherBase& m, Arg&& arg) {
    #####:  456:      m.buffer_.shared = new Shared(std::forward<Arg>(arg));
    #####:  457:    }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE4InitISB_EEvRS8_OT_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE4InitISB_EEvRS8_OT_ called 0 returned 0% blocks executed 0%
    #####:  455:    static void Init(MatcherBase& m, Arg&& arg) {
    #####:  456:      m.buffer_.shared = new Shared(std::forward<Arg>(arg));
    %%%%%:  456-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  457:    }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE4InitISD_EEvRSA_OT_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11ValuePolicyINS0_9EqMatcherIS7_EELb0EE4InitISD_EEvRSA_OT_ called 0 returned 0% blocks executed 0%
    #####:  455:    static void Init(MatcherBase& m, Arg&& arg) {
    #####:  456:      m.buffer_.shared = new Shared(std::forward<Arg>(arg));
    %%%%%:  456-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  457:    }
------------------
        -:  458:    static constexpr auto shared_destroy = &Shared::Destroy;
        -:  459:  };
        -:  460:
        -:  461:  template <typename U, bool B>
        -:  462:  struct ValuePolicy<const MatcherInterface<U>*, B> {
        -:  463:    using M = const MatcherInterface<U>;
        -:  464:    using Shared = SharedPayload<std::unique_ptr<M>>;
        -:  465:    static const M& Get(const MatcherBase& m) {
        -:  466:      return *static_cast<Shared*>(m.buffer_.shared)->value;
        -:  467:    }
        -:  468:    static void Init(MatcherBase& m, M* impl) {
        -:  469:      m.buffer_.shared = new Shared(std::unique_ptr<M>(impl));
        -:  470:    }
        -:  471:
        -:  472:    static constexpr auto shared_destroy = &Shared::Destroy;
        -:  473:  };
        -:  474:
        -:  475:  template <typename M>
    #####:  476:  void Init(M&& m) {
        -:  477:    using MM = typename std::decay<M>::type;
        -:  478:    using Policy = ValuePolicy<MM>;
    #####:  479:    vtable_ = GetVTable<Policy>();
    #####:  480:    Policy::Init(*this, std::forward<M>(m));
    #####:  481:  }
------------------
_ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4InitINS0_9EqMatcherIS7_EEEEvOT_:
function _ZN7testing8internal11MatcherBaseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4InitINS0_9EqMatcherIS7_EEEEvOT_ called 0 returned 0% blocks executed 0%
    #####:  476:  void Init(M&& m) {
        -:  477:    using MM = typename std::decay<M>::type;
        -:  478:    using Policy = ValuePolicy<MM>;
    #####:  479:    vtable_ = GetVTable<Policy>();
    %%%%%:  479-block  0
call    0 never executed
    #####:  480:    Policy::Init(*this, std::forward<M>(m));
call    0 never executed
call    1 never executed
    #####:  481:  }
------------------
_ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4InitINS0_9EqMatcherIS7_EEEEvOT_:
function _ZN7testing8internal11MatcherBaseIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4InitINS0_9EqMatcherIS7_EEEEvOT_ called 0 returned 0% blocks executed 0%
    #####:  476:  void Init(M&& m) {
        -:  477:    using MM = typename std::decay<M>::type;
        -:  478:    using Policy = ValuePolicy<MM>;
    #####:  479:    vtable_ = GetVTable<Policy>();
    %%%%%:  479-block  0
call    0 never executed
    #####:  480:    Policy::Init(*this, std::forward<M>(m));
call    0 never executed
call    1 never executed
    #####:  481:  }
------------------
        -:  482:
        -:  483:  const VTable* vtable_;
        -:  484:  Buffer buffer_;
        -:  485:};
        -:  486:
        -:  487:}  // namespace internal
        -:  488:
        -:  489:// A Matcher<T> is a copyable and IMMUTABLE (except by assignment)
        -:  490:// object that can check whether a value of type T matches.  The
        -:  491:// implementation of Matcher<T> is just a std::shared_ptr to const
        -:  492:// MatcherInterface<T>.  Don't inherit from Matcher!
        -:  493:template <typename T>
        -:  494:class Matcher : public internal::MatcherBase<T> {
        -:  495: public:
        -:  496:  // Constructs a null matcher.  Needed for storing Matcher objects in STL
        -:  497:  // containers.  A default-constructed matcher is not yet initialized.  You
        -:  498:  // cannot use it until a valid value has been assigned to it.
        -:  499:  explicit Matcher() {}  // NOLINT
        -:  500:
        -:  501:  // Constructs a matcher from its implementation.
        -:  502:  explicit Matcher(const MatcherInterface<const T&>* impl)
        -:  503:      : internal::MatcherBase<T>(impl) {}
        -:  504:
        -:  505:  template <typename U>
        -:  506:  explicit Matcher(
        -:  507:      const MatcherInterface<U>* impl,
        -:  508:      typename std::enable_if<!std::is_same<U, const U&>::value>::type* =
        -:  509:          nullptr)
        -:  510:      : internal::MatcherBase<T>(impl) {}
        -:  511:
        -:  512:  template <typename M, typename = typename std::remove_reference<
        -:  513:                            M>::type::is_gtest_matcher>
        -:  514:  Matcher(M&& m) : internal::MatcherBase<T>(std::forward<M>(m)) {}  // NOLINT
        -:  515:
        -:  516:  // Implicit constructor here allows people to write
        -:  517:  // EXPECT_CALL(foo, Bar(5)) instead of EXPECT_CALL(foo, Bar(Eq(5))) sometimes
        -:  518:  Matcher(T value);  // NOLINT
        -:  519:};
        -:  520:
        -:  521:// The following two specializations allow the user to write str
        -:  522:// instead of Eq(str) and "foo" instead of Eq("foo") when a std::string
        -:  523:// matcher is expected.
        -:  524:template <>
        -:  525:class GTEST_API_ Matcher<const std::string&>
        -:  526:    : public internal::MatcherBase<const std::string&> {
        -:  527: public:
        -:  528:  Matcher() {}
        -:  529:
        -:  530:  explicit Matcher(const MatcherInterface<const std::string&>* impl)
        -:  531:      : internal::MatcherBase<const std::string&>(impl) {}
        -:  532:
        -:  533:  template <typename M, typename = typename std::remove_reference<
        -:  534:                            M>::type::is_gtest_matcher>
function _ZN7testing7MatcherIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2INS_8internal9EqMatcherIS6_EEvEEOT_ called 0 returned 0% blocks executed 0%
    #####:  535:  Matcher(M&& m)  // NOLINT
    #####:  536:      : internal::MatcherBase<const std::string&>(std::forward<M>(m)) {}
    %%%%%:  536-block  0
call    0 never executed
call    1 never executed
        -:  537:
        -:  538:  // Allows the user to write str instead of Eq(str) sometimes, where
        -:  539:  // str is a std::string object.
        -:  540:  Matcher(const std::string& s);  // NOLINT
        -:  541:
        -:  542:  // Allows the user to write "foo" instead of Eq("foo") sometimes.
        -:  543:  Matcher(const char* s);  // NOLINT
        -:  544:};
        -:  545:
        -:  546:template <>
        -:  547:class GTEST_API_ Matcher<std::string>
        -:  548:    : public internal::MatcherBase<std::string> {
        -:  549: public:
        -:  550:  Matcher() {}
        -:  551:
        -:  552:  explicit Matcher(const MatcherInterface<const std::string&>* impl)
        -:  553:      : internal::MatcherBase<std::string>(impl) {}
        -:  554:  explicit Matcher(const MatcherInterface<std::string>* impl)
        -:  555:      : internal::MatcherBase<std::string>(impl) {}
        -:  556:
        -:  557:  template <typename M, typename = typename std::remove_reference<
        -:  558:                            M>::type::is_gtest_matcher>
function _ZN7testing7MatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2INS_8internal9EqMatcherIS6_EEvEEOT_ called 0 returned 0% blocks executed 0%
    #####:  559:  Matcher(M&& m)  // NOLINT
    #####:  560:      : internal::MatcherBase<std::string>(std::forward<M>(m)) {}
    %%%%%:  560-block  0
call    0 never executed
call    1 never executed
        -:  561:
        -:  562:  // Allows the user to write str instead of Eq(str) sometimes, where
        -:  563:  // str is a string object.
        -:  564:  Matcher(const std::string& s);  // NOLINT
        -:  565:
        -:  566:  // Allows the user to write "foo" instead of Eq("foo") sometimes.
        -:  567:  Matcher(const char* s);  // NOLINT
        -:  568:};
        -:  569:
        -:  570:#if GTEST_INTERNAL_HAS_STRING_VIEW
        -:  571:// The following two specializations allow the user to write str
        -:  572:// instead of Eq(str) and "foo" instead of Eq("foo") when a absl::string_view
        -:  573:// matcher is expected.
        -:  574:template <>
        -:  575:class GTEST_API_ Matcher<const internal::StringView&>
        -:  576:    : public internal::MatcherBase<const internal::StringView&> {
        -:  577: public:
        -:  578:  Matcher() {}
        -:  579:
        -:  580:  explicit Matcher(const MatcherInterface<const internal::StringView&>* impl)
        -:  581:      : internal::MatcherBase<const internal::StringView&>(impl) {}
        -:  582:
        -:  583:  template <typename M, typename = typename std::remove_reference<
        -:  584:                            M>::type::is_gtest_matcher>
        -:  585:  Matcher(M&& m)  // NOLINT
        -:  586:      : internal::MatcherBase<const internal::StringView&>(std::forward<M>(m)) {
        -:  587:  }
        -:  588:
        -:  589:  // Allows the user to write str instead of Eq(str) sometimes, where
        -:  590:  // str is a std::string object.
        -:  591:  Matcher(const std::string& s);  // NOLINT
        -:  592:
        -:  593:  // Allows the user to write "foo" instead of Eq("foo") sometimes.
        -:  594:  Matcher(const char* s);  // NOLINT
        -:  595:
        -:  596:  // Allows the user to pass absl::string_views or std::string_views directly.
        -:  597:  Matcher(internal::StringView s);  // NOLINT
        -:  598:};
        -:  599:
        -:  600:template <>
        -:  601:class GTEST_API_ Matcher<internal::StringView>
        -:  602:    : public internal::MatcherBase<internal::StringView> {
        -:  603: public:
        -:  604:  Matcher() {}
        -:  605:
        -:  606:  explicit Matcher(const MatcherInterface<const internal::StringView&>* impl)
        -:  607:      : internal::MatcherBase<internal::StringView>(impl) {}
        -:  608:  explicit Matcher(const MatcherInterface<internal::StringView>* impl)
        -:  609:      : internal::MatcherBase<internal::StringView>(impl) {}
        -:  610:
        -:  611:  template <typename M, typename = typename std::remove_reference<
        -:  612:                            M>::type::is_gtest_matcher>
        -:  613:  Matcher(M&& m)  // NOLINT
        -:  614:      : internal::MatcherBase<internal::StringView>(std::forward<M>(m)) {}
        -:  615:
        -:  616:  // Allows the user to write str instead of Eq(str) sometimes, where
        -:  617:  // str is a std::string object.
        -:  618:  Matcher(const std::string& s);  // NOLINT
        -:  619:
        -:  620:  // Allows the user to write "foo" instead of Eq("foo") sometimes.
        -:  621:  Matcher(const char* s);  // NOLINT
        -:  622:
        -:  623:  // Allows the user to pass absl::string_views or std::string_views directly.
        -:  624:  Matcher(internal::StringView s);  // NOLINT
        -:  625:};
        -:  626:#endif  // GTEST_INTERNAL_HAS_STRING_VIEW
        -:  627:
        -:  628:// Prints a matcher in a human-readable format.
        -:  629:template <typename T>
        -:  630:std::ostream& operator<<(std::ostream& os, const Matcher<T>& matcher) {
        -:  631:  matcher.DescribeTo(&os);
        -:  632:  return os;
        -:  633:}
        -:  634:
        -:  635:// The PolymorphicMatcher class template makes it easy to implement a
        -:  636:// polymorphic matcher (i.e. a matcher that can match values of more
        -:  637:// than one type, e.g. Eq(n) and NotNull()).
        -:  638://
        -:  639:// To define a polymorphic matcher, a user should provide an Impl
        -:  640:// class that has a DescribeTo() method and a DescribeNegationTo()
        -:  641:// method, and define a member function (or member function template)
        -:  642://
        -:  643://   bool MatchAndExplain(const Value& value,
        -:  644://                        MatchResultListener* listener) const;
        -:  645://
        -:  646:// See the definition of NotNull() for a complete example.
        -:  647:template <class Impl>
        -:  648:class PolymorphicMatcher {
        -:  649: public:
        -:  650:  explicit PolymorphicMatcher(const Impl& an_impl) : impl_(an_impl) {}
        -:  651:
        -:  652:  // Returns a mutable reference to the underlying matcher
        -:  653:  // implementation object.
        -:  654:  Impl& mutable_impl() { return impl_; }
        -:  655:
        -:  656:  // Returns an immutable reference to the underlying matcher
        -:  657:  // implementation object.
        -:  658:  const Impl& impl() const { return impl_; }
        -:  659:
        -:  660:  template <typename T>
        -:  661:  operator Matcher<T>() const {
        -:  662:    return Matcher<T>(new MonomorphicImpl<const T&>(impl_));
        -:  663:  }
        -:  664:
        -:  665: private:
        -:  666:  template <typename T>
        -:  667:  class MonomorphicImpl : public MatcherInterface<T> {
        -:  668:   public:
        -:  669:    explicit MonomorphicImpl(const Impl& impl) : impl_(impl) {}
        -:  670:
        -:  671:    void DescribeTo(::std::ostream* os) const override { impl_.DescribeTo(os); }
        -:  672:
        -:  673:    void DescribeNegationTo(::std::ostream* os) const override {
        -:  674:      impl_.DescribeNegationTo(os);
        -:  675:    }
        -:  676:
        -:  677:    bool MatchAndExplain(T x, MatchResultListener* listener) const override {
        -:  678:      return impl_.MatchAndExplain(x, listener);
        -:  679:    }
        -:  680:
        -:  681:   private:
        -:  682:    const Impl impl_;
        -:  683:  };
        -:  684:
        -:  685:  Impl impl_;
        -:  686:};
        -:  687:
        -:  688:// Creates a matcher from its implementation.
        -:  689:// DEPRECATED: Especially in the generic code, prefer:
        -:  690://   Matcher<T>(new MyMatcherImpl<const T&>(...));
        -:  691://
        -:  692:// MakeMatcher may create a Matcher that accepts its argument by value, which
        -:  693:// leads to unnecessary copies & lack of support for non-copyable types.
        -:  694:template <typename T>
        -:  695:inline Matcher<T> MakeMatcher(const MatcherInterface<T>* impl) {
        -:  696:  return Matcher<T>(impl);
        -:  697:}
        -:  698:
        -:  699:// Creates a polymorphic matcher from its implementation.  This is
        -:  700:// easier to use than the PolymorphicMatcher<Impl> constructor as it
        -:  701:// doesn't require you to explicitly write the template argument, e.g.
        -:  702://
        -:  703://   MakePolymorphicMatcher(foo);
        -:  704:// vs
        -:  705://   PolymorphicMatcher<TypeOfFoo>(foo);
        -:  706:template <class Impl>
        -:  707:inline PolymorphicMatcher<Impl> MakePolymorphicMatcher(const Impl& impl) {
        -:  708:  return PolymorphicMatcher<Impl>(impl);
        -:  709:}
        -:  710:
        -:  711:namespace internal {
        -:  712:// Implements a matcher that compares a given value with a
        -:  713:// pre-supplied value using one of the ==, <=, <, etc, operators.  The
        -:  714:// two values being compared don't have to have the same type.
        -:  715://
        -:  716:// The matcher defined here is polymorphic (for example, Eq(5) can be
        -:  717:// used to match an int, a short, a double, etc).  Therefore we use
        -:  718:// a template type conversion operator in the implementation.
        -:  719://
        -:  720:// The following template definition assumes that the Rhs parameter is
        -:  721:// a "bare" type (i.e. neither 'const T' nor 'T&').
        -:  722:template <typename D, typename Rhs, typename Op>
        -:  723:class ComparisonBase {
        -:  724: public:
function _ZN7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEEC2ERKS8_ called 0 returned 0% blocks executed 0%
    #####:  725:  explicit ComparisonBase(const Rhs& rhs) : rhs_(rhs) {}
    %%%%%:  725-block  0
call    0 never executed
        -:  726:
        -:  727:  using is_gtest_matcher = void;
        -:  728:
        -:  729:  template <typename Lhs>
function _ZNK7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEE15MatchAndExplainIS8_EEbRKT_PSo called 0 returned 0% blocks executed 0%
    #####:  730:  bool MatchAndExplain(const Lhs& lhs, std::ostream*) const {
    #####:  731:    return Op()(lhs, Unwrap(rhs_));
    %%%%%:  731-block  0
call    0 never executed
call    1 never executed
        -:  732:  }
function _ZNK7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEE10DescribeToEPSo called 0 returned 0% blocks executed 0%
    #####:  733:  void DescribeTo(std::ostream* os) const {
    #####:  734:    *os << D::Desc() << " ";
    %%%%%:  734-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  735:    UniversalPrint(Unwrap(rhs_), os);
call    0 never executed
call    1 never executed
    #####:  736:  }
function _ZNK7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEE18DescribeNegationToEPSo called 0 returned 0% blocks executed 0%
    #####:  737:  void DescribeNegationTo(std::ostream* os) const {
    #####:  738:    *os << D::NegatedDesc() << " ";
    %%%%%:  738-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  739:    UniversalPrint(Unwrap(rhs_), os);
call    0 never executed
call    1 never executed
    #####:  740:  }
        -:  741:
        -:  742: private:
        -:  743:  template <typename T>
function _ZN7testing8internal14ComparisonBaseINS0_9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_NS0_5AnyEqEE6UnwrapIS8_EERKT_SF_ called 0 returned 0% blocks executed 0%
    #####:  744:  static const T& Unwrap(const T& v) {
    #####:  745:    return v;
    %%%%%:  745-block  0
        -:  746:  }
        -:  747:  template <typename T>
        -:  748:  static const T& Unwrap(std::reference_wrapper<T> v) {
        -:  749:    return v;
        -:  750:  }
        -:  751:
        -:  752:  Rhs rhs_;
        -:  753:};
        -:  754:
        -:  755:template <typename Rhs>
        -:  756:class EqMatcher : public ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq> {
        -:  757: public:
function _ZN7testing8internal9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_ called 0 returned 0% blocks executed 0%
    #####:  758:  explicit EqMatcher(const Rhs& rhs)
    #####:  759:      : ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq>(rhs) {}
    %%%%%:  759-block  0
call    0 never executed
function _ZN7testing8internal9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4DescEv called 0 returned 0% blocks executed 0%
    #####:  760:  static const char* Desc() { return "is equal to"; }
    %%%%%:  760-block  0
function _ZN7testing8internal9EqMatcherINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11NegatedDescEv called 0 returned 0% blocks executed 0%
    #####:  761:  static const char* NegatedDesc() { return "isn't equal to"; }
    %%%%%:  761-block  0
        -:  762:};
        -:  763:template <typename Rhs>
        -:  764:class NeMatcher : public ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe> {
        -:  765: public:
        -:  766:  explicit NeMatcher(const Rhs& rhs)
        -:  767:      : ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe>(rhs) {}
        -:  768:  static const char* Desc() { return "isn't equal to"; }
        -:  769:  static const char* NegatedDesc() { return "is equal to"; }
        -:  770:};
        -:  771:template <typename Rhs>
        -:  772:class LtMatcher : public ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt> {
        -:  773: public:
        -:  774:  explicit LtMatcher(const Rhs& rhs)
        -:  775:      : ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt>(rhs) {}
        -:  776:  static const char* Desc() { return "is <"; }
        -:  777:  static const char* NegatedDesc() { return "isn't <"; }
        -:  778:};
        -:  779:template <typename Rhs>
        -:  780:class GtMatcher : public ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt> {
        -:  781: public:
        -:  782:  explicit GtMatcher(const Rhs& rhs)
        -:  783:      : ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt>(rhs) {}
        -:  784:  static const char* Desc() { return "is >"; }
        -:  785:  static const char* NegatedDesc() { return "isn't >"; }
        -:  786:};
        -:  787:template <typename Rhs>
        -:  788:class LeMatcher : public ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe> {
        -:  789: public:
        -:  790:  explicit LeMatcher(const Rhs& rhs)
        -:  791:      : ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe>(rhs) {}
        -:  792:  static const char* Desc() { return "is <="; }
        -:  793:  static const char* NegatedDesc() { return "isn't <="; }
        -:  794:};
        -:  795:template <typename Rhs>
        -:  796:class GeMatcher : public ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe> {
        -:  797: public:
        -:  798:  explicit GeMatcher(const Rhs& rhs)
        -:  799:      : ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe>(rhs) {}
        -:  800:  static const char* Desc() { return "is >="; }
        -:  801:  static const char* NegatedDesc() { return "isn't >="; }
        -:  802:};
        -:  803:
        -:  804:template <typename T, typename = typename std::enable_if<
        -:  805:                          std::is_constructible<std::string, T>::value>::type>
        -:  806:using StringLike = T;
        -:  807:
        -:  808:// Implements polymorphic matchers MatchesRegex(regex) and
        -:  809:// ContainsRegex(regex), which can be used as a Matcher<T> as long as
        -:  810:// T can be converted to a string.
        -:  811:class MatchesRegexMatcher {
        -:  812: public:
        -:  813:  MatchesRegexMatcher(const RE* regex, bool full_match)
        -:  814:      : regex_(regex), full_match_(full_match) {}
        -:  815:
        -:  816:#if GTEST_INTERNAL_HAS_STRING_VIEW
        -:  817:  bool MatchAndExplain(const internal::StringView& s,
        -:  818:                       MatchResultListener* listener) const {
        -:  819:    return MatchAndExplain(std::string(s), listener);
        -:  820:  }
        -:  821:#endif  // GTEST_INTERNAL_HAS_STRING_VIEW
        -:  822:
        -:  823:  // Accepts pointer types, particularly:
        -:  824:  //   const char*
        -:  825:  //   char*
        -:  826:  //   const wchar_t*
        -:  827:  //   wchar_t*
        -:  828:  template <typename CharType>
        -:  829:  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {
        -:  830:    return s != nullptr && MatchAndExplain(std::string(s), listener);
        -:  831:  }
        -:  832:
        -:  833:  // Matches anything that can convert to std::string.
        -:  834:  //
        -:  835:  // This is a template, not just a plain function with const std::string&,
        -:  836:  // because absl::string_view has some interfering non-explicit constructors.
        -:  837:  template <class MatcheeStringType>
        -:  838:  bool MatchAndExplain(const MatcheeStringType& s,
        -:  839:                       MatchResultListener* /* listener */) const {
        -:  840:    const std::string& s2(s);
        -:  841:    return full_match_ ? RE::FullMatch(s2, *regex_)
        -:  842:                       : RE::PartialMatch(s2, *regex_);
        -:  843:  }
        -:  844:
        -:  845:  void DescribeTo(::std::ostream* os) const {
        -:  846:    *os << (full_match_ ? "matches" : "contains") << " regular expression ";
        -:  847:    UniversalPrinter<std::string>::Print(regex_->pattern(), os);
        -:  848:  }
        -:  849:
        -:  850:  void DescribeNegationTo(::std::ostream* os) const {
        -:  851:    *os << "doesn't " << (full_match_ ? "match" : "contain")
        -:  852:        << " regular expression ";
        -:  853:    UniversalPrinter<std::string>::Print(regex_->pattern(), os);
        -:  854:  }
        -:  855:
        -:  856: private:
        -:  857:  const std::shared_ptr<const RE> regex_;
        -:  858:  const bool full_match_;
        -:  859:};
        -:  860:}  // namespace internal
        -:  861:
        -:  862:// Matches a string that fully matches regular expression 'regex'.
        -:  863:// The matcher takes ownership of 'regex'.
        -:  864:inline PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex(
        -:  865:    const internal::RE* regex) {
        -:  866:  return MakePolymorphicMatcher(internal::MatchesRegexMatcher(regex, true));
        -:  867:}
        -:  868:template <typename T = std::string>
        -:  869:PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex(
        -:  870:    const internal::StringLike<T>& regex) {
        -:  871:  return MatchesRegex(new internal::RE(std::string(regex)));
        -:  872:}
        -:  873:
        -:  874:// Matches a string that contains regular expression 'regex'.
        -:  875:// The matcher takes ownership of 'regex'.
        -:  876:inline PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex(
        -:  877:    const internal::RE* regex) {
        -:  878:  return MakePolymorphicMatcher(internal::MatchesRegexMatcher(regex, false));
        -:  879:}
        -:  880:template <typename T = std::string>
        -:  881:PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex(
        -:  882:    const internal::StringLike<T>& regex) {
        -:  883:  return ContainsRegex(new internal::RE(std::string(regex)));
        -:  884:}
        -:  885:
        -:  886:// Creates a polymorphic matcher that matches anything equal to x.
        -:  887:// Note: if the parameter of Eq() were declared as const T&, Eq("foo")
        -:  888:// wouldn't compile.
        -:  889:template <typename T>
function _ZN7testing2EqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_8internal9EqMatcherIT_EES9_ called 0 returned 0% blocks executed 0%
    #####:  890:inline internal::EqMatcher<T> Eq(T x) {
    #####:  891:  return internal::EqMatcher<T>(x);
    %%%%%:  891-block  0
call    0 never executed
        -:  892:}
        -:  893:
        -:  894:// Constructs a Matcher<T> from a 'value' of type T.  The constructed
        -:  895:// matcher matches any value that's equal to 'value'.
        -:  896:template <typename T>
        -:  897:Matcher<T>::Matcher(T value) {
        -:  898:  *this = Eq(value);
        -:  899:}
        -:  900:
        -:  901:// Creates a monomorphic matcher that matches anything with type Lhs
        -:  902:// and equal to rhs.  A user may need to use this instead of Eq(...)
        -:  903:// in order to resolve an overloading ambiguity.
        -:  904://
        -:  905:// TypedEq<T>(x) is just a convenient short-hand for Matcher<T>(Eq(x))
        -:  906:// or Matcher<T>(x), but more readable than the latter.
        -:  907://
        -:  908:// We could define similar monomorphic matchers for other comparison
        -:  909:// operations (e.g. TypedLt, TypedGe, and etc), but decided not to do
        -:  910:// it yet as those are used much less than Eq() in practice.  A user
        -:  911:// can always write Matcher<T>(Lt(5)) to be explicit about the type,
        -:  912:// for example.
        -:  913:template <typename Lhs, typename Rhs>
        -:  914:inline Matcher<Lhs> TypedEq(const Rhs& rhs) {
        -:  915:  return Eq(rhs);
        -:  916:}
        -:  917:
        -:  918:// Creates a polymorphic matcher that matches anything >= x.
        -:  919:template <typename Rhs>
        -:  920:inline internal::GeMatcher<Rhs> Ge(Rhs x) {
        -:  921:  return internal::GeMatcher<Rhs>(x);
        -:  922:}
        -:  923:
        -:  924:// Creates a polymorphic matcher that matches anything > x.
        -:  925:template <typename Rhs>
        -:  926:inline internal::GtMatcher<Rhs> Gt(Rhs x) {
        -:  927:  return internal::GtMatcher<Rhs>(x);
        -:  928:}
        -:  929:
        -:  930:// Creates a polymorphic matcher that matches anything <= x.
        -:  931:template <typename Rhs>
        -:  932:inline internal::LeMatcher<Rhs> Le(Rhs x) {
        -:  933:  return internal::LeMatcher<Rhs>(x);
        -:  934:}
        -:  935:
        -:  936:// Creates a polymorphic matcher that matches anything < x.
        -:  937:template <typename Rhs>
        -:  938:inline internal::LtMatcher<Rhs> Lt(Rhs x) {
        -:  939:  return internal::LtMatcher<Rhs>(x);
        -:  940:}
        -:  941:
        -:  942:// Creates a polymorphic matcher that matches anything != x.
        -:  943:template <typename Rhs>
        -:  944:inline internal::NeMatcher<Rhs> Ne(Rhs x) {
        -:  945:  return internal::NeMatcher<Rhs>(x);
        -:  946:}
        -:  947:}  // namespace testing
        -:  948:
        -:  949:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251 5046
        -:  950:
        -:  951:#endif  // GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_
