        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/ShortTest.cpp
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/cmake-build-debug-coverage/CMakeFiles/lab5.dir/ShortTest.cpp.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/cmake-build-debug-coverage/CMakeFiles/lab5.dir/ShortTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:
        -:    3:#include "SortedMultiMap.h"
        -:    4:#include "SMMIterator.h"
        -:    5:#include <exception>
        -:    6:#include <vector>
        -:    7:
        -:    8:using namespace std;
        -:    9:
function _Z9relation1ii called 1 returned 100% blocks executed 75%
        1:   10:bool relation1(TKey cheie1, TKey cheie2) {
        1:   11:	if (cheie1 <= cheie2) {
        1:   11-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   12:		return true;
    %%%%%:   12-block  0
        -:   13:	}
        -:   14:	else {
        1:   15:		return false;
        1:   15-block  0
        -:   16:	}
        -:   17:}
        -:   18:
function _Z7testAllv called 1 returned 100% blocks executed 70%
        1:   19:void testAll(){
        2:   20:	SortedMultiMap smm = SortedMultiMap(relation1);
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   20-block  1
call    4 never executed
       1*:   21:	assert(smm.size() == 0);
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   21-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   21-block  2
call    5 never executed
       1*:   22:	assert(smm.isEmpty());
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   22-block  2
call    5 never executed
        1:   23:    smm.add(1,2);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:    smm.add(1,3);
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   25:    assert(smm.size() == 2);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   25-block  2
call    5 never executed
       1*:   26:    assert(!smm.isEmpty());
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   26-block  2
call    5 never executed
        2:   27:    vector<TValue> v= smm.search(1);
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   27-block  1
call    4 never executed
       1*:   28:    assert(v.size()==2);
        1:   28-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   28-block  1
call    3 never executed
        1:   29:    v= smm.search(3);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29-block  1
call    3 returned 1
call    4 returned 1
       1*:   30:    assert(v.size()==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   30-block  0
call    3 never executed
        2:   31:    SMMIterator it = smm.iterator();
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31-block  1
call    3 returned 1
    $$$$$:   31-block  2
call    4 never executed
        1:   32:    it.first();
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   33:    while (it.valid()){
        3:   33-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   33-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   33-block  2
        2:   34:    	TElem e = it.getCurrent();
        2:   34-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   35:    	it.next();
        2:   35-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   36:    }
       1*:   37:    assert(smm.remove(1, 2) == true);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   37-block  2
call    5 never executed
       1*:   38:    assert(smm.remove(1, 3) == true);
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   38-block  2
call    5 never executed
       1*:   39:    assert(smm.remove(2, 1) == false);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   39-block  2
call    5 never executed
       1*:   40:    assert(smm.isEmpty());
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   40-block  2
call    5 never executed
        1:   41:}
        -:   42:
