        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/ExtendedTest.cpp
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/cmake-build-debug-coverage/CMakeFiles/lab5.dir/ExtendedTest.cpp.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/cmake-build-debug-coverage/CMakeFiles/lab5.dir/ExtendedTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <exception>
        -:    2:#include <assert.h>
        -:    3:#include <algorithm>
        -:    4:#include <vector>
        -:    5:#include <iostream>
        -:    6:#include "SMMIterator.h"
        -:    7:#include "SortedMultiMap.h"
        -:    8:#include "ExtendedTest.h"
        -:    9:
        -:   10:using namespace std;
        -:   11:
function _Z3ascii called 49731 returned 100% blocks executed 100%
    49731:   12:bool asc(TKey c1, TKey c2) {
    49731:   13:	if (c1 <= c2) {
    49731:   13-block  0
branch  0 taken 28036 (fallthrough)
branch  1 taken 21695
    28036:   14:		return true;
    28036:   14-block  0
        -:   15:	} else {
    21695:   16:		return false;
    21695:   16-block  0
        -:   17:	}
        -:   18:}
        -:   19:
function _Z4descii called 49704 returned 100% blocks executed 100%
    49704:   20:bool desc(TKey c1, TKey c2) {
    49704:   21:	if (c1 >= c2) {
    49704:   21-block  0
branch  0 taken 30389 (fallthrough)
branch  1 taken 19315
    30389:   22:		return true;
    30389:   22-block  0
        -:   23:	} else {
    19315:   24:		return false;
    19315:   24-block  0
        -:   25:	}
        -:   26:}
        -:   27:
function _Z4rel3ii called 55877 returned 100% blocks executed 100%
    55877:   28:bool rel3(TKey c1, TKey c2) {
    55877:   29:	int s1 = 0;
    55877:   29-block  0
   161469:   30:	while (c1 > 0) {
   161469:   30-block  0
branch  0 taken 105592 (fallthrough)
branch  1 taken 55877
   105592:   31:		s1 += c1 % 10;
   105592:   32:		c1 = c1 / 10;
   105592:   32-block  0
        -:   33:	}
        -:   34:
    55877:   35:	int s2 = 0;
    55877:   35-block  0
   160382:   36:	while (c2 > 0) {
   160382:   36-block  0
branch  0 taken 104505 (fallthrough)
branch  1 taken 55877
   104505:   37:		s2 += c2 % 10;
   104505:   38:		c2 = c2 / 10;
   104505:   38-block  0
        -:   39:	}
    55877:   40:	return s1 <= s2;
    55877:   40-block  0
        -:   41:}
        -:   42:
function _Z4rel4ii called 47255 returned 100% blocks executed 100%
    47255:   43:bool rel4(TKey c1, TKey c2) {
    47255:   44:	return c1 % 1111 <= c2 % 1111;
    47255:   44-block  0
        -:   45:}
        -:   46:
function _Z4rel5ii called 47252 returned 100% blocks executed 100%
    47252:   47:bool rel5(TKey c1, TKey c2) {
    47252:   48:	return c1 % 1111 >= c2 % 1111;
    47252:   48-block  0
        -:   49:}
        -:   50:
function _Z17testIteratorStepsR14SortedMultiMap called 55 returned 100% blocks executed 85%
       55:   51:void testIteratorSteps(SortedMultiMap& m) {
      110:   52:	SMMIterator smmi = m.iterator();
       55:   52-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55:   52-block  1
call    3 returned 55
    $$$$$:   52-block  2
call    4 never executed
       55:   53:	int count = m.size();
       55:   53-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
    20591:   54:	for (int i = 0; i < count / 2; i++) {
       55:   54-block  0
    20591:   54-block  1
branch  0 taken 20536 (fallthrough)
branch  1 taken 55
    20536:   54-block  2
    20536:   55:		smmi.next();
    20536:   55-block  0
call    0 returned 20536
branch  1 taken 20536 (fallthrough)
branch  2 taken 0 (throw)
        -:   56:	}
       55:   57:	smmi.first();
       55:   57-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55:   58:	int c = 0;
       55:   58-block  0
        -:   59:	
    41149:   60:	while (smmi.valid()) {
    41149:   60-block  0
call    0 returned 41149
branch  1 taken 41149 (fallthrough)
branch  2 taken 0 (throw)
    41149:   60-block  1
branch  3 taken 41094 (fallthrough)
branch  4 taken 55
    41094:   60-block  2
    41094:   61:		c++;
    41094:   62:		smmi.next();
    41094:   62-block  0
call    0 returned 41094
branch  1 taken 41094 (fallthrough)
branch  2 taken 0 (throw)
        -:   63:	}
      55*:   64:	assert(c == m.size());
       55:   64-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55:   64-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 55
    %%%%%:   64-block  2
call    5 never executed
       55:   65:}
        -:   66:
function _Z12testRelationPFbiiE called 5 returned 100% blocks executed 81%
        5:   67:void testRelation(Relation r) {
       10:   68:	SortedMultiMap smm(r);
        5:   68-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 5
    $$$$$:   68-block  1
call    4 never executed
        5:   69:	int current = 3;
        5:   69-block  0
    20005:   70:	while (smm.size() < 8000) {
    20005:   70-block  0
call    0 returned 20005
branch  1 taken 20005 (fallthrough)
branch  2 taken 0 (throw)
    20005:   70-block  1
branch  3 taken 20000 (fallthrough)
branch  4 taken 5
    20000:   71:		smm.add(current, current);
    20000:   71-block  0
call    0 returned 20000
branch  1 taken 20000 (fallthrough)
branch  2 taken 0 (throw)
    20000:   72:		smm.add(current, current * 2);
    20000:   72-block  0
call    0 returned 20000
branch  1 taken 20000 (fallthrough)
branch  2 taken 0 (throw)
    20000:   73:		current = (current + 13) % 99;
    20000:   73-block  0
        -:   74:	}
       10:   75:	SMMIterator smit = smm.iterator();
        5:   75-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   75-block  1
call    3 returned 5
    $$$$$:   75-block  2
call    4 never executed
        5:   76:	TKey first = smit.getCurrent().first;
        5:   76-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   77:	smit.next();
        5:   77-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
    40000:   78:	while (smit.valid()) {
    40000:   78-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   78-block  1
branch  3 taken 39995 (fallthrough)
branch  4 taken 5
    39995:   78-block  2
    39995:   79:		TKey current = smit.getCurrent().first;
    39995:   79-block  0
call    0 returned 39995
branch  1 taken 39995 (fallthrough)
branch  2 taken 0 (throw)
   39995*:   80:		assert(current == smit.getCurrent().second || current == smit.getCurrent().second / 2);
    39995:   80-block  0
call    0 returned 39995
branch  1 taken 39995 (fallthrough)
branch  2 taken 0 (throw)
    39995:   80-block  1
branch  3 taken 19795 (fallthrough)
branch  4 taken 20200
    19795:   80-block  2
call    5 returned 19795
branch  6 taken 19795 (fallthrough)
branch  7 taken 0 (throw)
    19795:   80-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 19795
    %%%%%:   80-block  4
call   10 never executed
   39995*:   81:		assert(r(first, current));
    39995:   81-block  0
call    0 returned 39995
branch  1 taken 39995 (fallthrough)
branch  2 taken 0 (throw)
    39995:   81-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 39995
    %%%%%:   81-block  2
call    5 never executed
    39995:   82:		first = current;
    39995:   83:		smit.next();
    39995:   83-block  0
call    0 returned 39995
branch  1 taken 39995 (fallthrough)
branch  2 taken 0 (throw)
        -:   84:	}	
        5:   85:	testIteratorSteps(smm);
        5:   85-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   86:}
        -:   87:
function _Z13testRelationsv called 1 returned 100% blocks executed 100%
        1:   88:void testRelations() {
        1:   89:	cout << "Test relations" << endl;
        1:   89-block  0
call    0 returned 1
call    1 returned 1
        1:   90:	testRelation(asc);
call    0 returned 1
        1:   91:	testRelation(desc);
call    0 returned 1
        1:   92:	testRelation(rel3);
call    0 returned 1
        1:   93:	testRelation(rel4);
call    0 returned 1
        1:   94:	testRelation(rel5);
call    0 returned 1
        1:   95:}
        -:   96:
        -:   97:
function _Z10testCreatev called 1 returned 100% blocks executed 75%
        1:   98:void testCreate() {
        1:   99:	cout << "Test create" << endl;
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   99-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2:  100:	SortedMultiMap smm = SortedMultiMap(asc);
        1:  100-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  100-block  1
call    3 returned 1
    $$$$$:  100-block  2
call    4 never executed
       1*:  101:	assert(smm.size() == 0);
        1:  101-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  101-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  101-block  2
call    5 never executed
       1*:  102:	assert(smm.isEmpty());
        1:  102-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  102-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  102-block  2
call    5 never executed
        -:  103:
       11:  104:	for (int i = 0; i < 10; i++) {
        1:  104-block  0
       11:  104-block  1
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       20:  105:        vector<TValue> v= smm.search(i);
       10:  105-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  105-block  1
call    3 returned 10
      10*:  106:        assert(v.size()==0);
       10:  106-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    %%%%%:  106-block  1
call    3 never executed
        -:  107:	}
        -:  108:
       21:  109:	for (int i = -10; i < 10; i++) {
        1:  109-block  0
       21:  109-block  1
branch  0 taken 20 (fallthrough)
branch  1 taken 1
       40:  110:		vector<TValue> v= smm.search(i);
       20:  110-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  110-block  1
call    3 returned 20
      20*:  111:        assert(v.size()==0);
       20:  111-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    %%%%%:  111-block  1
call    3 never executed
        -:  112:	}
        1:  113:}
        -:  114:
function _Z10testSearchPFbiiE called 2 returned 100% blocks executed 80%
        2:  115:void testSearch(Relation r) {
        2:  116:	cout << "Test search" << endl;
        2:  116-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  116-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        4:  117:	SortedMultiMap smm = SortedMultiMap(r);
        2:  117-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  117-block  1
call    3 returned 2
    $$$$$:  117-block  2
call    4 never executed
        2:  118:	int kMin = 0;
        2:  119:	int kMax = 10;
       24:  120:	for (int i = kMin; i <= kMax; i++) {
        2:  120-block  0
       24:  120-block  1
branch  0 taken 22 (fallthrough)
branch  1 taken 2
       22:  120-block  2
       22:  121:			smm.add(i, i + 1);
       22:  121-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  122:			smm.add(i, i + 2);
       22:  122-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:  123:	}
        2:  124:	int intervalDim = 10;
        2:  125:	testIteratorSteps(smm);
        2:  125-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       24:  126:	for (int i = kMin; i <= kMax; i++) {
        2:  126-block  0
       24:  126-block  1
branch  0 taken 22 (fallthrough)
branch  1 taken 2
       44:  127:        vector<TValue> v= smm.search(i);
       22:  127-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  127-block  1
call    3 returned 22
      22*:  128:        assert(v.size()==2);
       22:  128-block  0
call    0 returned 22
branch  1 taken 0 (fallthrough)
branch  2 taken 22
    %%%%%:  128-block  1
call    3 never executed
        -:  129:	}
       22:  130:	for (int i = kMin - intervalDim; i < kMin; i++) {
        2:  130-block  0
       22:  130-block  1
branch  0 taken 20 (fallthrough)
branch  1 taken 2
       40:  131:        vector<TValue> v= smm.search(i);
       20:  131-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  131-block  1
call    3 returned 20
      20*:  132:        assert(v.size()==0);
       20:  132-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    %%%%%:  132-block  1
call    3 never executed
        -:  133:	}
       20:  134:	for (int i = kMax + 1; i < kMax + intervalDim; i++) {
        2:  134-block  0
       20:  134-block  1
branch  0 taken 18 (fallthrough)
branch  1 taken 2
       36:  135:        vector<TValue> v= smm.search(i);
       18:  135-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:  135-block  1
call    3 returned 18
      18*:  136:        assert(v.size()==0);
       18:  136-block  0
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
    %%%%%:  136-block  1
call    3 never executed
        -:  137:	}
        2:  138:}
        -:  139:
function _Z10testSearchv called 1 returned 100% blocks executed 100%
        1:  140:void testSearch() {
        1:  141:	testSearch(asc);
        1:  141-block  0
call    0 returned 1
        1:  142:	testSearch(desc);
call    0 returned 1
        1:  143:}
        -:  144:
function _Z16populateSMMEmptyR14SortedMultiMapii called 2 returned 100% blocks executed 100%
        2:  145:void populateSMMEmpty(SortedMultiMap& smm, int min, int max) {
       24:  146:	for (int i = min; i <= max; i++) {
        2:  146-block  0
       24:  146-block  1
branch  0 taken 22 (fallthrough)
branch  1 taken 2
       22:  146-block  2
       22:  147:        smm.add(i, i);
       22:  147-block  0
call    0 returned 22
       22:  148:		if (i%2 ==0)
branch  0 taken 12 (fallthrough)
branch  1 taken 10
       12:  149:            smm.add(i, i+2);
       12:  149-block  0
call    0 returned 12
        -:  150:	}
        2:  151:}
        -:  152:
function _Z16testRemoveSearchPFbiiE called 2 returned 100% blocks executed 79%
        2:  153:void testRemoveSearch(Relation r) {
        2:  154:	cout << "Test remove and search" << endl;
        2:  154-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  154-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        4:  155:	SortedMultiMap smm = SortedMultiMap(r);
        2:  155-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  155-block  1
call    3 returned 2
    $$$$$:  155-block  2
call    4 never executed
        2:  156:	int min = 10;
        2:  157:	int max = 20;
        2:  158:	populateSMMEmpty(smm, min, max);
        2:  158-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  159:	testIteratorSteps(smm);
        2:  159-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       24:  160:	for (int c = min; c <= max; c++) {
        2:  160-block  0
       24:  160-block  1
branch  0 taken 22 (fallthrough)
branch  1 taken 2
       22:  160-block  2
      22*:  161:		assert(smm.remove(c, c+1) == false);
       22:  161-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  161-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:  161-block  2
call    5 never executed
       22:  162:		if (c%2==0)
       22:  162-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 10
      12*:  163:            assert(smm.remove(c,c) == true);
       12:  163-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  163-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 12
    %%%%%:  163-block  2
call    5 never executed
       22:  164:		testIteratorSteps(smm);
       22:  164-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:  165:	}
        -:  166:	
       24:  167:	for (int c = min; c <= max; c++) {
        2:  167-block  0
       24:  167-block  1
branch  0 taken 22 (fallthrough)
branch  1 taken 2
       22:  167-block  2
       22:  168:		if (c%2==1){
       22:  168-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 12
      10*:  169:            assert(smm.remove(c,c+1) == false);
       10:  169-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  169-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:  169-block  2
call    5 never executed
      10*:  170:            assert(smm.remove(c,c) == true);
       10:  170-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  170-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:  170-block  2
call    5 never executed
        -:  171:		}
        -:  172:        else{
      12*:  173:              assert(smm.remove(c,c+2) == true);
       12:  173-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  173-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 12
    %%%%%:  173-block  2
call    5 never executed
        -:  174:        }
       22:  175:		testIteratorSteps(smm);
       22:  175-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:  176:	}    
       2*:  177:	assert(smm.size() == 0);
        2:  177-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  177-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  177-block  2
call    5 never executed
        2:  178:}
        -:  179:
function _Z10testRemovev called 1 returned 100% blocks executed 100%
        1:  180:void testRemove() {
        1:  181:	testRemoveSearch(asc);
        1:  181-block  0
call    0 returned 1
        1:  182:	testRemoveSearch(desc);
call    0 returned 1
        1:  183:}
        -:  184:
function _Z10randomKeysii called 2 returned 100% blocks executed 89%
        2:  185:vector<int> randomKeys(int kMin, int kMax) {
        2:  186:	vector<int> keys;
        2:  186-block  0
call    0 returned 2
      404:  187:	for (int c = kMin; c <= kMax; c++) {
      404:  187-block  0
branch  0 taken 402 (fallthrough)
branch  1 taken 2
      402:  187-block  1
      402:  188:		keys.push_back(c);
      402:  188-block  0
call    0 returned 402
branch  1 taken 402 (fallthrough)
branch  2 taken 0 (throw)
        -:  189:	}
        2:  190:	int n = keys.size();
        2:  190-block  0
call    0 returned 2
      402:  191:	for (int i = 0; i < n - 1; i++) {
      402:  191-block  0
branch  0 taken 400 (fallthrough)
branch  1 taken 2
      400:  192:		int j = i + rand() % (n - i);
      400:  192-block  0
call    0 returned 400
      400:  193:		swap(keys[i], keys[j]);
call    0 returned 400
call    1 returned 400
call    2 returned 400
        -:  194:	}
        2:  195:	return keys;
        2:  195-block  0
        2:  195-block  1
        -:  196:}
        -:  197:
        -:  198:
function _Z12testIteratorPFbiiE called 2 returned 100% blocks executed 75%
        2:  199:void testIterator(Relation r) {
        2:  200:	cout << "Test iterator" << endl;
        2:  200-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  200-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        4:  201:	SortedMultiMap smm = SortedMultiMap(r);
        2:  201-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
    $$$$$:  201-block  1
call    4 never executed
        4:  202:	SMMIterator it = smm.iterator();
        2:  202-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
    $$$$$:  202-block  1
call    4 never executed
       2*:  203:	assert(!it.valid());
        2:  203-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  203-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  203-block  2
call    5 never executed
        -:  204:	try {
        2:  205:		it.next();
        2:  205-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2 (throw)
    #####:  206:		assert(false);
    %%%%%:  206-block  0
call    0 never executed
        -:  207:	}
        2:  208:	catch (exception& ex) {
        2:  208-block  0
call    0 returned 2
call    1 returned 2
        -:  209:		assert(true);
        -:  210:	}
        -:  211:	try {
        2:  212:		it.getCurrent();
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2 (throw)
    =====:  213:		assert(false);
    $$$$$:  213-block  0
call    0 never executed
        -:  214:	}
        2:  215:	catch (exception& ex) {
        2:  215-block  0
call    0 returned 2
call    1 returned 2
        -:  216:		assert(true);
        -:  217:	}
        2:  218:	it.first();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  219:	assert(!it.valid());
        2:  219-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  219-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    $$$$$:  219-block  2
call    5 never executed
        2:  220:	int cMin = 100;
        2:  221:	int cMax = 300;
        4:  222:	vector<int> keys = randomKeys(cMin, cMax);
        2:  222-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
    $$$$$:  222-block  1
call    4 never executed
        2:  223:	int n = keys.size();
        2:  223-block  0
call    0 returned 2
      404:  224:	for (int i = 0; i < n; i++) {
      404:  224-block  0
branch  0 taken 402 (fallthrough)
branch  1 taken 2
      402:  224-block  1
      402:  225:      smm.add(keys[i], 100);
      402:  225-block  0
call    0 returned 402
call    1 returned 402
branch  2 taken 402 (fallthrough)
branch  3 taken 0 (throw)
      402:  226:	  if (keys[i]%2==0)	{
      402:  226-block  0
call    0 returned 402
branch  1 taken 202 (fallthrough)
branch  2 taken 200
      202:  227:		smm.add(keys[i], 200);
      202:  227-block  0
call    0 returned 202
call    1 returned 202
branch  2 taken 202 (fallthrough)
branch  3 taken 0 (throw)
        -:  228:	  }
        -:  229:	}
        2:  230:	testIteratorSteps(smm);
        2:  230-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        4:  231:	SMMIterator itsmm = smm.iterator();
        2:  231-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  231-block  1
call    3 returned 2
    $$$$$:  231-block  2
call    4 never executed
        2:  232:	assert(itsmm.valid());
        2:  232-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  232-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    $$$$$:  232-block  2
call    5 never executed
        2:  233:	itsmm.first();
        2:  233-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  234:	assert(itsmm.valid());
        2:  234-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  234-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    $$$$$:  234-block  2
call    5 never executed
        -:  235:
        2:  236:	TKey kPrev = itsmm.getCurrent().first;
        2:  236-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  237:
        2:  238:    itsmm.next();
        2:  238-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      604:  239:	while (itsmm.valid()) {
      604:  239-block  0
call    0 returned 604
branch  1 taken 604 (fallthrough)
branch  2 taken 0 (throw)
      604:  239-block  1
branch  3 taken 602 (fallthrough)
branch  4 taken 2
      602:  239-block  2
      602:  240:		TKey k = itsmm.getCurrent().first;
      602:  240-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
      602:  241:		assert(r(kPrev, k));
      602:  241-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
      602:  241-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 602
    $$$$$:  241-block  2
call    5 never executed
      602:  242:		kPrev = k;
      602:  243:		itsmm.next();
      602:  243-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
        -:  244:	}
        2:  245:}
        -:  246:
function _Z12testIteratorv called 1 returned 100% blocks executed 100%
        1:  247:void testIterator() {
        1:  248:	testIterator(asc);
        1:  248-block  0
call    0 returned 1
        1:  249:	testIterator(desc);
call    0 returned 1
        1:  250:}
        -:  251:
function _Z11testReplacev called 1 returned 100% blocks executed 61%
        1:  252:void testReplace(){
        1:  253:    cout << "Test replace\n";
        1:  253-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:  254:    SortedMultiMap smm = SortedMultiMap(asc);
        1:  254-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  254-block  1
call    4 never executed
        1:  255:    smm.add(2, 4);
        1:  255-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  256:    smm.add(3, 4);
        1:  256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257:    smm.add(2, 5);
        1:  257-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  258:    smm.add(2, 5);
        1:  258-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  259:    assert(smm.size() == 4);
        1:  259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  259-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  259-block  2
call    5 never executed
        1:  260:    smm.replace(2, 4, 5);
        1:  260-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:  261:    SMMIterator it = smm.iterator();
        1:  261-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  261-block  1
call    3 returned 1
    $$$$$:  261-block  2
call    4 never executed
       1*:  262:    assert(it.getCurrent() == make_pair(2, 5));it.next();
        1:  262-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  262-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  262-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  262-block  3
call    9 never executed
        1:  262-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  262-block  5
    $$$$$:  262-block  6
    $$$$$:  262-block  7
       1*:  263:    assert(it.getCurrent() == make_pair(2, 5));it.next();
        1:  263-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  263-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  263-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  263-block  3
call    9 never executed
        1:  263-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  263-block  5
    $$$$$:  263-block  6
    $$$$$:  263-block  7
       1*:  264:    assert(it.getCurrent() == make_pair(2, 5));it.next();
        1:  264-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  264-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  264-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  264-block  3
call    9 never executed
        1:  264-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  264-block  5
    $$$$$:  264-block  6
    $$$$$:  264-block  7
       1*:  265:    assert(it.getCurrent() == make_pair(3, 4));it.next();
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  265-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  265-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  265-block  3
call    9 never executed
        1:  265-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  265-block  5
    $$$$$:  265-block  6
    $$$$$:  265-block  7
       1*:  266:    assert(it.valid() == false);
        1:  266-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  266-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  266-block  2
call    5 never executed
        1:  267:    smm.replace(2, 4, 5);
        1:  267-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  268:    it.first();
        1:  268-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  269:    assert(it.getCurrent() == make_pair(2, 5));it.next();
        1:  269-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  269-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  269-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  269-block  3
call    9 never executed
        1:  269-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  269-block  5
    $$$$$:  269-block  6
    $$$$$:  269-block  7
       1*:  270:    assert(it.getCurrent() == make_pair(2, 5));it.next();
        1:  270-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  270-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  270-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  270-block  3
call    9 never executed
        1:  270-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  270-block  5
    $$$$$:  270-block  6
    $$$$$:  270-block  7
       1*:  271:    assert(it.getCurrent() == make_pair(2, 5));it.next();
        1:  271-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  271-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  271-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  271-block  3
call    9 never executed
        1:  271-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  271-block  5
    $$$$$:  271-block  6
    $$$$$:  271-block  7
       1*:  272:    assert(it.getCurrent() == make_pair(3, 4));it.next();
        1:  272-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  272-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  272-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  272-block  3
call    9 never executed
        1:  272-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:  272-block  5
    $$$$$:  272-block  6
    $$$$$:  272-block  7
       1*:  273:    assert(it.valid() == false);
        1:  273-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  273-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  273-block  2
call    5 never executed
        1:  274:}
        -:  275:
function _Z15testAllExtendedv called 1 returned 100% blocks executed 100%
        1:  276:void testAllExtended() {
        1:  277:	testCreate();
        1:  277-block  0
call    0 returned 1
        1:  278:	testSearch();
call    0 returned 1
        1:  279:	testRemove();
call    0 returned 1
        1:  280:	testIterator();
call    0 returned 1
        1:  281:	testRelations();
call    0 returned 1
        1:  282:    testReplace();
call    0 returned 1
        1:  283:}
