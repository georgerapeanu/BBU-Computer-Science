        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/SortedMultiMap.cpp
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/cmake-build-debug-coverage/CMakeFiles/lab5.dir/SortedMultiMap.cpp.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/SDA/homeworks/lab5/cmake-build-debug-coverage/CMakeFiles/lab5.dir/SortedMultiMap.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include "SMMIterator.h"
        -:    3:#include "SortedMultiMap.h"
        -:    4:#include <iostream>
        -:    5:#include <vector>
        -:    6:#include <exception>
        -:    7:using namespace std;
        -:    8:
function _ZN14SortedMultiMap11create_nodeEiPNS_6node_tES1_ called 1509 returned 100% blocks executed 100%
     1509:    9:SortedMultiMap::node_t* SortedMultiMap::create_node(TKey key, node_t* left = NULL, node_t* right = NULL) {
     1509:   10:  node_t* ans = new node_t();
     1509:   10-block  0
call    0 returned 1509
     1509:   11:  ans->values = new TValue[1];
call    0 returned 1509
     1509:   12:  ans->capacity = 1;
     1509:   13:  ans->size = 0;
     1509:   14:  ans->left = left;
     1509:   15:  ans->right = right;
     1509:   16:  ans->key = key;
     1509:   17:  ans->height = 1;
     1509:   18:  return ans;
        -:   19:} // BC: theta(1), WC: theta(1), TC: theta(1)
        -:   20:
function _ZN14SortedMultiMap10get_heightEPNS_6node_tE called 1335248 returned 100% blocks executed 100%
  1335248:   21:int SortedMultiMap::get_height(node_t* root) {
  1335248:   22:  if(root == NULL){
  1335248:   22-block  0
branch  0 taken 38841 (fallthrough)
branch  1 taken 1296407
    38841:   23:    return 0;
    38841:   23-block  0
        -:   24:  }
  1296407:   25:  return root->height;
  1296407:   25-block  0
        -:   26:} // BC: theta(1), WC: theta(1), TC: theta(1)
        -:   27:
function _ZN14SortedMultiMap13update_heightEPNS_6node_tE called 236094 returned 100% blocks executed 100%
   236094:   28:void SortedMultiMap::update_height(node_t* root) {
   236094:   29:  root->height = 1 + max(get_height(root->left), get_height(root->right));  
   236094:   29-block  0
call    0 returned 236094
call    1 returned 236094
call    2 returned 236094
   236094:   30:} // BC: theta(1), WC: theta(1), TC: theta(1)
        -:   31:
function _ZN14SortedMultiMap11rotate_leftEPNS_6node_tE called 6520 returned 100% blocks executed 100%
     6520:   32:SortedMultiMap::node_t* SortedMultiMap::rotate_left(node_t* root) {
     6520:   33:  node_t* new_root = root->right;
     6520:   34:  root->right = new_root->left;
     6520:   35:  new_root->left = root;
     6520:   36:  update_height(root);
     6520:   36-block  0
call    0 returned 6520
     6520:   37:  update_height(new_root);
call    0 returned 6520
     6520:   38:  return new_root;
        -:   39:} // BC: theta(1), WC: theta(1), TC: theta(1)
        -:   40:
function _ZN14SortedMultiMap12rotate_rightEPNS_6node_tE called 7026 returned 100% blocks executed 100%
     7026:   41:SortedMultiMap::node_t* SortedMultiMap::rotate_right(node_t* root) {
     7026:   42:  node_t* new_root = root->left;
     7026:   43:  root->left = new_root->right;
     7026:   44:  new_root->right = root;
     7026:   45:  update_height(root);
     7026:   45-block  0
call    0 returned 7026
     7026:   46:  update_height(new_root);
call    0 returned 7026
     7026:   47:  return new_root;
        -:   48:} // BC: theta(1), WC: theta(1), TC: theta(1)
        -:   49:
function _ZN14SortedMultiMap3fixEPNS_6node_tE called 208992 returned 100% blocks executed 100%
   216018:   50:SortedMultiMap::node_t* SortedMultiMap::fix(node_t* root) {
   216018:   51:  while(get_height(root->left) - get_height(root->right) > 1){
   216018:   51-block  0
call    0 returned 216018
call    1 returned 216018
branch  2 taken 7026 (fallthrough)
branch  3 taken 208992
     7026:   52:    root = rotate_right(root);
     7026:   52-block  0
call    0 returned 7026
        -:   53:  }
   215512:   54:  while(get_height(root->right) - get_height(root->left) > 1) {
   215512:   54-block  0
call    0 returned 215512
call    1 returned 215512
branch  2 taken 6520 (fallthrough)
branch  3 taken 208992
     6520:   55:    root = rotate_left(root);
     6520:   55-block  0
call    0 returned 6520
        -:   56:  }
   208992:   57:  return root;
   208992:   57-block  0
        -:   58:} // BC: theta(1), WC: theta(number of nodes), TC: O(number of nodes)
        -:   59:
function _ZN14SortedMultiMap11add_to_nodeEPNS_6node_tEi called 40688 returned 100% blocks executed 92%
    40688:   60:void SortedMultiMap::add_to_node(node_t* node, TValue value){
    40688:   61:  if(node->size == node->capacity){
    40688:   61-block  0
branch  0 taken 4583 (fallthrough)
branch  1 taken 36105
    4583*:   62:    TValue* new_values = new TValue[2 * node->capacity];
     4583:   62-block  0
branch  0 taken 4583 (fallthrough)
branch  1 taken 0
     4583:   62-block  1
    %%%%%:   62-block  2
call    2 never executed
     4583:   62-block  3
call    3 returned 4583
    65867:   63:    for(int i = 0;i < node->capacity;i++){
    65867:   63-block  0
branch  0 taken 61284 (fallthrough)
branch  1 taken 4583
    61284:   64:      new_values[i] = node->values[i];
    61284:   64-block  0
        -:   65:    }
     4583:   66:    delete[] node->values;
     4583:   66-block  0
branch  0 taken 4583 (fallthrough)
branch  1 taken 0
     4583:   66-block  1
call    2 returned 4583
     4583:   67:    node->values = new_values;
     4583:   68:    node->capacity *= 2;
     4583:   68-block  0
        -:   69:  }
    40688:   70:  node->values[node->size++] = value;
    40688:   71:} //BC: theta(1), WC: theta(size of array), TC: O(size of array)
        -:   72:
function _ZN14SortedMultiMap16remove_from_nodeEPNS_6node_tEi called 68 returned 53% blocks executed 100%
       68:   73:void SortedMultiMap::remove_from_node(node_t* node, TValue value){
       68:   74:  int index = -1;
      112:   75:  for(int i = 0;i < node->size;i++){
       68:   75-block  0
      112:   75-block  1
branch  0 taken 80 (fallthrough)
branch  1 taken 32
       44:   75-block  2
       80:   76:    if(node->values[i] == value){
       80:   76-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 44
       36:   77:      index = i;
       36:   78:      break;
       36:   78-block  0
        -:   79:    }
        -:   80:  }
       68:   81:  if(index == -1){
       68:   81-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 36
       32:   82:    throw exception();
       32:   82-block  0
call    0 returned 32
call    1 returned 32
call    2 returned 0
        -:   83:  }
        -:   84:
       49:   85:  for(int i = index;i + 1 < node->size;i++){
       36:   85-block  0
       49:   85-block  1
branch  0 taken 13 (fallthrough)
branch  1 taken 36
       13:   86:    node->values[i] = node->values[i + 1];
       13:   86-block  0
        -:   87:  }
       36:   88:  node->size--;
       36:   89:} //BC: theta(size of array), WC: theta(size of array), TC: theta(size of array)
        -:   90:
        -:   91:
function _ZN14SortedMultiMapC2EPFbiiE called 14 returned 100% blocks executed 100%
       14:   92:SortedMultiMap::SortedMultiMap(Relation r): r(r) {
       14:   93:  this->root = NULL;
       14:   94:  this->__size = 0;
       14:   95:}// BC: theta(1), WC: theta(1), TC: theta(1)
        -:   96:
function _ZN14SortedMultiMap13recursive_addEPNS_6node_tEii called 249622 returned 100% blocks executed 100%
   249622:   97:SortedMultiMap::node_t* SortedMultiMap::recursive_add(node_t* root, TKey key, TValue value){
   249622:   98:  if(root == NULL){
   249622:   98-block  0
branch  0 taken 1509 (fallthrough)
branch  1 taken 248113
     1509:   99:    root = create_node(key);
     1509:   99-block  0
call    0 returned 1509
     1509:  100:    add_to_node(root, value);
call    0 returned 1509
     1509:  101:    return root;
        -:  102:  }
   248113:  103:  if(root->key == key){
   248113:  103-block  0
branch  0 taken 39179 (fallthrough)
branch  1 taken 208934
    39179:  104:    add_to_node(root, value);
    39179:  104-block  0
call    0 returned 39179
    39179:  105:    return root;
        -:  106:  }
   208934:  107:  if(this->r(key, root->key)){
   208934:  107-block  0
call    0 returned 208934
branch  1 taken 113875 (fallthrough)
branch  2 taken 95059
   113875:  108:    root->left = recursive_add(root->left, key, value);
   113875:  108-block  0
call    0 returned 113875
        -:  109:  }else{
    95059:  110:    root->right = recursive_add(root->right, key, value);
    95059:  110-block  0
call    0 returned 95059
        -:  111:  }
   208934:  112:  update_height(root);
   208934:  112-block  0
call    0 returned 208934
   208934:  113:  root = fix(root);
call    0 returned 208934
   208934:  114:  return root;
        -:  115:} //BC : theta(1), WC: theta(size), TC: O(size)
        -:  116:
        -:  117:
function _ZN14SortedMultiMap3addEii called 40688 returned 100% blocks executed 100%
    40688:  118:void SortedMultiMap::add(TKey c, TValue v) {
    40688:  119:  this->root = recursive_add(this->root, c, v);  
    40688:  119-block  0
call    0 returned 40688
    40688:  120:  this->__size++;
    40688:  121:} //BC : theta(1), WC: theta(size), TC: O(size)
        -:  122:
function _ZNK14SortedMultiMap6searchEi called 92 returned 100% blocks executed 94%
       92:  123:vector<TValue> SortedMultiMap::search(TKey c) const {
       92:  124:	node_t* current = this->root;
       92:  124-block  0
      269:  125:  while(current != NULL && current->key != c){
      269:  125-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 69
      200:  125-block  1
branch  2 taken 177 (fallthrough)
branch  3 taken 23
      177:  125-block  2
      177:  126:    if(this->r(c, current->key)){
      177:  126-block  0
call    0 returned 177
branch  1 taken 88 (fallthrough)
branch  2 taken 89
       88:  127:      current = current->left;
       88:  127-block  0
        -:  128:    }else{
       89:  129:      current = current->right;
       89:  129-block  0
        -:  130:    }
        -:  131:  }
       92:  132:  vector<TValue> ans;
       92:  132-block  0
call    0 returned 92
       92:  133:  if(current != NULL){
branch  0 taken 23 (fallthrough)
branch  1 taken 69
       69:  134:    for(int i = 0;i < current->size;i++){
       23:  134-block  0
       69:  134-block  1
branch  0 taken 46 (fallthrough)
branch  1 taken 23
       46:  134-block  2
       46:  135:      ans.push_back(current->values[i]);
       46:  135-block  0
call    0 returned 46
branch  1 taken 46 (fallthrough)
branch  2 taken 0 (throw)
        -:  136:    }
        -:  137:  }
       92:  138:  return ans;
       92:  138-block  0
       92:  138-block  1
        -:  139:} //BC : theta(1), WC: theta(size), TC: O(size)
        -:  140:
function _ZN14SortedMultiMap16recursive_removeEPNS_6node_tEii called 181 returned 52% blocks executed 97%
      181:  141:SortedMultiMap::node_t* SortedMultiMap::recursive_remove(node_t* root, TKey key, TValue value){
      181:  142:  if(root == NULL){
      181:  142-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 180
        1:  143:    throw exception();
        1:  143-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 0
        -:  144:  }
      180:  145:  if(root->key == key){
      180:  145-block  0
branch  0 taken 68 (fallthrough)
branch  1 taken 112
       68:  146:    remove_from_node(root, value);
       68:  146-block  0
call    0 returned 36
       36:  147:    if(root->size == 0){
branch  0 taken 23 (fallthrough)
branch  1 taken 13
       23:  148:        node_t* previous_father = NULL;
       23:  149:        node_t* previous = NULL;
       23:  150:        node_t* current = root->left;
       23:  150-block  0
       28:  151:        while(current != NULL){
       28:  151-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 23
        5:  152:            previous_father = previous;
        5:  153:            previous = current;
        5:  154:            current = current->right;
        5:  154-block  0
        -:  155:        }
       23:  156:        if(previous == NULL){
       23:  156-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 5
       18:  157:            node_t* tmp = root->right;
       18:  158:            delete[] root->values;
       18:  158-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:  158-block  1
call    2 returned 18
       18:  159:            delete root;
       18:  159-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:  159-block  1
call    2 returned 18
       18:  160:            if(tmp != NULL){
       18:  160-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 13
        5:  161:                update_height(tmp);
        5:  161-block  0
call    0 returned 5
        -:  162:            }
       18:  163:            return tmp;
       18:  163-block  0
        -:  164:        }
        5:  165:        previous->right = root->right;
        5:  166:        if(previous_father != NULL){
        5:  166-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  167:            previous_father->right = NULL;
    %%%%%:  167-block  0
        -:  168:        }
        5:  169:        delete[] root->values;
        5:  169-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  169-block  1
call    2 returned 5
        5:  170:        delete root;
        5:  170-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  170-block  1
call    2 returned 5
        5:  171:        if(previous != NULL){
        5:  171-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  172:            update_height(previous);
        5:  172-block  0
call    0 returned 5
        -:  173:        }
        5:  174:        return previous;
        5:  174-block  0
        -:  175:    }
       13:  176:    return root;
       13:  176-block  0
        -:  177:  }
      112:  178:  if(this->r(key, root->key)){
      112:  178-block  0
call    0 returned 112
branch  1 taken 56 (fallthrough)
branch  2 taken 56
       56:  179:    root->left = recursive_remove(root->left, key, value);
       56:  179-block  0
call    0 returned 29
        -:  180:  }else{
       56:  181:    root->right = recursive_remove(root->right, key, value);
       56:  181-block  0
call    0 returned 29
        -:  182:  }
       58:  183:  update_height(root);
       58:  183-block  0
call    0 returned 58
       58:  184:  root = fix(root);
call    0 returned 58
       58:  185:  return root;
        -:  186:} //BC : theta(1), WC: theta(size), TC: O(size)
        -:  187:
function _ZN14SortedMultiMap6removeEii called 69 returned 100% blocks executed 88%
       69:  188:bool SortedMultiMap::remove(TKey c, TValue v) {
       69:  189:  bool success = true;
        -:  190:  try{
       69:  191:    this->root = recursive_remove(this->root, c, v);
       69:  191-block  0
call    0 returned 69
branch  1 taken 36 (fallthrough)
branch  2 taken 33 (throw)
       36:  191-block  1
       33:  192:  } catch(exception &ex){
       33:  192-block  0
call    0 returned 33
       33:  193:    success = false;
        -:  194:  }
       69:  195:  __size -= success;
       69:  196:  return success;
       69:  196-block  0
       69:  196-block  1
        -:  197:} //BC : theta(1), WC: theta(size), TC: O(size)
        -:  198:
        -:  199:
function _ZNK14SortedMultiMap4sizeEv called 20121 returned 100% blocks executed 100%
    20121:  200:int SortedMultiMap::size() const {
    20121:  201:	return __size;
    20121:  201-block  0
        -:  202:} //BC : theta(1), WC: theta(1), TC: theta(1)
        -:  203:
function _ZNK14SortedMultiMap7isEmptyEv called 4 returned 100% blocks executed 100%
        4:  204:bool SortedMultiMap::isEmpty() const {
        4:  205:	return (__size == 0);
        4:  205-block  0
        -:  206:} //BC : theta(1), WC: theta(1), TC: theta(1)
        -:  207:
function _ZNK14SortedMultiMap8iteratorEv called 66 returned 100% blocks executed 100%
       66:  208:SMMIterator SortedMultiMap::iterator() const {
       66:  209:	return SMMIterator(*this);
       66:  209-block  0
call    0 returned 66
        -:  210:} //BC : theta(1), WC: theta(1), TC: theta(1)
        -:  211:
function _ZN14SortedMultiMap16recursive_deleteEPNS_6node_tE called 2986 returned 100% blocks executed 100%
     2986:  212:void SortedMultiMap::recursive_delete(node_t* root){
     2986:  213:  if(root == NULL){
     2986:  213-block  0
branch  0 taken 1500 (fallthrough)
branch  1 taken 1486
     1500:  214:    return ;
     1500:  214-block  0
        -:  215:  }
     1486:  216:  recursive_delete(root->left);
     1486:  216-block  0
call    0 returned 1486
     1486:  217:  recursive_delete(root->right);
call    0 returned 1486
     1486:  218:  delete[] root->values;
branch  0 taken 1486 (fallthrough)
branch  1 taken 0
     1486:  218-block  0
call    2 returned 1486
     1486:  219:  delete root;
     1486:  219-block  0
branch  0 taken 1486 (fallthrough)
branch  1 taken 0
     1486:  219-block  1
call    2 returned 1486
        -:  220:} //BC : theta(size), WC: theta(size), TC: theta(size)
        -:  221:
function _ZN14SortedMultiMapD2Ev called 14 returned 100% blocks executed 100%
       28:  222:SortedMultiMap::~SortedMultiMap() {
       14:  223:  this->__size = 0;
       14:  224:  recursive_delete(this->root);
       14:  224-block  0
call    0 returned 14
       14:  225:} //BC : theta(size), WC: theta(size), TC: theta(size)
        -:  226:
function _ZN14SortedMultiMap7replaceEiii called 2 returned 100% blocks executed 62%
        2:  227:void SortedMultiMap::replace(TKey k, TValue oldValue, TValue newValue) {
        2:  228:    node_t* current = this->root;
        2:  228-block  0
        -:  229:
       2*:  230:    while(current != NULL && current->key != k){
        2:  230-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  230-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%:  230-block  2
    #####:  231:        if(this->r(current->key, k)){
    %%%%%:  231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  232:            current = current->right;
    %%%%%:  232-block  0
        -:  233:        }else{
    #####:  234:            current = current->left;
    %%%%%:  234-block  0
        -:  235:        }
        -:  236:    }
        -:  237:
        2:  238:    if(current == NULL){
        2:  238-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  239:        return ;
    %%%%%:  239-block  0
        -:  240:    }
        -:  241:
        8:  242:    for(int i = 0;i < current->size;i++){
        2:  242-block  0
        8:  242-block  1
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        6:  242-block  2
        6:  243:        if(current->values[i] == oldValue){
        6:  243-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  244:            current->values[i] = newValue;
        1:  244-block  0
        -:  245:        }
        -:  246:    }
        -:  247:}/// BC: theta(1), WC: theta(size + log(size)), TC: O(size + log(size))
