        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/src/repository/undo_redo_repository.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/repository/undo_redo_repository.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/repository/undo_redo_repository.c.gcda
        -:    0:Runs:1
        -:    1:/*! @file undo_redo_repository.c this file contains the implementation for a repository responsible for managing undo-redo_ operations
        -:    2: *
        -:    3: */
        -:    4:
        -:    5:#pragma once
        -:    6:#include "../../include/domain/vector.h"
        -:    7:#include "../../include/domain/undo_redo_operation.h"
        -:    8:#include "../../include/repository/undo_redo_repository.h"
        -:    9:#include "../../include/domain/errors.h"
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:
function create_undo_redo_repository called 13 returned 100% blocks executed 57%
       13:   13:undo_redo_repository_t* create_undo_redo_repository(int* p_error){
       13:   14:    undo_redo_repository_t* p_undo_redo_repository = (undo_redo_repository_t*)malloc(sizeof(undo_redo_repository_t));
       13:   15:    if(p_undo_redo_repository == NULL){
       13:   15-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####:   16:        set_error(p_error, 1);
    %%%%%:   16-block  0
call    0 never executed
    #####:   17:        delete_undo_redo_repository(p_undo_redo_repository);
call    0 never executed
    #####:   18:        return NULL;
        -:   19:    }
       13:   20:    p_undo_redo_repository->head_idx = -1;
       13:   21:    p_undo_redo_repository->p_operations = create_vector(sizeof(undo_redo_operation_t), 0, &delete_undo_redo_operation_data, NULL);
       13:   21-block  0
call    0 returned 13
       13:   22:    return p_undo_redo_repository;
        -:   23:}
        -:   24:
function delete_undo_redo_repository called 13 returned 100% blocks executed 100%
       13:   25:void delete_undo_redo_repository(undo_redo_repository_t* p_undo_redo_repository){
       13:   26:    if(p_undo_redo_repository != NULL){
       13:   26-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:   27:        delete_vector(p_undo_redo_repository->p_operations);
       13:   27-block  0
call    0 returned 13
       13:   28:        free(p_undo_redo_repository);
        -:   29:    }
       13:   30:}
        -:   31:
function add_undo_repository called 9 returned 100% blocks executed 62%
        9:   32:void add_undo_repository(undo_redo_repository_t* p_undo_redo_repository, undo_redo_operation_t* p_operation, int* p_error){
        9:   33:    int tmp_error = 0;
       11:   34:    while(p_undo_redo_repository->p_operations->size > 1 + p_undo_redo_repository->head_idx){
        9:   34-block  0
       11:   34-block  1
branch  0 taken 2
branch  1 taken 9 (fallthrough)
        2:   35:        pop_back(p_undo_redo_repository->p_operations, &tmp_error);
        2:   35-block  0
call    0 returned 2
        2:   36:        if(tmp_error != 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   37:            set_error(p_error, tmp_error);
    %%%%%:   37-block  0
call    0 never executed
    #####:   38:            return ;
    %%%%%:   38-block  0
        -:   39:        }
        -:   40:    }
        9:   41:    push_back(p_undo_redo_repository->p_operations, p_operation, &tmp_error);
        9:   41-block  0
call    0 returned 9
        9:   42:    if(tmp_error != 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:   43:        set_error(p_error, tmp_error);
    %%%%%:   43-block  0
call    0 never executed
    #####:   44:        return ;
        -:   45:    }
        9:   46:    p_undo_redo_repository->head_idx++;
        9:   46-block  0
        -:   47:}
        -:   48:
function undo_repository called 11 returned 100% blocks executed 82%
       11:   49:void undo_repository(undo_redo_repository_t* p_undo_redo_repository, int* p_error){
       11:   50:    if(p_undo_redo_repository->head_idx == -1){
       11:   50-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        1:   51:        set_error(p_error, 19);
        1:   51-block  0
call    0 returned 1
        1:   52:        return ;
        -:   53:    }
       10:   54:    int tmp_error = 0;
       10:   55:    undo_redo_operation_t* p_operation = get_position_vector(p_undo_redo_repository->p_operations, p_undo_redo_repository->head_idx, &tmp_error);
       10:   55-block  0
call    0 returned 10
      10*:   56:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%:   56-block  0
call    2 never executed
       10:   57:    undo_operation(p_operation, &tmp_error);
       10:   57-block  0
call    0 returned 10
      10*:   58:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%:   58-block  0
call    2 never executed
       10:   59:    p_undo_redo_repository->head_idx--;
       10:   59-block  0
        -:   60:
        -:   61:}
        -:   62:
function redo_repository called 2 returned 100% blocks executed 82%
        2:   63:void redo_repository(undo_redo_repository_t* p_undo_redo_repository, int* p_error){
        2:   64:    if(p_undo_redo_repository->head_idx + 1 == p_undo_redo_repository->p_operations->size){
        2:   64-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   65:        set_error(p_error, 20);
        1:   65-block  0
call    0 returned 1
        1:   66:        return ;
        -:   67:    }
        1:   68:    p_undo_redo_repository->head_idx++;
        1:   69:    int tmp_error = 0;
        1:   70:    undo_redo_operation_t* p_operation = get_position_vector(p_undo_redo_repository->p_operations, p_undo_redo_repository->head_idx, &tmp_error);
        1:   70-block  0
call    0 returned 1
       1*:   71:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   71-block  0
call    2 never executed
        1:   72:    redo_operation(p_operation, &tmp_error);
        1:   72-block  0
call    0 returned 1
       1*:   73:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   73-block  0
call    2 never executed
        -:   74:}
