        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/src/utils/utils.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/utils/utils.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/utils/utils.c.gcda
        -:    0:Runs:1
        -:    1:/*!@file utils.c contains the implementations of various general purpose functions.
        -:    2: *
        -:    3: */
        -:    4:
        -:    5:#pragma once
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include "../../include/utils/utils.h"
        -:    9:#include "../../include/domain/errors.h"
        -:   10:
        -:   11:
        -:   12:/*
        -:   13: * This implementation does exactly what it says it does in utils.h
        -:   14: */
function get_lowercase called 312 returned 100% blocks executed 82%
      312:   15:char* get_lowercase(const char* p_s, int* p_error){
      312:   16:    char* p_lowercase = (char*)malloc(strlen(p_s) + 1);
      312:   17:    if(p_lowercase == NULL){
      312:   17-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 312
    #####:   18:        set_error(p_error, 1);
    %%%%%:   18-block  0
call    0 never executed
    #####:   19:        return NULL;
        -:   20:    }
      312:   21:    strcpy(p_lowercase, p_s);
     1876:   22:    for(int i = 0;p_lowercase[i] != '\0';i++){
      312:   22-block  0
     1564:   22-block  1
     1876:   22-block  2
branch  0 taken 1564
branch  1 taken 312 (fallthrough)
     1564:   23:        if(p_lowercase[i] >= 'A' && p_lowercase[i] <= 'Z'){
     1564:   23-block  0
branch  0 taken 1501 (fallthrough)
branch  1 taken 63
     1501:   23-block  1
branch  2 taken 45 (fallthrough)
branch  3 taken 1456
       45:   24:            p_lowercase[i] += 'a' - 'A';
       45:   24-block  0
        -:   25:        }
        -:   26:    }
      312:   27:    return p_lowercase;
      312:   27-block  0
        -:   28:}
        -:   29:
        -:   30:/*
        -:   31: * This implementation does exactly what it says it does in utils.h
        -:   32: */
function swap called 25 returned 100% blocks executed 100%
       25:   33:void swap(void* p_a, void* p_b, int cnt_bytes){
      226:   34:    for(int i = 0;i < cnt_bytes;i++){
       25:   34-block  0
      226:   34-block  1
branch  0 taken 201
branch  1 taken 25 (fallthrough)
      201:   35:        char tmp = ((char*)p_a)[i];
      201:   36:        ((char*)p_a)[i] = ((char*)p_b)[i];
      201:   37:        ((char*)p_b)[i] = tmp;
      201:   37-block  0
        -:   38:    }
       25:   39:}
        -:   40:
        -:   41:/*
        -:   42: * This implementation does exactly what it says it does in utils.h
        -:   43: */
function sort called 23 returned 100% blocks executed 100%
       23:   44:void sort(vector_t* p_v, int l, int r, int (*cmp)(const void** a, const void** b)){
       23:   45:    if(r - l <= 1){
       23:   45-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 10
       13:   46:        return ;
       13:   46-block  0
        -:   47:    }
       10:   48:    int cnt = 0;
       39:   49:    for(int i = l + 1;i < r;i++){
       10:   49-block  0
       39:   49-block  1
branch  0 taken 29
branch  1 taken 10 (fallthrough)
       29:   50:        cnt += (*cmp)(get_position_vector(p_v, i, NULL), get_position_vector(p_v, l, NULL));
       29:   50-block  0
call    0 returned 29
call    1 returned 29
call    2 returned 29
        -:   51:    }
        -:   52:
       10:   53:    swap(get_position_vector(p_v, l, NULL), get_position_vector(p_v, l + cnt,NULL), p_v->element_size);
       10:   53-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
        -:   54:
       10:   55:    int idx = l;
       49:   56:    for(int i = l;i < r;i++){
       39:   56-block  0
       49:   56-block  1
branch  0 taken 39
branch  1 taken 10 (fallthrough)
       39:   57:        if((*cmp)(get_position_vector(p_v, i, NULL), get_position_vector(p_v, l + cnt, NULL)) == 1){
       39:   57-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
branch  3 taken 10 (fallthrough)
branch  4 taken 29
       10:   58:            swap(get_position_vector(p_v, idx, NULL), get_position_vector(p_v, i, NULL), p_v->element_size);
       10:   58-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
       10:   59:            idx++;
        -:   60:        }
        -:   61:    }
        -:   62:
       10:   63:    sort(p_v, l, l + cnt, cmp);
       10:   63-block  0
call    0 returned 10
       10:   64:    sort(p_v, l + cnt + 1, r, cmp);
call    0 returned 10
        -:   65:}
        -:   66:
        -:   67:/*!
        -:   68: * @brief this function is responsible for freeing a string from a vector which holds pointers
        -:   69: * @param p_v
        -:   70: */
function free_vector_string called 11 returned 100% blocks executed 100%
       11:   71:void free_vector_string(void* p_v){
       11:   72:    free(*(char**)p_v);
       11:   73:}
        -:   74:
        -:   75:/*
        -:   76: * This implementation does exactly what it says it does in utils.h
        -:   77: */
function split_string called 2 returned 100% blocks executed 86%
        2:   78:vector_t* split_string(char* p_s, char delim, int* p_error){
        2:   79:    int tmp_error = 0;
        2:   80:    vector_t* p_v = create_vector(sizeof(int*), 0, &free_vector_string, &tmp_error);
        2:   80-block  0
call    0 returned 2
        -:   81:
        2:   82:    if(tmp_error != 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   83:        set_error(p_error, tmp_error);
    %%%%%:   83-block  0
call    0 never executed
    #####:   84:        delete_vector(p_v);
call    0 never executed
    #####:   85:        return NULL;
        -:   86:    }
        -:   87:
        2:   88:    char* p_last = NULL;
        -:   89:
       57:   90:    for(char* p_i = p_s;;p_i++){
        2:   90-block  0
       55:   90-block  1
       57:   91:        if(*p_i == delim || *p_i == '\0'){
       57:   91-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 21
       36:   91-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 34
       23:   92:            if(p_last == NULL){
       23:   92-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 21
        2:   93:                if(p_i != p_s){
        2:   93-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   94:                    char* tmp_p = malloc(p_i - p_s + 1);
        1:   95:                    memcpy(tmp_p, p_s, p_i - p_s);
        1:   96:                    tmp_p[p_i - p_s] = '\0';
        1:   97:                    push_back(p_v, &tmp_p, NULL);
        1:   97-block  0
call    0 returned 1
        -:   98:                }
        -:   99:            }else{
       21:  100:                if(p_last + 1 < p_i){
       21:  100-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 11
       10:  101:                    char* tmp_p = malloc(p_i - p_last);
       10:  102:                    memcpy(tmp_p, p_last + 1, p_i - p_last - 1);
       10:  103:                    tmp_p[p_i - p_last - 1] = '\0';
       10:  104:                    push_back(p_v, &tmp_p, NULL);
       10:  104-block  0
call    0 returned 10
        -:  105:                }
        -:  106:            }
       23:  107:            p_last = p_i;
       23:  108:            if(*p_i == '\0'){
       23:  108-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 21
        2:  109:                break;
        2:  109-block  0
        -:  110:            }
        -:  111:        }
        -:  112:    }
        -:  113:
        2:  114:    return p_v;
        2:  114-block  0
        -:  115:}
