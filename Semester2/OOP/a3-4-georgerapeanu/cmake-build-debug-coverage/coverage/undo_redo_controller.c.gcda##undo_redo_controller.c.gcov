        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/src/controller/undo_redo_controller.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/controller/undo_redo_controller.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/controller/undo_redo_controller.c.gcda
        -:    0:Runs:1
        -:    1:/*! @file undo_redo_controller.c this file containing the implementation for implementing the undo_operation-redo_operation controller
        -:    2: *  This controller is responsible for successfully applying undo_operation and redo_operation functions
        -:    3: */
        -:    4:
        -:    5:#pragma once
        -:    6:#include "../../include/controller/undo_redo_controller.h"
        -:    7:#include "../../include/domain/errors.h"
        -:    8:#include <stdlib.h>
        -:    9:
function create_undo_redo_controller called 1 returned 100% blocks executed 50%
        1:   10:undo_redo_controller_t* create_undo_redo_controller(undo_redo_repository_t* p_repository, int* p_error){
        1:   11:    undo_redo_controller_t* p_controller = (undo_redo_controller_t*)malloc(sizeof(undo_redo_controller_t));
        1:   12:    if(p_controller == NULL){
        1:   12-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   13:        set_error(p_error, 1);
    %%%%%:   13-block  0
call    0 never executed
    #####:   14:        delete_undo_redo_controller(p_controller);
call    0 never executed
    #####:   15:        return NULL;
        -:   16:    }
        1:   17:    p_controller->p_repository = p_repository;
        1:   18:    return p_controller;
        1:   18-block  0
        -:   19:}
        -:   20:
function delete_undo_redo_controller called 1 returned 100% blocks executed 100%
        1:   21:void delete_undo_redo_controller(undo_redo_controller_t* p_undo_redo_controller){
        1:   22:    if(p_undo_redo_controller != NULL){
        1:   22-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   23:        free(p_undo_redo_controller);
        1:   23-block  0
        -:   24:    }
        1:   25:}
        -:   26:
function undo called 11 returned 100% blocks executed 100%
       11:   27:void undo(undo_redo_controller_t* p_undo_redo_controller, int* p_error){
       11:   28:    undo_repository(p_undo_redo_controller->p_repository, p_error);
       11:   28-block  0
call    0 returned 11
       11:   29:}
        -:   30:
function redo called 2 returned 100% blocks executed 100%
        2:   31:void redo(undo_redo_controller_t* p_undo_redo_controller, int* p_error){
        2:   32:    redo_repository(p_undo_redo_controller->p_repository, p_error);
        2:   32-block  0
call    0 returned 2
        2:   33:}
