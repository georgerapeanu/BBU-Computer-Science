        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/tests/src/repository/repository_tests.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/repository/repository_tests.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/repository/repository_tests.c.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include "../../include/repository/repository_tests.h"
        -:    3:#include "../../../include/repository/repository.h"
        -:    4:#include "../../../include/domain/vector.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
function repository_test_create_delete_repository called 1 returned 100% blocks executed 83%
        1:    8:void repository_test_create_delete_repository(){
        1:    9:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:    9-block  0
call    0 returned 1
       1*:   10:    assert(p_repository->p_elements->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   10-block  0
call    2 never executed
        1:   11:    delete_repository(p_repository);
        1:   11-block  0
call    0 returned 1
        1:   12:    delete_repository(NULL);
call    0 returned 1
        1:   13:}
        -:   14:
function repository_test_add_repository called 1 returned 100% blocks executed 82%
        1:   15:void repository_test_add_repository(){
        1:   16:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:   16-block  0
call    0 returned 1
        1:   17:    int a = 0;
        1:   18:    a = 4;
        1:   19:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   20:    a = 5;
        1:   21:    add_repository(p_repository, &a, NULL);
call    0 returned 1
       1*:   22:    assert(*(int*)get_position_repository(p_repository, 0, NULL) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   22-block  0
call    3 never executed
       1*:   23:    assert(*(int*)get_position_repository(p_repository, 1, NULL) == 5);
        1:   23-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   23-block  1
call    3 never executed
        1:   24:    delete_repository(p_repository);
        1:   24-block  0
call    0 returned 1
        1:   25:}
        -:   26:
function filter_test called 6 returned 100% blocks executed 100%
        6:   27:int filter_test(int* a, void** args){
        6:   28:    return *a < ((int*)args)[0];
        6:   28-block  0
        -:   29:}
        -:   30:
function repository_test_filter_repository called 1 returned 100% blocks executed 80%
        1:   31:void repository_test_filter_repository(){
        1:   32:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:   32-block  0
call    0 returned 1
        1:   33:    int a = 0;
        1:   34:    a = 4;
        1:   35:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   36:    a = 5;
        1:   37:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   38:    a = 1;
        1:   39:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        -:   40:
        -:   41:    vector_t* p_v;
        -:   42:
        1:   43:    a = 1;
        1:   44:    p_v = filter_repository(p_repository, &filter_test, &a,NULL);
call    0 returned 1
       1*:   45:    assert(p_v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   45-block  0
call    2 never executed
        1:   46:    delete_vector(p_v);
        1:   46-block  0
call    0 returned 1
        -:   47:
        1:   48:    a = 5;
        1:   49:    p_v = filter_repository(p_repository, &filter_test, &a,NULL);
call    0 returned 1
       1*:   50:    assert(p_v->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  0
call    2 never executed
       1*:   51:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 0);
        1:   51-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   51-block  1
call    3 never executed
       1*:   52:    assert(*(int*)get_position_vector(p_v, 1, NULL) == 2);
        1:   52-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   52-block  1
call    3 never executed
        1:   53:    delete_vector(p_v);
        1:   53-block  0
call    0 returned 1
        -:   54:
        1:   55:    delete_repository(p_repository);
call    0 returned 1
        1:   56:}
        -:   57:
function repository_test_update_repository called 1 returned 100% blocks executed 80%
        1:   58:void repository_test_update_repository(){
        1:   59:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:   59-block  0
call    0 returned 1
        1:   60:    int a = 0;
        1:   61:    a = 4;
        1:   62:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   63:    a = 5;
        1:   64:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   65:    a = 2;
        1:   66:    update_repository(p_repository, 1, &a, NULL);
call    0 returned 1
        1:   67:    int tmp_error = 0;
        1:   68:    update_repository(p_repository,-1, &a,&tmp_error);
call    0 returned 1
       1*:   69:    assert(tmp_error == 7);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   69-block  0
call    2 never executed
        1:   70:    tmp_error = 0;
       1*:   71:    assert(*(int*)get_position_repository(p_repository, 0, NULL) == 4);
        1:   71-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  1
call    3 never executed
       1*:   72:    assert(*(int*)get_position_repository(p_repository, 1, NULL) == 2);
        1:   72-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   72-block  1
call    3 never executed
        1:   73:    delete_repository(p_repository);
        1:   73-block  0
call    0 returned 1
        1:   74:}
        -:   75:
function repository_test_remove_repository called 1 returned 100% blocks executed 83%
        1:   76:void repository_test_remove_repository(){
        1:   77:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:   77-block  0
call    0 returned 1
        1:   78:    int a = 0;
        1:   79:    a = 4;
        1:   80:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   81:    a = 5;
        1:   82:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   83:    a = 2;
        1:   84:    remove_repository(p_repository, 0, NULL);
call    0 returned 1
        1:   85:    int tmp_error = 0;
        1:   86:    remove_repository(p_repository, 1, &tmp_error);
call    0 returned 1
       1*:   87:    assert(tmp_error == 7);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   87-block  0
call    2 never executed
        1:   88:    tmp_error = 0;
       1*:   89:    assert(*(int*)get_position_repository(p_repository, 0, NULL) == 5);
        1:   89-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   89-block  1
call    3 never executed
        1:   90:    delete_repository(p_repository);
        1:   90-block  0
call    0 returned 1
        1:   91:}
        -:   92:
function repository_test_get_position_repository called 1 returned 100% blocks executed 82%
        1:   93:void repository_test_get_position_repository(){
        1:   94:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:   94-block  0
call    0 returned 1
        1:   95:    int a = 0;
        1:   96:    a = 4;
        1:   97:    add_repository(p_repository, &a, NULL);
call    0 returned 1
        1:   98:    a = 5;
        1:   99:    add_repository(p_repository, &a, NULL);
call    0 returned 1
       1*:  100:    assert(*(int*)get_position_repository(p_repository, 0, NULL) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  100-block  0
call    3 never executed
       1*:  101:    assert(*(int*)get_position_repository(p_repository, 1, NULL) == 5);
        1:  101-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  101-block  1
call    3 never executed
        1:  102:    delete_repository(p_repository);
        1:  102-block  0
call    0 returned 1
        1:  103:}
        -:  104:
        -:  105:
function repository_test_get_size called 1 returned 100% blocks executed 79%
        1:  106:void repository_test_get_size(){
        1:  107:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:  107-block  0
call    0 returned 1
        1:  108:    int a = 0;
       1*:  109:    assert(get_repository_size(p_repository) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  109-block  0
call    3 never executed
        1:  110:    a = 4;
        1:  111:    add_repository(p_repository, &a, NULL);
        1:  111-block  0
call    0 returned 1
       1*:  112:    assert(get_repository_size(p_repository) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  112-block  0
call    3 never executed
        1:  113:    a = 5;
        1:  114:    add_repository(p_repository, &a, NULL);
        1:  114-block  0
call    0 returned 1
       1*:  115:    assert(get_repository_size(p_repository) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  115-block  0
call    3 never executed
        1:  116:    delete_repository(p_repository);
        1:  116-block  0
call    0 returned 1
        1:  117:}
        -:  118:
function repository_test_get_element_size called 1 returned 100% blocks executed 79%
        1:  119:void repository_test_get_element_size(){
        1:  120:    repository_t* p_repository = create_repository(sizeof(int), NULL, NULL);
        1:  120-block  0
call    0 returned 1
        1:  121:    int a = 0;
       1*:  122:    assert(get_repository_element_size(p_repository) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  122-block  0
call    3 never executed
        1:  123:    a = 4;
        1:  124:    add_repository(p_repository, &a, NULL);
        1:  124-block  0
call    0 returned 1
       1*:  125:    assert(get_repository_element_size(p_repository) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  125-block  0
call    3 never executed
        1:  126:    a = 5;
        1:  127:    add_repository(p_repository, &a, NULL);
        1:  127-block  0
call    0 returned 1
       1*:  128:    assert(get_repository_element_size(p_repository) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  128-block  0
call    3 never executed
        1:  129:    delete_repository(p_repository);
        1:  129-block  0
call    0 returned 1
        1:  130:}
        -:  131:
function repository_test_all called 1 returned 100% blocks executed 100%
        1:  132:void repository_test_all(){
        1:  133:    repository_test_create_delete_repository();
        1:  133-block  0
call    0 returned 1
        1:  134:    repository_test_add_repository();
call    0 returned 1
        1:  135:    repository_test_filter_repository();
call    0 returned 1
        1:  136:    repository_test_update_repository();
call    0 returned 1
        1:  137:    repository_test_remove_repository();
call    0 returned 1
        1:  138:    repository_test_get_position_repository();
call    0 returned 1
        1:  139:    repository_test_get_size();
call    0 returned 1
        1:  140:    repository_test_get_element_size();
call    0 returned 1
        1:  141:}
