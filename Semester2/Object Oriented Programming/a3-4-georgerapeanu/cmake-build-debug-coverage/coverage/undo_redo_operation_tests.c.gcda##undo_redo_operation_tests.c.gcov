        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/tests/src/domain/undo_redo_operation_tests.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/domain/undo_redo_operation_tests.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/domain/undo_redo_operation_tests.c.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include "../../../include/domain/operation.h"
        -:    3:#include "../../../include/domain/undo_redo_operation.h"
        -:    4:#include "../../include/domain/undo_redo_operation_tests.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
function increment_value called 6 returned 100% blocks executed 100%
        6:    8:static void increment_value(int* p_value, int delta, int* p_error){
        6:    9:    (*p_value) += delta;
        6:   10:}
        -:   11:
function increment_from_args called 6 returned 100% blocks executed 83%
        6:   12:static void increment_from_args(vector_t* args, int* p_error){
       6*:   13:    assert(args->size == 2);
        6:   13-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%:   13-block  1
call    2 never executed
        6:   14:    int* p_value = *(int**) get_position_vector(args, 0, NULL);
        6:   14-block  0
call    0 returned 6
        6:   15:    int* p_delta = *(int**) get_position_vector(args, 1, NULL);
call    0 returned 6
        6:   16:    increment_value(p_value, *p_delta, p_error);
call    0 returned 6
        6:   17:}
        -:   18:
function free_args called 4 returned 100% blocks executed 75%
        4:   19:static void free_args(vector_t* args){
       4*:   20:    assert(args->size == 2);
        4:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%:   20-block  1
call    2 never executed
        4:   21:    free(*(int**) get_position_vector(args, 1, NULL));
        4:   21-block  0
call    0 returned 4
        4:   22:}
        -:   23:
        -:   24:
function undo_redo_operation_test_create_delete_undo_redo_operation called 1 returned 100% blocks executed 100%
        1:   25:void undo_redo_operation_test_create_delete_undo_redo_operation(){
        1:   26:    int* p_a = (int*)malloc(sizeof(int));
        -:   27:    int* p_delta;
        1:   28:    p_delta = (int*)malloc(sizeof(int));
        1:   29:    *p_delta = -5;
        1:   30:    *p_a = 0;
        1:   31:    vector_t* undo_args = create_vector(sizeof(int*), 0, NULL, NULL);
        1:   31-block  0
call    0 returned 1
        1:   32:    push_back(undo_args, &p_a, NULL);
call    0 returned 1
        1:   33:    push_back(undo_args, &p_delta, NULL);
call    0 returned 1
        1:   34:    operation_t* p_undo_operation = create_operation(&increment_from_args, undo_args, &free_args, NULL);
call    0 returned 1
        -:   35:
        1:   36:    p_delta = (int*)malloc(sizeof(int));
        1:   37:    *p_delta = 5;
        1:   38:    vector_t* redo_args = create_vector(sizeof(int*), 0, NULL, NULL);
call    0 returned 1
        1:   39:    push_back(redo_args, &p_a, NULL);
call    0 returned 1
        1:   40:    push_back(redo_args, &p_delta, NULL);
call    0 returned 1
        1:   41:    operation_t* p_redo_operation = create_operation(&increment_from_args, redo_args, &free_args, NULL);
call    0 returned 1
        -:   42:
        1:   43:    undo_redo_operation_t* p_operation = create_undo_redo_operation(p_undo_operation, p_redo_operation, NULL);
call    0 returned 1
        1:   44:    delete_undo_redo_operation(p_operation);
call    0 returned 1
        1:   45:    free(p_a);
        1:   46:}
        -:   47:
function undo_redo_operation_test_undo_redo called 1 returned 100% blocks executed 79%
        1:   48:void undo_redo_operation_test_undo_redo(){
        1:   49:    int* p_a = (int*)malloc(sizeof(int));
        -:   50:    int* p_delta;
        1:   51:    p_delta = (int*)malloc(sizeof(int));
        1:   52:    *p_delta = -5;
        1:   53:    *p_a = 0;
        1:   54:    vector_t* undo_args = create_vector(sizeof(int*), 0, NULL, NULL);
        1:   54-block  0
call    0 returned 1
        1:   55:    push_back(undo_args, &p_a, NULL);
call    0 returned 1
        1:   56:    push_back(undo_args, &p_delta, NULL);
call    0 returned 1
        1:   57:    operation_t* p_undo_operation = create_operation(&increment_from_args, undo_args, &free_args, NULL);
call    0 returned 1
        -:   58:
        1:   59:    p_delta = (int*)malloc(sizeof(int));
        1:   60:    *p_delta = 5;
        1:   61:    vector_t* redo_args = create_vector(sizeof(int*), 0, NULL, NULL);
call    0 returned 1
        1:   62:    push_back(redo_args, &p_a, NULL);
call    0 returned 1
        1:   63:    push_back(redo_args, &p_delta, NULL);
call    0 returned 1
        1:   64:    operation_t* p_redo_operation = create_operation(&increment_from_args, redo_args, &free_args, NULL);
call    0 returned 1
        -:   65:
        1:   66:    undo_redo_operation_t* p_operation = create_undo_redo_operation(p_undo_operation, p_redo_operation, NULL);
call    0 returned 1
        1:   67:    redo_operation(p_operation, NULL);
call    0 returned 1
       1*:   68:    assert(*p_a == 5);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   68-block  0
call    2 never executed
        1:   69:    undo_operation(p_operation, NULL);
        1:   69-block  0
call    0 returned 1
       1*:   70:    assert(*p_a == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  0
call    2 never executed
        1:   71:    redo_operation(p_operation, NULL);
        1:   71-block  0
call    0 returned 1
       1*:   72:    assert(*p_a == 5);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   72-block  0
call    2 never executed
        1:   73:    redo_operation(p_operation, NULL);
        1:   73-block  0
call    0 returned 1
       1*:   74:    assert(*p_a == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   74-block  0
call    2 never executed
        1:   75:    redo_operation(p_operation, NULL);
        1:   75-block  0
call    0 returned 1
       1*:   76:    assert(*p_a == 15);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   76-block  0
call    2 never executed
        1:   77:    undo_operation(p_operation, NULL);
        1:   77-block  0
call    0 returned 1
       1*:   78:    assert(*p_a == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   78-block  0
call    2 never executed
        1:   79:    delete_undo_redo_operation(p_operation);
        1:   79-block  0
call    0 returned 1
        1:   80:    free(p_a);
        1:   81:}
        -:   82:
function undo_redo_operation_test_all called 1 returned 100% blocks executed 100%
        1:   83:void undo_redo_operation_test_all(){
        1:   84:    undo_redo_operation_test_create_delete_undo_redo_operation();
        1:   84-block  0
call    0 returned 1
        1:   85:    undo_redo_operation_test_undo_redo();
call    0 returned 1
        1:   86:}
