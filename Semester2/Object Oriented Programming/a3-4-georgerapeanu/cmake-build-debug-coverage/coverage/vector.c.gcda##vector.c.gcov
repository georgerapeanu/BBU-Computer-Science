        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/src/domain/vector.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/domain/vector.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/src/domain/vector.c.gcda
        -:    0:Runs:1
        -:    1:/*! @file vector.c
        -:    2: * @brief This file contains the implementation for the vector structure implemented in vector.h
        -:    3: *
        -:    4: */
        -:    5:
        -:    6:#pragma once
        -:    7:#include "../../include/domain/vector.h"
        -:    8:#include "../../include/domain/errors.h"
        -:    9:#include <stdlib.h>
        -:   10:#include <string.h>
        -:   11:
        -:   12:/*
        -:   13: * This implementation does exactly what it says it does in vector.h
        -:   14: */
function create_vector called 208 returned 100% blocks executed 67%
      208:   15:vector_t* create_vector(int element_size, int initial_size, void (*free_element_data)(), int* p_error){
      208:   16:    if(element_size < 1){
      208:   16-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 206
        2:   17:        set_error(p_error, 2);
        2:   17-block  0
call    0 returned 2
        2:   18:        return NULL;
        -:   19:    }
      206:   20:    if(initial_size < 0){
      206:   20-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 204
        2:   21:        set_error(p_error, 3);
        2:   21-block  0
call    0 returned 2
        2:   22:        return NULL;
        -:   23:    }
      204:   24:    vector_t* p_vector = (vector_t*)malloc(sizeof(vector_t));
      204:   25:    if(p_vector == NULL){
      204:   25-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 204
    #####:   26:        delete_vector(p_vector);
    %%%%%:   26-block  0
call    0 never executed
    #####:   27:        set_error(p_error, 1);
call    0 never executed
    #####:   28:        return NULL;
        -:   29:    }
      204:   30:    p_vector->size = initial_size;
      204:   31:    p_vector->element_size = element_size;
      204:   32:    p_vector->capacity = initial_size;
      204:   33:    if(p_vector->capacity < 1){
      204:   33-block  0
branch  0 taken 203 (fallthrough)
branch  1 taken 1
      203:   34:        p_vector->capacity = 1;
      203:   34-block  0
        -:   35:    }
      204:   36:    p_vector->elements = malloc(element_size * p_vector->capacity);
      204:   37:    if(p_vector->elements == NULL){
      204:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 204
    #####:   38:        delete_vector(p_vector);
    %%%%%:   38-block  0
call    0 never executed
    #####:   39:        set_error(p_error, 1);
call    0 never executed
    #####:   40:        return NULL;
        -:   41:    }
      204:   42:    p_vector->free_elem_data = free_element_data;
      204:   43:    return p_vector;
      204:   43-block  0
        -:   44:}
        -:   45:
        -:   46:/*
        -:   47: * This implementation does exactly what it says it does in vector.h
        -:   48: */
function delete_vector called 205 returned 100% blocks executed 100%
      205:   49:void delete_vector(vector_t* p_v){
      205:   50:    if(p_v == NULL){
      205:   50-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 204
        1:   51:        return;
        1:   51-block  0
        -:   52:    }
      204:   53:    if(p_v->free_elem_data != NULL){
      204:   53-block  0
branch  0 taken 30 (fallthrough)
branch  1 taken 174
       92:   54:        for(int i = 0;i < p_v->size;i++){
       30:   54-block  0
       92:   54-block  1
branch  0 taken 62
branch  1 taken 30 (fallthrough)
       62:   55:            p_v->free_elem_data(get_position_vector(p_v, i, NULL));
       62:   55-block  0
call    0 returned 62
call    1 returned 62
        -:   56:        }
        -:   57:    }
      204:   58:    if(p_v->elements != NULL){
      204:   58-block  0
branch  0 taken 204 (fallthrough)
branch  1 taken 0
      204:   59:        free(p_v->elements);
      204:   59-block  0
        -:   60:    }
      204:   61:    free(p_v);
      204:   61-block  0
        -:   62:}
        -:   63:
        -:   64:/*
        -:   65: * This implementation does exactly what it says it does in vector.h
        -:   66: */
function resize called 3 returned 100% blocks executed 82%
        3:   67:void resize(vector_t* p_v, int size, int* p_error){
        3:   68:    if(size < 1){
        3:   68-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   69:        set_error(p_error, 3);
        1:   69-block  0
call    0 returned 1
        1:   70:        return ;
        -:   71:    }
        2:   72:    void* p_new_elements = malloc(p_v->element_size * size);
        2:   73:    if(p_new_elements == NULL){
        2:   73-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   74:        set_error(p_error, 1);
    %%%%%:   74-block  0
call    0 never executed
    #####:   75:        return ;
        -:   76:    }
        2:   77:    if(p_v->size < size){
        2:   77-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   78:        memcpy(p_new_elements, p_v->elements, p_v->element_size * p_v->size);
        1:   78-block  0
        -:   79:    }else{
        1:   80:        memcpy(p_new_elements, p_v->elements, p_v->element_size * size);
        1:   80-block  0
        -:   81:    }
        2:   82:    free(p_v->elements);
        2:   83:    p_v->size = p_v->capacity = size;
        2:   84:    p_v->elements = p_new_elements;
        2:   84-block  0
        -:   85:}
        -:   86:
        -:   87:/*
        -:   88: * This implementation does exactly what it says it does in vector.h
        -:   89: */
function change_capacity_vector called 155 returned 100% blocks executed 75%
      155:   90:void change_capacity_vector(vector_t* p_v, int capacity, int* p_error){
      155:   91:    if(capacity < p_v->capacity){
      155:   91-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 154
        1:   92:        set_error(p_error, 4);
        1:   92-block  0
call    0 returned 1
        1:   93:        return;
        -:   94:    }
      154:   95:    void* p_new_elements = malloc(p_v->element_size * capacity);
      154:   96:    if(p_new_elements == NULL){
      154:   96-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 154
    #####:   97:        set_error(p_error, 1);
    %%%%%:   97-block  0
call    0 never executed
    #####:   98:        return ;
        -:   99:    }
      154:  100:    memcpy(p_new_elements, p_v->elements, p_v->element_size * p_v->size);
      154:  101:    free(p_v->elements);
      154:  102:    p_v->capacity = capacity;
      154:  103:    p_v->elements = p_new_elements;
      154:  103-block  0
        -:  104:}
        -:  105:
        -:  106:/*
        -:  107: * This implementation does exactly what it says it does in vector.h
        -:  108: */
function push_back called 350 returned 100% blocks executed 75%
      350:  109:void push_back(vector_t* p_v, const void* p_element, int* p_error){
      350:  110:    if(p_v->size == p_v->capacity){
      350:  110-block  0
branch  0 taken 153 (fallthrough)
branch  1 taken 197
      153:  111:        int tmp_error = 0;
      153:  112:        change_capacity_vector(p_v, 2 * p_v->capacity, &tmp_error);
      153:  112-block  0
call    0 returned 153
      153:  113:        if(tmp_error != 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 153
    #####:  114:            set_error(p_error, tmp_error);
    %%%%%:  114-block  0
call    0 never executed
    #####:  115:            return ;
        -:  116:        }
        -:  117:    }
      350:  118:    memcpy(p_v->elements + p_v->size * p_v->element_size, p_element, p_v->element_size);
      350:  119:    p_v->size++;
      350:  119-block  0
        -:  120:}
        -:  121:
        -:  122:/*
        -:  123: * This implementation does exactly what it says it does in vector.h
        -:  124: */
function pop_back called 16 returned 100% blocks executed 100%
       16:  125:void pop_back(vector_t* p_v, int* p_error){
       16:  126:    if(p_v->size == 0){
       16:  126-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 15
        1:  127:        set_error(p_error, 5);
        1:  127-block  0
call    0 returned 1
        1:  128:        return ;
        -:  129:    }
       15:  130:    if(p_v->free_elem_data != NULL){
       15:  130-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 4
       11:  131:        p_v->free_elem_data(get_position_vector(p_v, p_v->size - 1, NULL));
       11:  131-block  0
call    0 returned 11
call    1 returned 11
        -:  132:    }
       15:  133:    p_v->size--;
       15:  133-block  0
        -:  134:}
        -:  135:
        -:  136:/*
        -:  137: * This implementation does exactly what it says it does in vector.h
        -:  138: */
function get_position_vector called 1003 returned 100% blocks executed 100%
     1003:  139:void* get_position_vector(const vector_t *p_v, int pos, int *p_error){
     1003:  140:    if(pos < 0 || pos >= p_v->size){
     1003:  140-block  0
branch  0 taken 1002 (fallthrough)
branch  1 taken 1
     1002:  140-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1001
        2:  141:        set_error(p_error, 6);
        2:  141-block  0
call    0 returned 2
        2:  142:        return NULL;
        -:  143:    }
     1001:  144:    return p_v->elements + pos * p_v->element_size;
     1001:  144-block  0
        -:  145:}
        -:  146:
        -:  147:/*
        -:  148: * This implementation does exactly what it says it does in vector.h
        -:  149: */
function set_position_vector called 10 returned 100% blocks executed 100%
       10:  150:void set_position_vector(vector_t *p_v, int pos, const void* p_element, int *p_error){
       10:  151:    if(pos < 0 || pos >= p_v->size){
       10:  151-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        8:  151-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 7
        3:  152:        set_error(p_error, 6);
        3:  152-block  0
call    0 returned 3
        3:  153:        return;
        -:  154:    }
        7:  155:    memcpy(p_v->elements + pos * p_v->element_size, p_element, p_v->element_size);
        7:  155-block  0
        -:  156:}
        -:  157:
        -:  158:
        -:  159:
        -:  160:
        -:  161:
