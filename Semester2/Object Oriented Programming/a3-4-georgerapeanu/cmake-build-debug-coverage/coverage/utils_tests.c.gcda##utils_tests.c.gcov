        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/tests/src/utils/utils_tests.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/utils/utils_tests.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/utils/utils_tests.c.gcda
        -:    0:Runs:1
        -:    1:/*!@file utils_tests.c contains the implementation for the utils_test functions
        -:    2: *
        -:    3: */
        -:    4:
        -:    5:#pragma once
        -:    6:
        -:    7:#include "../../../include/utils/utils.h"
        -:    8:#include "../../../include/domain/vector.h"
        -:    9:#include <stdlib.h>
        -:   10:#include <assert.h>
        -:   11:#include <string.h>
        -:   12:
function utils_test_get_lowercase called 1 returned 100% blocks executed 75%
        1:   13:void utils_test_get_lowercase(){
        1:   14:    char* p_s = get_lowercase("asf  aASFAFASFasfasfsafASFASFavbvaCCzzZZ^^", NULL);
        1:   14-block  0
call    0 returned 1
       1*:   15:    assert(strcmp(p_s,"asf  aasfafasfasfasfsafasfasfavbvacczzzz^^") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   15-block  0
call    2 never executed
        1:   16:    free(p_s);
        1:   17:}
        -:   18:
function normal_int_cmp called 41 returned 100% blocks executed 100%
       41:   19:static int normal_int_cmp(int* p_a, int* p_b){
       41:   20:    return *p_a < *p_b;
       41:   20-block  0
        -:   21:}
        -:   22:
function utils_test_sort called 1 returned 100% blocks executed 78%
        1:   23:void utils_test_sort(){
        1:   24:    vector_t* p_v = create_vector(4, 0, NULL,NULL);
        1:   24-block  0
call    0 returned 1
        1:   25:    int a = 0;
        1:   26:    a = 1;
        1:   27:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   28:    a = 59;
        1:   29:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   30:    a = 2;
        1:   31:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   32:    a = 3;
        1:   33:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   34:    a = 0;
        1:   35:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   36:    a = 6;
        1:   37:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   38:    a = 8;
        1:   39:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   40:    a = 1;
        1:   41:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   42:    sort(p_v, 0, p_v->size, &normal_int_cmp);
call    0 returned 1
        -:   43:
       1*:   44:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   44-block  0
call    3 never executed
       1*:   45:    assert(*(int*)get_position_vector(p_v, 1, NULL) == 1);
        1:   45-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   45-block  1
call    3 never executed
       1*:   46:    assert(*(int*)get_position_vector(p_v, 2, NULL) == 1);
        1:   46-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   46-block  1
call    3 never executed
       1*:   47:    assert(*(int*)get_position_vector(p_v, 3, NULL) == 2);
        1:   47-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   47-block  1
call    3 never executed
       1*:   48:    assert(*(int*)get_position_vector(p_v, 4, NULL) == 3);
        1:   48-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   48-block  1
call    3 never executed
       1*:   49:    assert(*(int*)get_position_vector(p_v, 5, NULL) == 6);
        1:   49-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   49-block  1
call    3 never executed
       1*:   50:    assert(*(int*)get_position_vector(p_v, 6, NULL) == 8);
        1:   50-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   50-block  1
call    3 never executed
       1*:   51:    assert(*(int*)get_position_vector(p_v, 7, NULL) == 59);
        1:   51-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   51-block  1
call    3 never executed
        -:   52:
        1:   53:    delete_vector(p_v);
        1:   53-block  0
call    0 returned 1
        1:   54:}
        -:   55:
function utils_test_swap called 1 returned 100% blocks executed 67%
        1:   56:void utils_test_swap(){
        1:   57:    char *p1 = malloc(12);
        1:   58:    char *p2 = malloc(12);
        1:   59:    strcpy(p1, "ASFAsafaafa");
        1:   60:    strcpy(p2, "ooooooooooo");
        1:   61:    swap(p1, p2, 5);
        1:   61-block  0
call    0 returned 1
       1*:   62:    assert(strcmp(p1, "oooooafaafa") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   62-block  0
call    2 never executed
       1*:   63:    assert(strcmp(p2, "ASFAsoooooo") == 0);
        1:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   63-block  1
call    2 never executed
        1:   64:    free(p1);
        1:   65:    free(p2);
        1:   66:}
        -:   67:
function utils_test_split_string called 1 returned 100% blocks executed 69%
        1:   68:void utils_test_split_string(){
        1:   69:    vector_t* p_v = split_string("   this is my   test a   123   ", ' ', NULL);
        1:   69-block  0
call    0 returned 1
       1*:   70:    assert(p_v->size == 6);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  0
call    2 never executed
       1*:   71:    assert(strcmp(*(char**)get_position_vector(p_v, 0, NULL), "this") == 0);
        1:   71-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  1
call    3 never executed
       1*:   72:    assert(strcmp(*(char**)get_position_vector(p_v, 1, NULL), "is") == 0);
        1:   72-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   72-block  1
call    3 never executed
       1*:   73:    assert(strcmp(*(char**)get_position_vector(p_v, 2, NULL), "my") == 0);
        1:   73-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   73-block  1
call    3 never executed
       1*:   74:    assert(strcmp(*(char**)get_position_vector(p_v, 3, NULL), "test") == 0);
        1:   74-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  1
call    3 never executed
       1*:   75:    assert(strcmp(*(char**)get_position_vector(p_v, 4, NULL), "a") == 0);
        1:   75-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   75-block  1
call    3 never executed
       1*:   76:    assert(strcmp(*(char**)get_position_vector(p_v, 5, NULL), "123") == 0);
        1:   76-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   76-block  1
call    3 never executed
        1:   77:    delete_vector(p_v);
        1:   77-block  0
call    0 returned 1
        1:   78:    p_v = split_string("his,isaa,my,test a,,,123", ',', NULL);
call    0 returned 1
       1*:   79:    assert(p_v->size == 5);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   79-block  0
call    2 never executed
       1*:   80:    assert(strcmp(*(char**)get_position_vector(p_v, 0, NULL), "his") == 0);
        1:   80-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   80-block  1
call    3 never executed
       1*:   81:    assert(strcmp(*(char**)get_position_vector(p_v, 1, NULL), "isaa") == 0);
        1:   81-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   81-block  1
call    3 never executed
       1*:   82:    assert(strcmp(*(char**)get_position_vector(p_v, 2, NULL), "my") == 0);
        1:   82-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   82-block  1
call    3 never executed
       1*:   83:    assert(strcmp(*(char**)get_position_vector(p_v, 3, NULL), "test a") == 0);
        1:   83-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   83-block  1
call    3 never executed
       1*:   84:    assert(strcmp(*(char**)get_position_vector(p_v, 4, NULL), "123") == 0);
        1:   84-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   84-block  1
call    3 never executed
        1:   85:    delete_vector(p_v);
        1:   85-block  0
call    0 returned 1
        1:   86:}
        -:   87:
function utils_test_all called 1 returned 100% blocks executed 100%
        1:   88:void utils_test_all(){
        1:   89:    utils_test_split_string();
        1:   89-block  0
call    0 returned 1
        1:   90:    utils_test_get_lowercase();
call    0 returned 1
        1:   91:    utils_test_swap();
call    0 returned 1
        1:   92:    utils_test_sort();
call    0 returned 1
        1:   93:}
