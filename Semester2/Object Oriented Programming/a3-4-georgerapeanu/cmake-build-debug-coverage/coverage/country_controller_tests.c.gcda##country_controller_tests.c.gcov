        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/tests/src/controller/country_controller_tests.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/controller/country_controller_tests.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/controller/country_controller_tests.c.gcda
        -:    0:Runs:1
        -:    1:/*! @file country_controller_tests.c This file contains the implementations for the test functions for country_controller
        -:    2: *
        -:    3: */
        -:    4:
        -:    5:#pragma once
        -:    6:#include "../../../include/domain/errors.h"
        -:    7:#include "../../../include/repository/repository.h"
        -:    8:#include "../../../include/domain/country.h"
        -:    9:#include "../../../include/controller/country_controller.h"
        -:   10:#include "../../include/controller//country_controller_tests.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:
        -:   16:/*
        -:   17: * This implementation does exactly what it says it does in country_controller_tests.h
        -:   18: */
function country_controller_test_create_delete_country_controller called 1 returned 100% blocks executed 100%
        1:   19:void country_controller_test_create_delete_country_controller(){
        1:   20:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:   20-block  0
call    0 returned 1
        1:   21:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:   22:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:   23:    delete_country_controller(p_controller);
call    0 returned 1
        1:   24:    delete_repository(p_repository);
call    0 returned 1
        1:   25:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:   26:}
        -:   27:
        -:   28:/*
        -:   29: * This implementation does exactly what it says it does in country_controller_tests.h
        -:   30: */
function country_controller_test_add_country_ui called 1 returned 100% blocks executed 77%
        1:   31:void country_controller_test_add_country_ui(){
        1:   32:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:   32-block  0
call    0 returned 1
        1:   33:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:   34:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:   35:    int tmp_error = 0;
        1:   36:    add_country_ui(p_controller, "aaaaa", "a", 23, 0, &tmp_error);
call    0 returned 1
       1*:   37:    assert(tmp_error == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   37-block  0
call    2 never executed
        1:   38:    tmp_error = 0;
        1:   39:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
        1:   39-block  0
call    0 returned 1
       1*:   40:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   40-block  0
call    2 never executed
        -:   41:
        1:   42:    add_country_ui(p_controller, "aaaaa", "europe", 23, 0, &tmp_error);
        1:   42-block  0
call    0 returned 1
       1*:   43:    assert(tmp_error == 8);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   43-block  0
call    2 never executed
        1:   44:    tmp_error = 0;
        -:   45:
        1:   46:    add_country_ui(p_controller, "aaaasaaa", "europe", -1, 0, &tmp_error);
        1:   46-block  0
call    0 returned 1
       1*:   47:    assert(tmp_error == 9);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   47-block  0
call    2 never executed
        1:   48:    tmp_error = 0;
        -:   49:
        1:   50:    vector_t* p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:   50-block  0
call    0 returned 1
       1*:   51:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   51-block  0
call    2 never executed
       1*:   52:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:   52-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   52-block  1
call    3 never executed
        1:   53:    delete_vector(p_v);
        1:   53-block  0
call    0 returned 1
        1:   54:    delete_country_controller(p_controller);
call    0 returned 1
        1:   55:    delete_repository(p_repository);
call    0 returned 1
        1:   56:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:   57:}
        -:   58:
        -:   59:/*
        -:   60: * This implementation does exactly what it says it does in country_controller_tests.h
        -:   61: */
function country_controller_test_add_country_from_args called 1 returned 100% blocks executed 85%
        1:   62:void country_controller_test_add_country_from_args(){
        1:   63:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:   63-block  0
call    0 returned 1
        1:   64:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:   65:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:   66:    int tmp_error = 0;
        -:   67:
        1:   68:    vector_t* args = create_vector(sizeof(int*), 0, NULL, NULL);
call    0 returned 1
        1:   69:    char* p_country_name = malloc(20);
        1:   70:    char* p_continent = malloc(20);
        1:   71:    int* p_population = malloc(sizeof(int));
        1:   72:    int* p_make_undo_redo = malloc(sizeof(int));
        -:   73:
        1:   74:    strcpy(p_country_name, "aaaaa");
        1:   75:    strcpy(p_continent, "europe");
        1:   76:    *p_population = 23;
        1:   77:    *p_make_undo_redo = 0;
        -:   78:
        1:   79:    add_country_from_args(args, &tmp_error);
call    0 returned 1
       1*:   80:    assert(tmp_error == 18);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   80-block  0
call    2 never executed
        1:   81:    tmp_error = 0;
        -:   82:
        1:   83:    push_back(args, &p_controller, NULL);
        1:   83-block  0
call    0 returned 1
        1:   84:    push_back(args, &p_country_name, NULL);
call    0 returned 1
        1:   85:    push_back(args, &p_continent, NULL);
call    0 returned 1
        1:   86:    push_back(args, &p_population, NULL);
call    0 returned 1
        1:   87:    push_back(args, &p_make_undo_redo, NULL);
call    0 returned 1
        -:   88:
        -:   89:
        1:   90:    add_country_from_args(args, &tmp_error);
call    0 returned 1
        1:   91:    free(p_population);
        1:   92:    free(p_make_undo_redo);
        1:   93:    free(p_continent);
        1:   94:    free(p_country_name);
        -:   95:
        1:   96:    delete_vector(args);
call    0 returned 1
       1*:   97:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   97-block  0
call    2 never executed
        -:   98:
        1:   99:    vector_t* p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:   99-block  0
call    0 returned 1
       1*:  100:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  100-block  0
call    2 never executed
       1*:  101:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  101-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  101-block  1
call    3 never executed
        1:  102:    delete_vector(p_v);
        1:  102-block  0
call    0 returned 1
        1:  103:    delete_country_controller(p_controller);
call    0 returned 1
        1:  104:    delete_repository(p_repository);
call    0 returned 1
        1:  105:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  106:}
        -:  107:
        -:  108:/*
        -:  109: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  110: */
function country_controller_test_remove_country_ui called 1 returned 100% blocks executed 74%
        1:  111:void country_controller_test_remove_country_ui(){
        1:  112:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  112-block  0
call    0 returned 1
        1:  113:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  114:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  115:    int tmp_error = 0;
        1:  116:    add_country_ui(p_controller, "aaaaa", "a", 23, 0, &tmp_error);
call    0 returned 1
       1*:  117:    assert(tmp_error == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  117-block  0
call    2 never executed
        1:  118:    tmp_error = 0;
        1:  119:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
        1:  119-block  0
call    0 returned 1
       1*:  120:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  120-block  0
call    2 never executed
        -:  121:
        1:  122:    vector_t* p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:  122-block  0
call    0 returned 1
       1*:  123:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  123-block  0
call    2 never executed
       1*:  124:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  124-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  124-block  1
call    3 never executed
        1:  125:    delete_vector(p_v);
        1:  125-block  0
call    0 returned 1
        -:  126:
        1:  127:    add_country_ui(p_controller, "aaab", "europe", 100, 0, &tmp_error);
call    0 returned 1
       1*:  128:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  128-block  0
call    2 never executed
        -:  129:
        1:  130:    p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:  130-block  0
call    0 returned 1
       1*:  131:    assert(p_v->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  131-block  0
call    2 never executed
       1*:  132:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  132-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  132-block  1
call    3 never executed
       1*:  133:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "aaab") == 0);
        1:  133-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  133-block  1
call    3 never executed
        1:  134:    delete_vector(p_v);
        1:  134-block  0
call    0 returned 1
        -:  135:
        1:  136:    remove_country_ui(p_controller, "aaaaa", 0, NULL);
call    0 returned 1
        -:  137:
        1:  138:    p_v = get_countries_with_at_least(p_controller, 23, NULL);
call    0 returned 1
       1*:  139:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  139-block  0
call    2 never executed
       1*:  140:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaab") == 0);
        1:  140-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  140-block  1
call    3 never executed
       1*:  141:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->continent, "europe") == 0);
        1:  141-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  141-block  1
call    3 never executed
       1*:  142:    assert((*(country_t**)get_position_vector(p_v, 0, NULL))->population == 100);
        1:  142-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  142-block  1
call    3 never executed
        1:  143:    delete_vector(p_v);
        1:  143-block  0
call    0 returned 1
        -:  144:
        1:  145:    remove_country_ui(p_controller, "aaaaa", 0, &tmp_error);
call    0 returned 1
       1*:  146:    assert(tmp_error == 11);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  146-block  0
call    2 never executed
        1:  147:    tmp_error = 0;
        -:  148:
        1:  149:    delete_country_controller(p_controller);
        1:  149-block  0
call    0 returned 1
        1:  150:    delete_repository(p_repository);
call    0 returned 1
        1:  151:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  152:}
        -:  153:
        -:  154:/*
        -:  155: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  156: */
function country_controller_test_remove_country_from_args called 1 returned 100% blocks executed 83%
        1:  157:void country_controller_test_remove_country_from_args(){
        1:  158:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  158-block  0
call    0 returned 1
        1:  159:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  160:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  161:    int tmp_error = 0;
        1:  162:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
call    0 returned 1
       1*:  163:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  163-block  0
call    2 never executed
        -:  164:
        1:  165:    add_country_ui(p_controller, "aaab", "europe", 100, 0, &tmp_error);
        1:  165-block  0
call    0 returned 1
       1*:  166:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  166-block  0
call    2 never executed
        -:  167:
        -:  168:
        1:  169:    vector_t* args = create_vector(sizeof(void*),0,NULL,NULL);
        1:  169-block  0
call    0 returned 1
        1:  170:    char* p_name = malloc(20);
        1:  171:    int* p_make_undo_redo = malloc(sizeof(int));
        1:  172:    strcpy(p_name, "aaab");
        1:  173:    *p_make_undo_redo = 0;
        -:  174:
        -:  175:
        1:  176:    push_back(args, &p_controller,NULL);
call    0 returned 1
        1:  177:    push_back(args, &p_name,NULL);
call    0 returned 1
        1:  178:    push_back(args, &p_make_undo_redo,NULL);
call    0 returned 1
        -:  179:
        1:  180:    remove_country_from_args(args, NULL);
call    0 returned 1
        -:  181:
        1:  182:    delete_vector(args);
call    0 returned 1
        1:  183:    free(p_name);
        1:  184:    free(p_make_undo_redo);
        -:  185:    vector_t* p_v;
        1:  186:    p_v = get_countries_with_at_least(p_controller, 23, NULL);
call    0 returned 1
       1*:  187:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  187-block  0
call    2 never executed
       1*:  188:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  188-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  188-block  1
call    3 never executed
        1:  189:    delete_vector(p_v);
        1:  189-block  0
call    0 returned 1
        -:  190:
        1:  191:    remove_country_ui(p_controller, "aaa", 0, &tmp_error);
call    0 returned 1
       1*:  192:    assert(tmp_error == 11);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  192-block  0
call    2 never executed
        1:  193:    tmp_error = 0;
        -:  194:
        1:  195:    delete_country_controller(p_controller);
        1:  195-block  0
call    0 returned 1
        1:  196:    delete_repository(p_repository);
call    0 returned 1
        1:  197:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  198:}
        -:  199:
        -:  200:/*
        -:  201: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  202: */
function country_controller_test_update_country_ui called 1 returned 100% blocks executed 76%
        1:  203:void country_controller_test_update_country_ui(){
        1:  204:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  204-block  0
call    0 returned 1
        1:  205:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  206:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  207:    int tmp_error = 0;
        1:  208:    tmp_error = 0;
        1:  209:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
call    0 returned 1
       1*:  210:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  210-block  0
call    2 never executed
        -:  211:
        1:  212:    vector_t* p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:  212-block  0
call    0 returned 1
       1*:  213:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  213-block  0
call    2 never executed
       1*:  214:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  214-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  214-block  1
call    3 never executed
        1:  215:    delete_vector(p_v);
        1:  215-block  0
call    0 returned 1
        -:  216:
        1:  217:    add_country_ui(p_controller, "aaab", "europe", 100, 0, &tmp_error);
call    0 returned 1
       1*:  218:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  218-block  0
call    2 never executed
        -:  219:
        1:  220:    p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:  220-block  0
call    0 returned 1
       1*:  221:    assert(p_v->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  221-block  0
call    2 never executed
       1*:  222:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  222-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  222-block  1
call    3 never executed
       1*:  223:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "aaab") == 0);
        1:  223-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  223-block  1
call    3 never executed
        1:  224:    delete_vector(p_v);
        1:  224-block  0
call    0 returned 1
        -:  225:
        1:  226:    update_country_ui(p_controller, "aaaaa", 1000, 0, NULL);
call    0 returned 1
        1:  227:    update_country_ui(p_controller, "aaaaa", -1, 0, &tmp_error);
call    0 returned 1
       1*:  228:    assert(tmp_error == 9);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  228-block  0
call    2 never executed
        1:  229:    tmp_error = 0;
        -:  230:
        1:  231:    p_v = get_countries_with_at_least(p_controller, 150, NULL);
        1:  231-block  0
call    0 returned 1
       1*:  232:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  232-block  0
call    2 never executed
       1*:  233:    assert((*(country_t**)get_position_vector(p_v, 0, NULL))->population == 1000);
        1:  233-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  233-block  1
call    3 never executed
        1:  234:    delete_vector(p_v);
        1:  234-block  0
call    0 returned 1
        1:  235:    delete_country_controller(p_controller);
call    0 returned 1
        1:  236:    delete_repository(p_repository);
call    0 returned 1
        1:  237:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  238:}
        -:  239:
        -:  240:/*
        -:  241: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  242: */
function country_controller_test_update_country_from_args called 1 returned 100% blocks executed 78%
        1:  243:void country_controller_test_update_country_from_args(){
        1:  244:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  244-block  0
call    0 returned 1
        1:  245:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  246:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  247:    int tmp_error = 0;
        1:  248:    tmp_error = 0;
        1:  249:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
call    0 returned 1
       1*:  250:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  250-block  0
call    2 never executed
        -:  251:
        1:  252:    vector_t* p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:  252-block  0
call    0 returned 1
       1*:  253:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  253-block  0
call    2 never executed
       1*:  254:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  254-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  254-block  1
call    3 never executed
        1:  255:    delete_vector(p_v);
        1:  255-block  0
call    0 returned 1
        -:  256:
        1:  257:    add_country_ui(p_controller, "aaab", "europe", 100, 0, &tmp_error);
call    0 returned 1
       1*:  258:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  258-block  0
call    2 never executed
        -:  259:
        1:  260:    p_v = get_countries_with_at_least(p_controller, 23, NULL);
        1:  260-block  0
call    0 returned 1
       1*:  261:    assert(p_v->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  261-block  0
call    2 never executed
       1*:  262:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "aaaaa") == 0);
        1:  262-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  262-block  1
call    3 never executed
       1*:  263:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "aaab") == 0);
        1:  263-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  263-block  1
call    3 never executed
        1:  264:    delete_vector(p_v);
        1:  264-block  0
call    0 returned 1
        -:  265:
        1:  266:    vector_t* args = create_vector(sizeof(int*), 0, NULL, NULL);
call    0 returned 1
        -:  267:
        1:  268:    char* p_name = malloc(20);
        1:  269:    int* p_population = malloc(sizeof(int));
        1:  270:    int* p_make_undo_redo = malloc(sizeof(int));
        1:  271:    strcpy(p_name, "aaaaa");
        1:  272:    *p_population = 1000;
        1:  273:    *p_make_undo_redo = 0;
        -:  274:
        1:  275:    push_back(args, &p_controller, NULL);
call    0 returned 1
        1:  276:    push_back(args, &p_name, NULL);
call    0 returned 1
        1:  277:    push_back(args, &p_population, NULL);
call    0 returned 1
        1:  278:    push_back(args, &p_make_undo_redo, NULL);
call    0 returned 1
        -:  279:
        1:  280:    update_country_from_args(args, &tmp_error);
call    0 returned 1
        -:  281:
        1:  282:    free(p_name);
        1:  283:    free(p_population);
        1:  284:    free(p_make_undo_redo);
        -:  285:
       1*:  286:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  286-block  0
call    2 never executed
        1:  287:    delete_vector(args);
        1:  287-block  0
call    0 returned 1
        -:  288:
        1:  289:    p_v = get_countries_with_at_least(p_controller, 150, NULL);
call    0 returned 1
       1*:  290:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  290-block  0
call    2 never executed
       1*:  291:    assert((*(country_t**)get_position_vector(p_v, 0, NULL))->population == 1000);
        1:  291-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  291-block  1
call    3 never executed
        1:  292:    delete_vector(p_v);
        1:  292-block  0
call    0 returned 1
        1:  293:    delete_country_controller(p_controller);
call    0 returned 1
        1:  294:    delete_repository(p_repository);
call    0 returned 1
        1:  295:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  296:}
        -:  297:
        -:  298:/*
        -:  299: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  300: */
function country_controller_test_migrate_ui called 1 returned 100% blocks executed 78%
        1:  301:void country_controller_test_migrate_ui(){
        1:  302:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  302-block  0
call    0 returned 1
        1:  303:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  304:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  305:    int tmp_error = 0;
        1:  306:    tmp_error = 0;
        -:  307:
        1:  308:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
call    0 returned 1
       1*:  309:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  309-block  0
call    2 never executed
        -:  310:
        1:  311:    add_country_ui(p_controller, "aaab", "europe", 100, 0, &tmp_error);
        1:  311-block  0
call    0 returned 1
       1*:  312:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  312-block  0
call    2 never executed
        -:  313:
        -:  314:    vector_t* p_v;
        -:  315:
        1:  316:    migrate_ui(p_controller, "aaaaa", "aaab",100, 0, &tmp_error);
        1:  316-block  0
call    0 returned 1
       1*:  317:    assert(tmp_error == 13);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  317-block  0
call    2 never executed
        1:  318:    tmp_error = 0;
        1:  319:    migrate_ui(p_controller, "aaab", "aaaaa",70, 0, &tmp_error);
        1:  319-block  0
call    0 returned 1
        -:  320:
        1:  321:    p_v = get_countries_containing_string(p_controller, "*", NULL);
call    0 returned 1
       1*:  322:    assert(p_v->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  322-block  0
call    2 never executed
       1*:  323:    assert((*(country_t**)get_position_vector(p_v, 0, NULL))->population == 93);
        1:  323-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  323-block  1
call    3 never executed
       1*:  324:    assert((*(country_t**)get_position_vector(p_v, 1, NULL))->population == 30);
        1:  324-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  324-block  1
call    3 never executed
        1:  325:    delete_vector(p_v);
        1:  325-block  0
call    0 returned 1
        1:  326:    delete_country_controller(p_controller);
call    0 returned 1
        1:  327:    delete_repository(p_repository);
call    0 returned 1
        1:  328:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  329:}
        -:  330:
        -:  331:/*
        -:  332: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  333: */
function country_controller_test_migrate_from_args called 1 returned 100% blocks executed 84%
        1:  334:void country_controller_test_migrate_from_args(){
        1:  335:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  335-block  0
call    0 returned 1
        1:  336:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  337:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  338:    int tmp_error = 0;
        1:  339:    tmp_error = 0;
        -:  340:
        1:  341:    add_country_ui(p_controller, "aaaaa", "america", 23, 0, &tmp_error);
call    0 returned 1
       1*:  342:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  342-block  0
call    2 never executed
        -:  343:
        1:  344:    add_country_ui(p_controller, "aaab", "europe", 100, 0, &tmp_error);
        1:  344-block  0
call    0 returned 1
       1*:  345:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  345-block  0
call    2 never executed
        -:  346:
        -:  347:    vector_t* p_v;
        -:  348:
        1:  349:    vector_t* args = create_vector(sizeof(int*), 0, NULL, NULL);
        1:  349-block  0
call    0 returned 1
        1:  350:    char* p_src_name = malloc(20);
        1:  351:    char* p_dst_name = malloc(20);
        1:  352:    int *p_population = malloc(sizeof(int));
        1:  353:    int *p_make_undo_redo = malloc(sizeof(int));
        -:  354:
        1:  355:    strcpy(p_src_name, "aaab");
        1:  356:    strcpy(p_dst_name, "aaaaa");
        1:  357:    *p_make_undo_redo = 0;
        1:  358:    *p_population = 70;
        -:  359:
        1:  360:    push_back(args, &p_controller, NULL);
call    0 returned 1
        1:  361:    push_back(args, &p_src_name, NULL);
call    0 returned 1
        1:  362:    push_back(args, &p_dst_name, NULL);
call    0 returned 1
        1:  363:    push_back(args, &p_population, NULL);
call    0 returned 1
        1:  364:    push_back(args, &p_make_undo_redo, NULL);
call    0 returned 1
        1:  365:    migrate_from_args(args, NULL);
call    0 returned 1
        -:  366:
        1:  367:    free(p_src_name);
        1:  368:    free(p_dst_name);
        1:  369:    free(p_population);
        1:  370:    free(p_make_undo_redo);
        1:  371:    delete_vector(args);
call    0 returned 1
        -:  372:
        1:  373:    p_v = get_countries_containing_string(p_controller, "*", NULL);
call    0 returned 1
       1*:  374:    assert(p_v->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  374-block  0
call    2 never executed
       1*:  375:    assert((*(country_t**)get_position_vector(p_v, 0, NULL))->population == 93);
        1:  375-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  375-block  1
call    3 never executed
       1*:  376:    assert((*(country_t**)get_position_vector(p_v, 1, NULL))->population == 30);
        1:  376-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  376-block  1
call    3 never executed
        1:  377:    delete_vector(p_v);
        1:  377-block  0
call    0 returned 1
        1:  378:    delete_country_controller(p_controller);
call    0 returned 1
        1:  379:    delete_repository(p_repository);
call    0 returned 1
        1:  380:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  381:}
        -:  382:
        -:  383:/*
        -:  384: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  385: */
function country_controller_test_get_countries_containing_string called 1 returned 100% blocks executed 77%
        1:  386:void country_controller_test_get_countries_containing_string(){
        1:  387:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  387-block  0
call    0 returned 1
        1:  388:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  389:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  390:    int tmp_error = 0;
        1:  391:    tmp_error = 0;
        -:  392:
        1:  393:    add_country_ui(p_controller, "China", "asia", 1439, 0, NULL);
call    0 returned 1
        1:  394:    add_country_ui(p_controller, "Brazil", "America", 212, 0, NULL);
call    0 returned 1
        1:  395:    add_country_ui(p_controller, "India", "asia", 1380, 0, NULL);
call    0 returned 1
        1:  396:    add_country_ui(p_controller, "USA", "america", 331, 0, NULL);
call    0 returned 1
        1:  397:    add_country_ui(p_controller, "turkey", "asia", 84, 0, NULL);
call    0 returned 1
        1:  398:    add_country_ui(p_controller, "Ethiopia", "africa", 114, 0, NULL);
call    0 returned 1
        1:  399:    add_country_ui(p_controller, "france", "europe", 65, 0, NULL);
call    0 returned 1
        1:  400:    add_country_ui(p_controller, "germany", "europe", 83, 0, NULL);
call    0 returned 1
        1:  401:    add_country_ui(p_controller, "uk", "europe", 67, 0, NULL);
call    0 returned 1
        1:  402:    add_country_ui(p_controller, "romania", "europe", 19, 0, NULL);
call    0 returned 1
        -:  403:
        -:  404:
        -:  405:
        -:  406:    vector_t* p_v;
        1:  407:    p_v = get_countries_containing_string(p_controller, "*", NULL);
call    0 returned 1
       1*:  408:    assert(p_v->size == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  408-block  0
call    2 never executed
        1:  409:    delete_vector(p_v);
        1:  409-block  0
call    0 returned 1
        -:  410:
        1:  411:    p_v = get_countries_containing_string(p_controller, "a", NULL);
call    0 returned 1
       1*:  412:    assert(p_v->size == 8);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  412-block  0
call    2 never executed
       1*:  413:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "china") == 0);
        1:  413-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  413-block  1
call    3 never executed
       1*:  414:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "brazil") == 0);
        1:  414-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  414-block  1
call    3 never executed
       1*:  415:    assert(strcmp((*(country_t**)get_position_vector(p_v, 2, NULL))->name, "india") == 0);
        1:  415-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  415-block  1
call    3 never executed
       1*:  416:    assert(strcmp((*(country_t**)get_position_vector(p_v, 3, NULL))->name, "usa") == 0);
        1:  416-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  416-block  1
call    3 never executed
       1*:  417:    assert(strcmp((*(country_t**)get_position_vector(p_v, 4, NULL))->name, "ethiopia") == 0);
        1:  417-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  417-block  1
call    3 never executed
       1*:  418:    assert(strcmp((*(country_t**)get_position_vector(p_v, 5, NULL))->name, "france") == 0);
        1:  418-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  418-block  1
call    3 never executed
       1*:  419:    assert(strcmp((*(country_t**)get_position_vector(p_v, 6, NULL))->name, "germany") == 0);
        1:  419-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  419-block  1
call    3 never executed
       1*:  420:    assert(strcmp((*(country_t**)get_position_vector(p_v, 7, NULL))->name, "romania") == 0);
        1:  420-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  420-block  1
call    3 never executed
        1:  421:    delete_vector(p_v);
        1:  421-block  0
call    0 returned 1
        -:  422:
        1:  423:    p_v = get_countries_containing_string(p_controller, "ia", NULL);
call    0 returned 1
       1*:  424:    assert(p_v->size == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  424-block  0
call    2 never executed
       1*:  425:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "india") == 0);
        1:  425-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  425-block  1
call    3 never executed
       1*:  426:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "ethiopia") == 0);
        1:  426-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  426-block  1
call    3 never executed
       1*:  427:    assert(strcmp((*(country_t**)get_position_vector(p_v, 2, NULL))->name, "romania") == 0);
        1:  427-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  427-block  1
call    3 never executed
        1:  428:    delete_vector(p_v);
        1:  428-block  0
call    0 returned 1
        -:  429:
        1:  430:    p_v = get_countries_containing_string(p_controller, "iafsafasfasasfasgasg", NULL);
call    0 returned 1
       1*:  431:    assert(p_v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  431-block  0
call    2 never executed
        1:  432:    delete_vector(p_v);
        1:  432-block  0
call    0 returned 1
        -:  433:
        1:  434:    delete_country_controller(p_controller);
call    0 returned 1
        1:  435:    delete_repository(p_repository);
call    0 returned 1
        1:  436:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  437:}
        -:  438:
        -:  439:/*
        -:  440: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  441: */
function country_controller_test_get_countries_with_at_least called 1 returned 100% blocks executed 82%
        1:  442:void country_controller_test_get_countries_with_at_least(){
        1:  443:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  443-block  0
call    0 returned 1
        1:  444:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  445:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  446:    int tmp_error = 0;
        1:  447:    tmp_error = 0;
        -:  448:
        1:  449:    add_country_ui(p_controller, "China", "asia", 1439, 0, NULL);
call    0 returned 1
        1:  450:    add_country_ui(p_controller, "Brazil", "America", 212, 0, NULL);
call    0 returned 1
        1:  451:    add_country_ui(p_controller, "India", "asia", 1380, 0, NULL);
call    0 returned 1
        1:  452:    add_country_ui(p_controller, "USA", "america", 331, 0, NULL);
call    0 returned 1
        1:  453:    add_country_ui(p_controller, "turkey", "asia", 84, 0, NULL);
call    0 returned 1
        1:  454:    add_country_ui(p_controller, "Ethiopia", "africa", 114, 0, NULL);
call    0 returned 1
        1:  455:    add_country_ui(p_controller, "france", "europe", 65, 0, NULL);
call    0 returned 1
        1:  456:    add_country_ui(p_controller, "germany", "europe", 83, 0, NULL);
call    0 returned 1
        1:  457:    add_country_ui(p_controller, "uk", "europe", 67, 0, NULL);
call    0 returned 1
        1:  458:    add_country_ui(p_controller, "romania", "europe", 19, 0, NULL);
call    0 returned 1
        -:  459:
        -:  460:
        -:  461:
        -:  462:    vector_t* p_v;
        1:  463:    p_v = get_countries_with_at_least(p_controller, 100, NULL);
call    0 returned 1
       1*:  464:    assert(p_v->size == 5);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  464-block  0
call    2 never executed
       1*:  465:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "china") == 0);
        1:  465-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  465-block  1
call    3 never executed
       1*:  466:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "brazil") == 0);
        1:  466-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  466-block  1
call    3 never executed
       1*:  467:    assert(strcmp((*(country_t**)get_position_vector(p_v, 2, NULL))->name, "india") == 0);
        1:  467-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  467-block  1
call    3 never executed
       1*:  468:    assert(strcmp((*(country_t**)get_position_vector(p_v, 3, NULL))->name, "usa") == 0);
        1:  468-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  468-block  1
call    3 never executed
       1*:  469:    assert(strcmp((*(country_t**)get_position_vector(p_v, 4, NULL))->name, "ethiopia") == 0);
        1:  469-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  469-block  1
call    3 never executed
        1:  470:    delete_vector(p_v);
        1:  470-block  0
call    0 returned 1
        -:  471:
        1:  472:    p_v = get_countries_with_at_least(p_controller, 3000000, NULL);
call    0 returned 1
       1*:  473:    assert(p_v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  473-block  0
call    2 never executed
        1:  474:    delete_vector(p_v);
        1:  474-block  0
call    0 returned 1
        -:  475:
        1:  476:    delete_country_controller(p_controller);
call    0 returned 1
        1:  477:    delete_repository(p_repository);
call    0 returned 1
        1:  478:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  479:}
        -:  480:
        -:  481:/*
        -:  482: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  483: */
function country_controller_test_get_countries_from_continent called 1 returned 100% blocks executed 78%
        1:  484:void country_controller_test_get_countries_from_continent(){
        1:  485:    undo_redo_repository_t* p_undo_redo_repository = create_undo_redo_repository(NULL);
        1:  485-block  0
call    0 returned 1
        1:  486:    repository_t *p_repository = create_repository(sizeof(country_t), &delete_country_data, NULL);
call    0 returned 1
        1:  487:    country_controller_t* p_controller = create_country_controller(p_repository, p_undo_redo_repository, NULL);
call    0 returned 1
        1:  488:    int tmp_error = 0;
        1:  489:    tmp_error = 0;
        -:  490:
        1:  491:    add_country_ui(p_controller, "China", "asia", 1439, 0, NULL);
call    0 returned 1
        1:  492:    add_country_ui(p_controller, "Brazil", "America", 212, 0, NULL);
call    0 returned 1
        1:  493:    add_country_ui(p_controller, "India", "asia", 1380, 0, NULL);
call    0 returned 1
        1:  494:    add_country_ui(p_controller, "USA", "america", 331, 0, NULL);
call    0 returned 1
        1:  495:    add_country_ui(p_controller, "turkey", "asia", 84, 0, NULL);
call    0 returned 1
        1:  496:    add_country_ui(p_controller, "Ethiopia", "africa", 114, 0, NULL);
call    0 returned 1
        1:  497:    add_country_ui(p_controller, "france", "europe", 65, 0, NULL);
call    0 returned 1
        1:  498:    add_country_ui(p_controller, "germany", "europe", 83, 0, NULL);
call    0 returned 1
        1:  499:    add_country_ui(p_controller, "uk", "europe", 67, 0, NULL);
call    0 returned 1
        1:  500:    add_country_ui(p_controller, "romania", "europe", 19, 0, NULL);
call    0 returned 1
        -:  501:
        -:  502:
        -:  503:
        -:  504:    vector_t* p_v;
        1:  505:    p_v = get_countries_from_continent(p_controller, "*", 100, "ascending", &tmp_error);
call    0 returned 1
       1*:  506:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  506-block  0
call    2 never executed
        -:  507:
       1*:  508:    assert(p_v->size == 5);
        1:  508-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  508-block  1
call    2 never executed
       1*:  509:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "ethiopia") == 0);
        1:  509-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  509-block  1
call    3 never executed
       1*:  510:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "brazil") == 0);
        1:  510-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  510-block  1
call    3 never executed
       1*:  511:    assert(strcmp((*(country_t**)get_position_vector(p_v, 2, NULL))->name, "usa") == 0);
        1:  511-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  511-block  1
call    3 never executed
       1*:  512:    assert(strcmp((*(country_t**)get_position_vector(p_v, 3, NULL))->name, "india") == 0);
        1:  512-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  512-block  1
call    3 never executed
       1*:  513:    assert(strcmp((*(country_t**)get_position_vector(p_v, 4, NULL))->name, "china") == 0);
        1:  513-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  513-block  1
call    3 never executed
        1:  514:    delete_vector(p_v);
        1:  514-block  0
call    0 returned 1
        -:  515:
        1:  516:    p_v = get_countries_from_continent(p_controller, "asia", 100, "descending", &tmp_error);
call    0 returned 1
       1*:  517:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  517-block  0
call    2 never executed
        -:  518:
       1*:  519:    assert(p_v->size == 2);
        1:  519-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  519-block  1
call    2 never executed
       1*:  520:    assert(strcmp((*(country_t**)get_position_vector(p_v, 0, NULL))->name, "china") == 0);
        1:  520-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  520-block  1
call    3 never executed
       1*:  521:    assert(strcmp((*(country_t**)get_position_vector(p_v, 1, NULL))->name, "india") == 0);
        1:  521-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  521-block  1
call    3 never executed
        1:  522:    delete_vector(p_v);
        1:  522-block  0
call    0 returned 1
        -:  523:
        1:  524:    delete_country_controller(p_controller);
call    0 returned 1
        1:  525:    delete_repository(p_repository);
call    0 returned 1
        1:  526:    delete_undo_redo_repository(p_undo_redo_repository);
call    0 returned 1
        1:  527:}
        -:  528:
        -:  529:/*
        -:  530: * This implementation does exactly what it says it does in country_controller_tests.h
        -:  531: */
function country_controller_test_test_all called 1 returned 100% blocks executed 100%
        1:  532:void country_controller_test_test_all(){
        1:  533:    country_controller_test_create_delete_country_controller();
        1:  533-block  0
call    0 returned 1
        1:  534:    country_controller_test_add_country_ui();
call    0 returned 1
        1:  535:    country_controller_test_add_country_from_args();
call    0 returned 1
        1:  536:    country_controller_test_remove_country_ui();
call    0 returned 1
        1:  537:    country_controller_test_remove_country_from_args();
call    0 returned 1
        1:  538:    country_controller_test_update_country_ui();
call    0 returned 1
        1:  539:    country_controller_test_update_country_from_args();
call    0 returned 1
        1:  540:    country_controller_test_migrate_ui();
call    0 returned 1
        1:  541:    country_controller_test_migrate_from_args();
call    0 returned 1
        1:  542:    country_controller_test_get_countries_containing_string();
call    0 returned 1
        1:  543:    country_controller_test_get_countries_with_at_least();
call    0 returned 1
        1:  544:    country_controller_test_get_countries_from_continent();
call    0 returned 1
        1:  545:}
