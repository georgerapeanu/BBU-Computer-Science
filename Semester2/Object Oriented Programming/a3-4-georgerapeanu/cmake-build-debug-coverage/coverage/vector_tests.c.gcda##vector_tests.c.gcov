        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/tests/src/domain/vector_tests.c
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/domain/vector_tests.c.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a3-4-georgerapeanu/cmake-build-debug-coverage/CMakeFiles/a3_4_georgerapeanu_tests.dir/tests/src/domain/vector_tests.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include "../../../include/domain/vector.h"
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:/*! @file vector_tests.c This file contains the implementations for all vector tests
        -:    6: *
        -:    7: */
        -:    8:
        -:    9:
function vector_test_set_position_vector called 1 returned 100% blocks executed 78%
        1:   10:void vector_test_set_position_vector(){
        -:   11:    vector_t* p_v;
        1:   12:    p_v = create_vector(4, 0, NULL, NULL);
        1:   12-block  0
call    0 returned 1
        1:   13:    int a = 2;
        1:   14:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   15:    a = 3;
        1:   16:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   17:    a = 4;
        1:   18:    push_back(p_v, &a, NULL);
call    0 returned 1
        -:   19:
        1:   20:    a = 7;
        1:   21:    set_position_vector(p_v, 1, &a, NULL);
call    0 returned 1
        1:   22:    a = 3;
        1:   23:    set_position_vector(p_v, 2, &a, NULL);
call    0 returned 1
        -:   24:
       1*:   25:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   25-block  0
call    3 never executed
       1*:   26:    assert(*(int*)get_position_vector(p_v, 1, NULL) == 7);
        1:   26-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   26-block  1
call    3 never executed
       1*:   27:    assert(*(int*)get_position_vector(p_v, 2, NULL) == 3);
        1:   27-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   27-block  1
call    3 never executed
        -:   28:
        1:   29:    int tmp_error = 0;
        1:   30:    set_position_vector(p_v, -1, &a, &tmp_error);
        1:   30-block  0
call    0 returned 1
       1*:   31:    assert(tmp_error == 6);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   31-block  0
call    2 never executed
        1:   32:    tmp_error = 0;
        1:   33:    set_position_vector(p_v, 3, &a, &tmp_error);
        1:   33-block  0
call    0 returned 1
       1*:   34:    assert(tmp_error == 6);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   34-block  0
call    2 never executed
        1:   35:    tmp_error = 0;
        -:   36:
        1:   37:    delete_vector(p_v);
        1:   37-block  0
call    0 returned 1
        1:   38:}
        -:   39:
        -:   40:
        -:   41:
function vector_test_get_position_vector called 1 returned 100% blocks executed 76%
        1:   42:void vector_test_get_position_vector(){
        -:   43:    vector_t* p_v;
        1:   44:    p_v = create_vector(4, 0, NULL, NULL);
        1:   44-block  0
call    0 returned 1
        1:   45:    int a = 2;
        1:   46:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   47:    a = 3;
        1:   48:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   49:    a = 4;
        1:   50:    push_back(p_v, &a, NULL);
call    0 returned 1
       1*:   51:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   51-block  0
call    3 never executed
       1*:   52:    assert(*(int*)get_position_vector(p_v, 1, NULL) == 3);
        1:   52-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   52-block  1
call    3 never executed
       1*:   53:    assert(*(int*)get_position_vector(p_v, 2, NULL) == 4);
        1:   53-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   53-block  1
call    3 never executed
        -:   54:
        1:   55:    int tmp_error = 0;
        1:   56:    get_position_vector(p_v, -1, &tmp_error);
        1:   56-block  0
call    0 returned 1
       1*:   57:    assert(tmp_error == 6);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  0
call    2 never executed
        1:   58:    tmp_error = 0;
        1:   59:    get_position_vector(p_v, 3, &tmp_error);
        1:   59-block  0
call    0 returned 1
       1*:   60:    assert(tmp_error == 6);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   60-block  0
call    2 never executed
        1:   61:    tmp_error = 0;
        -:   62:
        1:   63:    delete_vector(p_v);
        1:   63-block  0
call    0 returned 1
        1:   64:}
        -:   65:
        -:   66:
function vector_test_pop_back called 1 returned 100% blocks executed 68%
        1:   67:void vector_test_pop_back(){
        -:   68:    vector_t* p_v;
        1:   69:    p_v = create_vector(4, 0, NULL, NULL);
        1:   69-block  0
call    0 returned 1
        1:   70:    int a = 2;
        1:   71:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   72:    a = 3;
        1:   73:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   74:    a = 4;
        1:   75:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   76:    pop_back(p_v, NULL);
call    0 returned 1
       1*:   77:    assert(p_v->capacity == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   77-block  0
call    2 never executed
       1*:   78:    assert(p_v->size == 2);
        1:   78-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   78-block  1
call    2 never executed
        1:   79:    pop_back(p_v, NULL);
        1:   79-block  0
call    0 returned 1
       1*:   80:    assert(p_v->capacity == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   80-block  0
call    2 never executed
       1*:   81:    assert(p_v->size == 1);
        1:   81-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   81-block  1
call    2 never executed
        1:   82:    pop_back(p_v, NULL);
        1:   82-block  0
call    0 returned 1
       1*:   83:    assert(p_v->capacity == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   83-block  0
call    2 never executed
       1*:   84:    assert(p_v->size == 0);
        1:   84-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   84-block  1
call    2 never executed
        1:   85:    int tmp_error = 0;
        1:   86:    pop_back(p_v, &tmp_error);
        1:   86-block  0
call    0 returned 1
       1*:   87:    assert(tmp_error == 5);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   87-block  0
call    2 never executed
       1*:   88:    assert(p_v->capacity == 4);
        1:   88-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   88-block  1
call    2 never executed
       1*:   89:    assert(p_v->size == 0);
        1:   89-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  1
call    2 never executed
        1:   90:    delete_vector(p_v);
        1:   90-block  0
call    0 returned 1
        1:   91:}
        -:   92:
        -:   93:
function vector_test_push_back called 1 returned 100% blocks executed 70%
        1:   94:void vector_test_push_back(){
        -:   95:    vector_t* p_v;
        1:   96:    p_v = create_vector(4, 0, NULL,NULL);
        1:   96-block  0
call    0 returned 1
        1:   97:    int a = 2;
        1:   98:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:   99:    a = 3;
        1:  100:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:  101:    a = 4;
        1:  102:    push_back(p_v, &a, NULL);
call    0 returned 1
       1*:  103:    assert(p_v->capacity == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  103-block  0
call    2 never executed
       1*:  104:    assert(p_v->size == 3);
        1:  104-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  104-block  1
call    2 never executed
        1:  105:    a = 4;
        1:  106:    push_back(p_v, &a, NULL);
        1:  106-block  0
call    0 returned 1
       1*:  107:    assert(p_v->capacity == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  107-block  0
call    2 never executed
       1*:  108:    assert(p_v->size == 4);
        1:  108-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  108-block  1
call    2 never executed
        1:  109:    a = 1;
        1:  110:    push_back(p_v, &a, NULL);
        1:  110-block  0
call    0 returned 1
       1*:  111:    assert(p_v->capacity == 8);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  111-block  0
call    2 never executed
       1*:  112:    assert(p_v->size == 5);
        1:  112-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  112-block  1
call    2 never executed
        1:  113:    delete_vector(p_v);
        1:  113-block  0
call    0 returned 1
        1:  114:}
        -:  115:
        -:  116:
function vector_test_change_capacity called 1 returned 100% blocks executed 71%
        1:  117:void vector_test_change_capacity(){
        -:  118:    vector_t* p_v;
        1:  119:    int tmp_error = 0;
        1:  120:    p_v = create_vector(4, 0, NULL,NULL);
        1:  120-block  0
call    0 returned 1
        1:  121:    int a = 2;
        1:  122:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:  123:    a = 3;
        1:  124:    push_back(p_v, &a, NULL);
call    0 returned 1
        1:  125:    change_capacity_vector(p_v, 1, &tmp_error);
call    0 returned 1
       1*:  126:    assert(tmp_error == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  126-block  0
call    2 never executed
        1:  127:    tmp_error = 0;
        1:  128:    change_capacity_vector(p_v, 4, &tmp_error);
        1:  128-block  0
call    0 returned 1
       1*:  129:    assert(tmp_error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  129-block  0
call    2 never executed
       1*:  130:    assert(p_v->capacity == 4);
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  130-block  1
call    2 never executed
       1*:  131:    assert(p_v->size == 2);
        1:  131-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  131-block  1
call    2 never executed
        -:  132:
       1*:  133:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 2);
        1:  133-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  133-block  1
call    3 never executed
       1*:  134:    assert(*(int*)get_position_vector(p_v, 1, NULL) == 3);
        1:  134-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  134-block  1
call    3 never executed
        -:  135:
        1:  136:    delete_vector(p_v);
        1:  136-block  0
call    0 returned 1
        1:  137:}
        -:  138:
        -:  139:
function vector_test_resize called 1 returned 100% blocks executed 67%
        1:  140:void vector_test_resize(){
        -:  141:    vector_t* p_v;
        1:  142:    int tmp_error = 0;
        1:  143:    p_v = create_vector(4, 0, NULL,NULL);
        1:  143-block  0
call    0 returned 1
       1*:  144:    assert(p_v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  144-block  0
call    2 never executed
       1*:  145:    assert(p_v->capacity == 1);
        1:  145-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  145-block  1
call    2 never executed
       1*:  146:    assert(p_v->element_size == 4);
        1:  146-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  146-block  1
call    2 never executed
        1:  147:    int a = 2;
        1:  148:    push_back(p_v, &a, NULL);
        1:  148-block  0
call    0 returned 1
        1:  149:    a = 3;
        1:  150:    push_back(p_v, &a, NULL);
call    0 returned 1
        -:  151:
        1:  152:    resize(p_v, -1, &tmp_error);
call    0 returned 1
       1*:  153:    assert(tmp_error == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  153-block  0
call    2 never executed
        1:  154:    tmp_error = 0;
        -:  155:
        1:  156:    resize(p_v, 4, NULL);
        1:  156-block  0
call    0 returned 1
        -:  157:
       1*:  158:    assert(p_v->size == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  158-block  0
call    2 never executed
       1*:  159:    assert(p_v->capacity == 4);
        1:  159-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  159-block  1
call    2 never executed
       1*:  160:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 2);
        1:  160-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  160-block  1
call    3 never executed
       1*:  161:    assert(*(int*)get_position_vector(p_v, 1, NULL) == 3);
        1:  161-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  161-block  1
call    3 never executed
        -:  162:
        1:  163:    resize(p_v, 1, NULL);
        1:  163-block  0
call    0 returned 1
       1*:  164:    assert(p_v->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  164-block  0
call    2 never executed
       1*:  165:    assert(p_v->capacity == 1);
        1:  165-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  165-block  1
call    2 never executed
       1*:  166:    assert(*(int*)get_position_vector(p_v, 0, NULL) == 2);
        1:  166-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  166-block  1
call    3 never executed
        -:  167:
        1:  168:    delete_vector(p_v);
        1:  168-block  0
call    0 returned 1
        1:  169:}
        -:  170:
        -:  171:
function vector_test_create_delete called 1 returned 100% blocks executed 74%
        1:  172:void vector_test_create_delete(){
        1:  173:    int tmp_error = 0;
        1:  174:    vector_t* p_v = NULL;
        1:  175:    tmp_error = 0;
        1:  176:    p_v = create_vector(-1, 10, NULL,&tmp_error);
        1:  176-block  0
call    0 returned 1
       1*:  177:    assert(tmp_error == 2 && p_v == NULL);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  177-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
    %%%%%:  177-block  1
call    4 never executed
        1:  178:    tmp_error = 0;
        1:  179:    p_v = create_vector(0, 10, NULL, &tmp_error);
        1:  179-block  0
call    0 returned 1
       1*:  180:    assert(tmp_error == 2 && p_v == NULL);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  180-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
    %%%%%:  180-block  1
call    4 never executed
        1:  181:    tmp_error = 0;
        1:  182:    p_v = create_vector(1, -1, NULL, &tmp_error);
        1:  182-block  0
call    0 returned 1
       1*:  183:    assert(tmp_error == 3 && p_v == NULL);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  183-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
    %%%%%:  183-block  1
call    4 never executed
        1:  184:    tmp_error = 0;
        1:  185:    p_v = create_vector(1, -1, NULL, &tmp_error);
        1:  185-block  0
call    0 returned 1
       1*:  186:    assert(tmp_error == 3 && p_v == NULL);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  186-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
    %%%%%:  186-block  1
call    4 never executed
        1:  187:    tmp_error = 0;
        1:  188:    p_v = create_vector(4, 0, NULL, NULL);
        1:  188-block  0
call    0 returned 1
       1*:  189:    assert(p_v->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  189-block  0
call    2 never executed
       1*:  190:    assert(p_v->capacity == 1);
        1:  190-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  190-block  1
call    2 never executed
       1*:  191:    assert(p_v->element_size == 4);
        1:  191-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  191-block  1
call    2 never executed
        1:  192:    delete_vector(p_v);
        1:  192-block  0
call    0 returned 1
        1:  193:    p_v = create_vector(1, 3, NULL, NULL);
call    0 returned 1
       1*:  194:    assert(p_v->size == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  194-block  0
call    2 never executed
       1*:  195:    assert(p_v->capacity == 3);
        1:  195-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  195-block  1
call    2 never executed
       1*:  196:    assert(p_v->element_size == 1);
        1:  196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  196-block  1
call    2 never executed
        1:  197:    delete_vector(p_v);
        1:  197-block  0
call    0 returned 1
        1:  198:    delete_vector(NULL);
call    0 returned 1
        1:  199:}
        -:  200:
        -:  201:
function vector_test_all called 1 returned 100% blocks executed 100%
        1:  202:void vector_test_all(){
        1:  203:    vector_test_create_delete();
        1:  203-block  0
call    0 returned 1
        1:  204:    vector_test_resize();
call    0 returned 1
        1:  205:    vector_test_change_capacity();
call    0 returned 1
        1:  206:    vector_test_push_back();
call    0 returned 1
        1:  207:    vector_test_pop_back();
call    0 returned 1
        1:  208:    vector_test_set_position_vector();
call    0 returned 1
        1:  209:    vector_test_get_position_vector();
call    0 returned 1
        1:  210:}
