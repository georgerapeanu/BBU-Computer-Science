        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a14-georgerapeanu/tests/googletest/googletest/include/gtest/internal/gtest-port.h
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a14-georgerapeanu/tests/cmake-build-debug-coverage/CMakeFiles/a14_georgerapeanu_tests.dir/repository/HTMLWatchlistTests.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/a14-georgerapeanu/tests/cmake-build-debug-coverage/CMakeFiles/a14_georgerapeanu_tests.dir/repository/HTMLWatchlistTests.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// Low-level types and utilities for porting Google Test to various
        -:   31:// platforms.  All macros ending with _ and symbols defined in an
        -:   32:// internal namespace are subject to change without notice.  Code
        -:   33:// outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't
        -:   34:// end with _ are part of Google Test's public API and can be used by
        -:   35:// code outside Google Test.
        -:   36://
        -:   37:// This file is fundamental to Google Test.  All other Google Test source
        -:   38:// files are expected to #include this.  Therefore, it cannot #include
        -:   39:// any other Google Test header.
        -:   40:
        -:   41:// IWYU pragma: private, include "gtest/gtest.h"
        -:   42:// IWYU pragma: friend gtest/.*
        -:   43:// IWYU pragma: friend gmock/.*
        -:   44:
        -:   45:#ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   46:#define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   47:
        -:   48:// Environment-describing macros
        -:   49:// -----------------------------
        -:   50://
        -:   51:// Google Test can be used in many different environments.  Macros in
        -:   52:// this section tell Google Test what kind of environment it is being
        -:   53:// used in, such that Google Test can provide environment-specific
        -:   54:// features and implementations.
        -:   55://
        -:   56:// Google Test tries to automatically detect the properties of its
        -:   57:// environment, so users usually don't need to worry about these
        -:   58:// macros.  However, the automatic detection is not perfect.
        -:   59:// Sometimes it's necessary for a user to define some of the following
        -:   60:// macros in the build script to override Google Test's decisions.
        -:   61://
        -:   62:// If the user doesn't define a macro in the list, Google Test will
        -:   63:// provide a default definition.  After this header is #included, all
        -:   64:// macros in this list will be defined to either 1 or 0.
        -:   65://
        -:   66:// Notes to maintainers:
        -:   67://   - Each macro here is a user-tweakable knob; do not grow the list
        -:   68://     lightly.
        -:   69://   - Use #if to key off these macros.  Don't use #ifdef or "#if
        -:   70://     defined(...)", which will not work as these macros are ALWAYS
        -:   71://     defined.
        -:   72://
        -:   73://   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
        -:   74://                              is/isn't available.
        -:   75://   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
        -:   76://                              are enabled.
        -:   77://   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
        -:   78://                              expressions are/aren't available.
        -:   79://   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
        -:   80://                              is/isn't available.
        -:   81://   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
        -:   82://                              enabled.
        -:   83://   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
        -:   84://                              std::wstring does/doesn't work (Google Test can
        -:   85://                              be used where std::wstring is unavailable).
        -:   86://   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
        -:   87://                              compiler supports Microsoft's "Structured
        -:   88://                              Exception Handling".
        -:   89://   GTEST_HAS_STREAM_REDIRECTION
        -:   90://                            - Define it to 1/0 to indicate whether the
        -:   91://                              platform supports I/O stream redirection using
        -:   92://                              dup() and dup2().
        -:   93://   GTEST_LINKED_AS_SHARED_LIBRARY
        -:   94://                            - Define to 1 when compiling tests that use
        -:   95://                              Google Test as a shared library (known as
        -:   96://                              DLL on Windows).
        -:   97://   GTEST_CREATE_SHARED_LIBRARY
        -:   98://                            - Define to 1 when compiling Google Test itself
        -:   99://                              as a shared library.
        -:  100://   GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  101://                            - The default value of --gtest_death_test_style.
        -:  102://                              The legacy default has been "fast" in the open
        -:  103://                              source version since 2008. The recommended value
        -:  104://                              is "threadsafe", and can be set in
        -:  105://                              custom/gtest-port.h.
        -:  106:
        -:  107:// Platform-indicating macros
        -:  108:// --------------------------
        -:  109://
        -:  110:// Macros indicating the platform on which Google Test is being used
        -:  111:// (a macro is defined to 1 if compiled on the given platform;
        -:  112:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  113:// defines these macros automatically.  Code outside Google Test MUST
        -:  114:// NOT define them.
        -:  115://
        -:  116://   GTEST_OS_AIX      - IBM AIX
        -:  117://   GTEST_OS_CYGWIN   - Cygwin
        -:  118://   GTEST_OS_DRAGONFLY - DragonFlyBSD
        -:  119://   GTEST_OS_FREEBSD  - FreeBSD
        -:  120://   GTEST_OS_FUCHSIA  - Fuchsia
        -:  121://   GTEST_OS_GNU_HURD - GNU/Hurd
        -:  122://   GTEST_OS_GNU_KFREEBSD - GNU/kFreeBSD
        -:  123://   GTEST_OS_HAIKU    - Haiku
        -:  124://   GTEST_OS_HPUX     - HP-UX
        -:  125://   GTEST_OS_LINUX    - Linux
        -:  126://     GTEST_OS_LINUX_ANDROID - Google Android
        -:  127://   GTEST_OS_MAC      - Mac OS X
        -:  128://     GTEST_OS_IOS    - iOS
        -:  129://   GTEST_OS_NACL     - Google Native Client (NaCl)
        -:  130://   GTEST_OS_NETBSD   - NetBSD
        -:  131://   GTEST_OS_OPENBSD  - OpenBSD
        -:  132://   GTEST_OS_OS2      - OS/2
        -:  133://   GTEST_OS_QNX      - QNX
        -:  134://   GTEST_OS_SOLARIS  - Sun Solaris
        -:  135://   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
        -:  136://     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
        -:  137://     GTEST_OS_WINDOWS_MINGW    - MinGW
        -:  138://     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
        -:  139://     GTEST_OS_WINDOWS_PHONE    - Windows Phone
        -:  140://     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT
        -:  141://   GTEST_OS_ZOS      - z/OS
        -:  142://
        -:  143:// Among the platforms, Cygwin, Linux, Mac OS X, and Windows have the
        -:  144:// most stable support.  Since core members of the Google Test project
        -:  145:// don't have access to other platforms, support for them may be less
        -:  146:// stable.  If you notice any problems on your platform, please notify
        -:  147:// googletestframework@googlegroups.com (patches for fixing them are
        -:  148:// even more welcome!).
        -:  149://
        -:  150:// It is possible that none of the GTEST_OS_* macros are defined.
        -:  151:
        -:  152:// Feature-indicating macros
        -:  153:// -------------------------
        -:  154://
        -:  155:// Macros indicating which Google Test features are available (a macro
        -:  156:// is defined to 1 if the corresponding feature is supported;
        -:  157:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  158:// defines these macros automatically.  Code outside Google Test MUST
        -:  159:// NOT define them.
        -:  160://
        -:  161:// These macros are public so that portable tests can be written.
        -:  162:// Such tests typically surround code using a feature with an #if
        -:  163:// which controls that code.  For example:
        -:  164://
        -:  165:// #if GTEST_HAS_DEATH_TEST
        -:  166://   EXPECT_DEATH(DoSomethingDeadly());
        -:  167:// #endif
        -:  168://
        -:  169://   GTEST_HAS_DEATH_TEST   - death tests
        -:  170://   GTEST_HAS_TYPED_TEST   - typed tests
        -:  171://   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
        -:  172://   GTEST_IS_THREADSAFE    - Google Test is thread-safe.
        -:  173://   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
        -:  174://                            GTEST_HAS_POSIX_RE (see above) which users can
        -:  175://                            define themselves.
        -:  176://   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
        -:  177://                            the above RE\b(s) are mutually exclusive.
        -:  178:
        -:  179:// Misc public macros
        -:  180:// ------------------
        -:  181://
        -:  182://   GTEST_FLAG(flag_name)  - references the variable corresponding to
        -:  183://                            the given Google Test flag.
        -:  184:
        -:  185:// Internal utilities
        -:  186:// ------------------
        -:  187://
        -:  188:// The following macros and utilities are for Google Test's INTERNAL
        -:  189:// use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.
        -:  190://
        -:  191:// Macros for basic C++ coding:
        -:  192://   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
        -:  193://   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
        -:  194://                              variable don't have to be used.
        -:  195://   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.
        -:  196://   GTEST_DISALLOW_MOVE_AND_ASSIGN_ - disables move ctor and operator=.
        -:  197://   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
        -:  198://   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is
        -:  199://                                        suppressed (constant conditional).
        -:  200://   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127
        -:  201://                                        is suppressed.
        -:  202://   GTEST_INTERNAL_HAS_ANY - for enabling UniversalPrinter<std::any> or
        -:  203://                            UniversalPrinter<absl::any> specializations.
        -:  204://   GTEST_INTERNAL_HAS_OPTIONAL - for enabling UniversalPrinter<std::optional>
        -:  205://   or
        -:  206://                                 UniversalPrinter<absl::optional>
        -:  207://                                 specializations.
        -:  208://   GTEST_INTERNAL_HAS_STRING_VIEW - for enabling Matcher<std::string_view> or
        -:  209://                                    Matcher<absl::string_view>
        -:  210://                                    specializations.
        -:  211://   GTEST_INTERNAL_HAS_VARIANT - for enabling UniversalPrinter<std::variant> or
        -:  212://                                UniversalPrinter<absl::variant>
        -:  213://                                specializations.
        -:  214://
        -:  215:// Synchronization:
        -:  216://   Mutex, MutexLock, ThreadLocal, GetThreadCount()
        -:  217://                            - synchronization primitives.
        -:  218://
        -:  219:// Regular expressions:
        -:  220://   RE             - a simple regular expression class using the POSIX
        -:  221://                    Extended Regular Expression syntax on UNIX-like platforms
        -:  222://                    or a reduced regular exception syntax on other
        -:  223://                    platforms, including Windows.
        -:  224:// Logging:
        -:  225://   GTEST_LOG_()   - logs messages at the specified severity level.
        -:  226://   LogToStderr()  - directs all log messages to stderr.
        -:  227://   FlushInfoLog() - flushes informational log messages.
        -:  228://
        -:  229:// Stdout and stderr capturing:
        -:  230://   CaptureStdout()     - starts capturing stdout.
        -:  231://   GetCapturedStdout() - stops capturing stdout and returns the captured
        -:  232://                         string.
        -:  233://   CaptureStderr()     - starts capturing stderr.
        -:  234://   GetCapturedStderr() - stops capturing stderr and returns the captured
        -:  235://                         string.
        -:  236://
        -:  237:// Integer types:
        -:  238://   TypeWithSize   - maps an integer to a int type.
        -:  239://   TimeInMillis   - integers of known sizes.
        -:  240://   BiggestInt     - the biggest signed integer type.
        -:  241://
        -:  242:// Command-line utilities:
        -:  243://   GTEST_DECLARE_*()  - declares a flag.
        -:  244://   GTEST_DEFINE_*()   - defines a flag.
        -:  245://   GetInjectableArgvs() - returns the command line as a vector of strings.
        -:  246://
        -:  247:// Environment variable utilities:
        -:  248://   GetEnv()             - gets the value of an environment variable.
        -:  249://   BoolFromGTestEnv()   - parses a bool environment variable.
        -:  250://   Int32FromGTestEnv()  - parses an int32_t environment variable.
        -:  251://   StringFromGTestEnv() - parses a string environment variable.
        -:  252://
        -:  253:// Deprecation warnings:
        -:  254://   GTEST_INTERNAL_DEPRECATED(message) - attribute marking a function as
        -:  255://                                        deprecated; calling a marked function
        -:  256://                                        should generate a compiler warning
        -:  257:
        -:  258:#include <ctype.h>   // for isspace, etc
        -:  259:#include <stddef.h>  // for ptrdiff_t
        -:  260:#include <stdio.h>
        -:  261:#include <stdlib.h>
        -:  262:#include <string.h>
        -:  263:
        -:  264:#include <cerrno>
        -:  265:// #include <condition_variable>  // Guarded by GTEST_IS_THREADSAFE below
        -:  266:#include <cstdint>
        -:  267:#include <iostream>
        -:  268:#include <limits>
        -:  269:#include <locale>
        -:  270:#include <memory>
        -:  271:#include <string>
        -:  272:// #include <mutex>  // Guarded by GTEST_IS_THREADSAFE below
        -:  273:#include <tuple>
        -:  274:#include <type_traits>
        -:  275:#include <vector>
        -:  276:
        -:  277:#ifndef _WIN32_WCE
        -:  278:#include <sys/stat.h>
        -:  279:#include <sys/types.h>
        -:  280:#endif  // !_WIN32_WCE
        -:  281:
        -:  282:#if defined __APPLE__
        -:  283:#include <AvailabilityMacros.h>
        -:  284:#include <TargetConditionals.h>
        -:  285:#endif
        -:  286:
        -:  287:#include "gtest/internal/custom/gtest-port.h"
        -:  288:#include "gtest/internal/gtest-port-arch.h"
        -:  289:
        -:  290:#if !defined(GTEST_DEV_EMAIL_)
        -:  291:#define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"
        -:  292:#define GTEST_FLAG_PREFIX_ "gtest_"
        -:  293:#define GTEST_FLAG_PREFIX_DASH_ "gtest-"
        -:  294:#define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"
        -:  295:#define GTEST_NAME_ "Google Test"
        -:  296:#define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"
        -:  297:#endif  // !defined(GTEST_DEV_EMAIL_)
        -:  298:
        -:  299:#if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  300:#define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"
        -:  301:#endif  // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  302:
        -:  303:// Determines the version of gcc that is used to compile this.
        -:  304:#ifdef __GNUC__
        -:  305:// 40302 means version 4.3.2.
        -:  306:#define GTEST_GCC_VER_ \
        -:  307:  (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
        -:  308:#endif  // __GNUC__
        -:  309:
        -:  310:// Macros for disabling Microsoft Visual C++ warnings.
        -:  311://
        -:  312://   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)
        -:  313://   /* code that triggers warnings C4800 and C4385 */
        -:  314://   GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  315:#if defined(_MSC_VER)
        -:  316:#define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \
        -:  317:  __pragma(warning(push)) __pragma(warning(disable : warnings))
        -:  318:#define GTEST_DISABLE_MSC_WARNINGS_POP_() __pragma(warning(pop))
        -:  319:#else
        -:  320:// Not all compilers are MSVC
        -:  321:#define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)
        -:  322:#define GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  323:#endif
        -:  324:
        -:  325:// Clang on Windows does not understand MSVC's pragma warning.
        -:  326:// We need clang-specific way to disable function deprecation warning.
        -:  327:#ifdef __clang__
        -:  328:#define GTEST_DISABLE_MSC_DEPRECATED_PUSH_()                            \
        -:  329:  _Pragma("clang diagnostic push")                                      \
        -:  330:      _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"") \
        -:  331:          _Pragma("clang diagnostic ignored \"-Wdeprecated-implementations\"")
        -:  332:#define GTEST_DISABLE_MSC_DEPRECATED_POP_() _Pragma("clang diagnostic pop")
        -:  333:#else
        -:  334:#define GTEST_DISABLE_MSC_DEPRECATED_PUSH_() \
        -:  335:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)
        -:  336:#define GTEST_DISABLE_MSC_DEPRECATED_POP_() GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  337:#endif
        -:  338:
        -:  339:// Brings in definitions for functions used in the testing::internal::posix
        -:  340:// namespace (read, write, close, chdir, isatty, stat). We do not currently
        -:  341:// use them on Windows Mobile.
        -:  342:#if GTEST_OS_WINDOWS
        -:  343:#if !GTEST_OS_WINDOWS_MOBILE
        -:  344:#include <direct.h>
        -:  345:#include <io.h>
        -:  346:#endif
        -:  347:// In order to avoid having to include <windows.h>, use forward declaration
        -:  348:#if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)
        -:  349:// MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two
        -:  350:// separate (equivalent) structs, instead of using typedef
        -:  351:typedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  352:#else
        -:  353:// Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.
        -:  354:// This assumption is verified by
        -:  355:// WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.
        -:  356:typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  357:#endif
        -:  358:#elif GTEST_OS_XTENSA
        -:  359:#include <unistd.h>
        -:  360:// Xtensa toolchains define strcasecmp in the string.h header instead of
        -:  361:// strings.h. string.h is already included.
        -:  362:#else
        -:  363:// This assumes that non-Windows OSes provide unistd.h. For OSes where this
        -:  364:// is not the case, we need to include headers that provide the functions
        -:  365:// mentioned above.
        -:  366:#include <strings.h>
        -:  367:#include <unistd.h>
        -:  368:#endif  // GTEST_OS_WINDOWS
        -:  369:
        -:  370:#if GTEST_OS_LINUX_ANDROID
        -:  371:// Used to define __ANDROID_API__ matching the target NDK API level.
        -:  372:#include <android/api-level.h>  // NOLINT
        -:  373:#endif
        -:  374:
        -:  375:// Defines this to true if and only if Google Test can use POSIX regular
        -:  376:// expressions.
        -:  377:#ifndef GTEST_HAS_POSIX_RE
        -:  378:#if GTEST_OS_LINUX_ANDROID
        -:  379:// On Android, <regex.h> is only available starting with Gingerbread.
        -:  380:#define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)
        -:  381:#else
        -:  382:#define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS && !GTEST_OS_XTENSA)
        -:  383:#endif
        -:  384:#endif
        -:  385:
        -:  386:#if GTEST_USES_PCRE
        -:  387:// The appropriate headers have already been included.
        -:  388:
        -:  389:#elif GTEST_HAS_POSIX_RE
        -:  390:
        -:  391:// On some platforms, <regex.h> needs someone to define size_t, and
        -:  392:// won't compile otherwise.  We can #include it here as we already
        -:  393:// included <stdlib.h>, which is guaranteed to define size_t through
        -:  394:// <stddef.h>.
        -:  395:#include <regex.h>  // NOLINT
        -:  396:
        -:  397:#define GTEST_USES_POSIX_RE 1
        -:  398:
        -:  399:#elif GTEST_OS_WINDOWS
        -:  400:
        -:  401:// <regex.h> is not available on Windows.  Use our own simple regex
        -:  402:// implementation instead.
        -:  403:#define GTEST_USES_SIMPLE_RE 1
        -:  404:
        -:  405:#else
        -:  406:
        -:  407:// <regex.h> may not be available on this platform.  Use our own
        -:  408:// simple regex implementation instead.
        -:  409:#define GTEST_USES_SIMPLE_RE 1
        -:  410:
        -:  411:#endif  // GTEST_USES_PCRE
        -:  412:
        -:  413:#ifndef GTEST_HAS_EXCEPTIONS
        -:  414:// The user didn't tell us whether exceptions are enabled, so we need
        -:  415:// to figure it out.
        -:  416:#if defined(_MSC_VER) && defined(_CPPUNWIND)
        -:  417:// MSVC defines _CPPUNWIND to 1 if and only if exceptions are enabled.
        -:  418:#define GTEST_HAS_EXCEPTIONS 1
        -:  419:#elif defined(__BORLANDC__)
        -:  420:// C++Builder's implementation of the STL uses the _HAS_EXCEPTIONS
        -:  421:// macro to enable exceptions, so we'll do the same.
        -:  422:// Assumes that exceptions are enabled by default.
        -:  423:#ifndef _HAS_EXCEPTIONS
        -:  424:#define _HAS_EXCEPTIONS 1
        -:  425:#endif  // _HAS_EXCEPTIONS
        -:  426:#define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS
        -:  427:#elif defined(__clang__)
        -:  428:// clang defines __EXCEPTIONS if and only if exceptions are enabled before clang
        -:  429:// 220714, but if and only if cleanups are enabled after that. In Obj-C++ files,
        -:  430:// there can be cleanups for ObjC exceptions which also need cleanups, even if
        -:  431:// C++ exceptions are disabled. clang has __has_feature(cxx_exceptions) which
        -:  432:// checks for C++ exceptions starting at clang r206352, but which checked for
        -:  433:// cleanups prior to that. To reliably check for C++ exception availability with
        -:  434:// clang, check for
        -:  435:// __EXCEPTIONS && __has_feature(cxx_exceptions).
        -:  436:#define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))
        -:  437:#elif defined(__GNUC__) && __EXCEPTIONS
        -:  438:// gcc defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
        -:  439:#define GTEST_HAS_EXCEPTIONS 1
        -:  440:#elif defined(__SUNPRO_CC)
        -:  441:// Sun Pro CC supports exceptions.  However, there is no compile-time way of
        -:  442:// detecting whether they are enabled or not.  Therefore, we assume that
        -:  443:// they are enabled unless the user tells us otherwise.
        -:  444:#define GTEST_HAS_EXCEPTIONS 1
        -:  445:#elif defined(__IBMCPP__) && __EXCEPTIONS
        -:  446:// xlC defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
        -:  447:#define GTEST_HAS_EXCEPTIONS 1
        -:  448:#elif defined(__HP_aCC)
        -:  449:// Exception handling is in effect by default in HP aCC compiler. It has to
        -:  450:// be turned of by +noeh compiler option if desired.
        -:  451:#define GTEST_HAS_EXCEPTIONS 1
        -:  452:#else
        -:  453:// For other compilers, we assume exceptions are disabled to be
        -:  454:// conservative.
        -:  455:#define GTEST_HAS_EXCEPTIONS 0
        -:  456:#endif  // defined(_MSC_VER) || defined(__BORLANDC__)
        -:  457:#endif  // GTEST_HAS_EXCEPTIONS
        -:  458:
        -:  459:#ifndef GTEST_HAS_STD_WSTRING
        -:  460:// The user didn't tell us whether ::std::wstring is available, so we need
        -:  461:// to figure it out.
        -:  462:// Cygwin 1.7 and below doesn't support ::std::wstring.
        -:  463:// Solaris' libc++ doesn't support it either.  Android has
        -:  464:// no support for it at least as recent as Froyo (2.2).
        -:  465:#define GTEST_HAS_STD_WSTRING                                         \
        -:  466:  (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \
        -:  467:     GTEST_OS_HAIKU || GTEST_OS_ESP32 || GTEST_OS_ESP8266 || GTEST_OS_XTENSA))
        -:  468:
        -:  469:#endif  // GTEST_HAS_STD_WSTRING
        -:  470:
        -:  471:// Determines whether RTTI is available.
        -:  472:#ifndef GTEST_HAS_RTTI
        -:  473:// The user didn't tell us whether RTTI is enabled, so we need to
        -:  474:// figure it out.
        -:  475:
        -:  476:#ifdef _MSC_VER
        -:  477:
        -:  478:#ifdef _CPPRTTI  // MSVC defines this macro if and only if RTTI is enabled.
        -:  479:#define GTEST_HAS_RTTI 1
        -:  480:#else
        -:  481:#define GTEST_HAS_RTTI 0
        -:  482:#endif
        -:  483:
        -:  484:// Starting with version 4.3.2, gcc defines __GXX_RTTI if and only if RTTI is
        -:  485:// enabled.
        -:  486:#elif defined(__GNUC__)
        -:  487:
        -:  488:#ifdef __GXX_RTTI
        -:  489:// When building against STLport with the Android NDK and with
        -:  490:// -frtti -fno-exceptions, the build fails at link time with undefined
        -:  491:// references to __cxa_bad_typeid. Note sure if STL or toolchain bug,
        -:  492:// so disable RTTI when detected.
        -:  493:#if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && !defined(__EXCEPTIONS)
        -:  494:#define GTEST_HAS_RTTI 0
        -:  495:#else
        -:  496:#define GTEST_HAS_RTTI 1
        -:  497:#endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS
        -:  498:#else
        -:  499:#define GTEST_HAS_RTTI 0
        -:  500:#endif  // __GXX_RTTI
        -:  501:
        -:  502:// Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends
        -:  503:// using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the
        -:  504:// first version with C++ support.
        -:  505:#elif defined(__clang__)
        -:  506:
        -:  507:#define GTEST_HAS_RTTI __has_feature(cxx_rtti)
        -:  508:
        -:  509:// Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if
        -:  510:// both the typeid and dynamic_cast features are present.
        -:  511:#elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)
        -:  512:
        -:  513:#ifdef __RTTI_ALL__
        -:  514:#define GTEST_HAS_RTTI 1
        -:  515:#else
        -:  516:#define GTEST_HAS_RTTI 0
        -:  517:#endif
        -:  518:
        -:  519:#else
        -:  520:
        -:  521:// For all other compilers, we assume RTTI is enabled.
        -:  522:#define GTEST_HAS_RTTI 1
        -:  523:
        -:  524:#endif  // _MSC_VER
        -:  525:
        -:  526:#endif  // GTEST_HAS_RTTI
        -:  527:
        -:  528:// It's this header's responsibility to #include <typeinfo> when RTTI
        -:  529:// is enabled.
        -:  530:#if GTEST_HAS_RTTI
        -:  531:#include <typeinfo>
        -:  532:#endif
        -:  533:
        -:  534:// Determines whether Google Test can use the pthreads library.
        -:  535:#ifndef GTEST_HAS_PTHREAD
        -:  536:// The user didn't tell us explicitly, so we make reasonable assumptions about
        -:  537:// which platforms have pthreads support.
        -:  538://
        -:  539:// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
        -:  540:// to your compiler flags.
        -:  541:#define GTEST_HAS_PTHREAD                                                      \
        -:  542:  (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX ||          \
        -:  543:   GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA || \
        -:  544:   GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_OPENBSD ||          \
        -:  545:   GTEST_OS_HAIKU || GTEST_OS_GNU_HURD)
        -:  546:#endif  // GTEST_HAS_PTHREAD
        -:  547:
        -:  548:#if GTEST_HAS_PTHREAD
        -:  549:// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
        -:  550:// true.
        -:  551:#include <pthread.h>  // NOLINT
        -:  552:
        -:  553:// For timespec and nanosleep, used below.
        -:  554:#include <time.h>  // NOLINT
        -:  555:#endif
        -:  556:
        -:  557:// Determines whether clone(2) is supported.
        -:  558:// Usually it will only be available on Linux, excluding
        -:  559:// Linux on the Itanium architecture.
        -:  560:// Also see http://linux.die.net/man/2/clone.
        -:  561:#ifndef GTEST_HAS_CLONE
        -:  562:// The user didn't tell us, so we need to figure it out.
        -:  563:
        -:  564:#if GTEST_OS_LINUX && !defined(__ia64__)
        -:  565:#if GTEST_OS_LINUX_ANDROID
        -:  566:// On Android, clone() became available at different API levels for each 32-bit
        -:  567:// architecture.
        -:  568:#if defined(__LP64__) || (defined(__arm__) && __ANDROID_API__ >= 9) || \
        -:  569:    (defined(__mips__) && __ANDROID_API__ >= 12) ||                    \
        -:  570:    (defined(__i386__) && __ANDROID_API__ >= 17)
        -:  571:#define GTEST_HAS_CLONE 1
        -:  572:#else
        -:  573:#define GTEST_HAS_CLONE 0
        -:  574:#endif
        -:  575:#else
        -:  576:#define GTEST_HAS_CLONE 1
        -:  577:#endif
        -:  578:#else
        -:  579:#define GTEST_HAS_CLONE 0
        -:  580:#endif  // GTEST_OS_LINUX && !defined(__ia64__)
        -:  581:
        -:  582:#endif  // GTEST_HAS_CLONE
        -:  583:
        -:  584:// Determines whether to support stream redirection. This is used to test
        -:  585:// output correctness and to implement death tests.
        -:  586:#ifndef GTEST_HAS_STREAM_REDIRECTION
        -:  587:// By default, we assume that stream redirection is supported on all
        -:  588:// platforms except known mobile ones.
        -:  589:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \
        -:  590:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_XTENSA
        -:  591:#define GTEST_HAS_STREAM_REDIRECTION 0
        -:  592:#else
        -:  593:#define GTEST_HAS_STREAM_REDIRECTION 1
        -:  594:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -:  595:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -:  596:
        -:  597:// Determines whether to support death tests.
        -:  598:// pops up a dialog window that cannot be suppressed programmatically.
        -:  599:#if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS ||             \
        -:  600:     (GTEST_OS_MAC && !GTEST_OS_IOS) ||                                   \
        -:  601:     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER) || GTEST_OS_WINDOWS_MINGW ||  \
        -:  602:     GTEST_OS_AIX || GTEST_OS_HPUX || GTEST_OS_OPENBSD || GTEST_OS_QNX || \
        -:  603:     GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA ||           \
        -:  604:     GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_HAIKU ||     \
        -:  605:     GTEST_OS_GNU_HURD)
        -:  606:#define GTEST_HAS_DEATH_TEST 1
        -:  607:#endif
        -:  608:
        -:  609:// Determines whether to support type-driven tests.
        -:  610:
        -:  611:// Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,
        -:  612:// Sun Pro CC, IBM Visual Age, and HP aCC support.
        -:  613:#if defined(__GNUC__) || defined(_MSC_VER) || defined(__SUNPRO_CC) || \
        -:  614:    defined(__IBMCPP__) || defined(__HP_aCC)
        -:  615:#define GTEST_HAS_TYPED_TEST 1
        -:  616:#define GTEST_HAS_TYPED_TEST_P 1
        -:  617:#endif
        -:  618:
        -:  619:// Determines whether the system compiler uses UTF-16 for encoding wide strings.
        -:  620:#define GTEST_WIDE_STRING_USES_UTF16_ \
        -:  621:  (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_AIX || GTEST_OS_OS2)
        -:  622:
        -:  623:// Determines whether test results can be streamed to a socket.
        -:  624:#if GTEST_OS_LINUX || GTEST_OS_GNU_KFREEBSD || GTEST_OS_DRAGONFLY || \
        -:  625:    GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_OPENBSD ||       \
        -:  626:    GTEST_OS_GNU_HURD
        -:  627:#define GTEST_CAN_STREAM_RESULTS_ 1
        -:  628:#endif
        -:  629:
        -:  630:// Defines some utility macros.
        -:  631:
        -:  632:// The GNU compiler emits a warning if nested "if" statements are followed by
        -:  633:// an "else" statement and braces are not used to explicitly disambiguate the
        -:  634:// "else" binding.  This leads to problems with code like:
        -:  635://
        -:  636://   if (gate)
        -:  637://     ASSERT_*(condition) << "Some message";
        -:  638://
        -:  639:// The "switch (0) case 0:" idiom is used to suppress this.
        -:  640:#ifdef __INTEL_COMPILER
        -:  641:#define GTEST_AMBIGUOUS_ELSE_BLOCKER_
        -:  642:#else
        -:  643:#define GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -:  644:  switch (0)                          \
        -:  645:  case 0:                             \
        -:  646:  default:  // NOLINT
        -:  647:#endif
        -:  648:
        -:  649:// Use this annotation at the end of a struct/class definition to
        -:  650:// prevent the compiler from optimizing away instances that are never
        -:  651:// used.  This is useful when all interesting logic happens inside the
        -:  652:// c'tor and / or d'tor.  Example:
        -:  653://
        -:  654://   struct Foo {
        -:  655://     Foo() { ... }
        -:  656://   } GTEST_ATTRIBUTE_UNUSED_;
        -:  657://
        -:  658:// Also use it after a variable or parameter declaration to tell the
        -:  659:// compiler the variable/parameter does not have to be used.
        -:  660:#if defined(__GNUC__) && !defined(COMPILER_ICC)
        -:  661:#define GTEST_ATTRIBUTE_UNUSED_ __attribute__((unused))
        -:  662:#elif defined(__clang__)
        -:  663:#if __has_attribute(unused)
        -:  664:#define GTEST_ATTRIBUTE_UNUSED_ __attribute__((unused))
        -:  665:#endif
        -:  666:#endif
        -:  667:#ifndef GTEST_ATTRIBUTE_UNUSED_
        -:  668:#define GTEST_ATTRIBUTE_UNUSED_
        -:  669:#endif
        -:  670:
        -:  671:// Use this annotation before a function that takes a printf format string.
        -:  672:#if (defined(__GNUC__) || defined(__clang__)) && !defined(COMPILER_ICC)
        -:  673:#if defined(__MINGW_PRINTF_FORMAT)
        -:  674:// MinGW has two different printf implementations. Ensure the format macro
        -:  675:// matches the selected implementation. See
        -:  676:// https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.
        -:  677:#define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \
        -:  678:  __attribute__((                                             \
        -:  679:      __format__(__MINGW_PRINTF_FORMAT, string_index, first_to_check)))
        -:  680:#else
        -:  681:#define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \
        -:  682:  __attribute__((__format__(__printf__, string_index, first_to_check)))
        -:  683:#endif
        -:  684:#else
        -:  685:#define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)
        -:  686:#endif
        -:  687:
        -:  688:// A macro to disallow copy constructor and operator=
        -:  689:// This should be used in the private: declarations for a class.
        -:  690:// NOLINT is for modernize-use-trailing-return-type in macro uses.
        -:  691:#define GTEST_DISALLOW_COPY_AND_ASSIGN_(type) \
        -:  692:  type(type const&) = delete;                 \
        -:  693:  type& operator=(type const&) = delete /* NOLINT */
        -:  694:
        -:  695:// A macro to disallow move constructor and operator=
        -:  696:// This should be used in the private: declarations for a class.
        -:  697:// NOLINT is for modernize-use-trailing-return-type in macro uses.
        -:  698:#define GTEST_DISALLOW_MOVE_AND_ASSIGN_(type) \
        -:  699:  type(type&&) noexcept = delete;             \
        -:  700:  type& operator=(type&&) noexcept = delete /* NOLINT */
        -:  701:
        -:  702:// Tell the compiler to warn about unused return values for functions declared
        -:  703:// with this macro.  The macro should be used on function declarations
        -:  704:// following the argument list:
        -:  705://
        -:  706://   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;
        -:  707:#if defined(__GNUC__) && !defined(COMPILER_ICC)
        -:  708:#define GTEST_MUST_USE_RESULT_ __attribute__((warn_unused_result))
        -:  709:#else
        -:  710:#define GTEST_MUST_USE_RESULT_
        -:  711:#endif  // __GNUC__ && !COMPILER_ICC
        -:  712:
        -:  713:// MS C++ compiler emits warning when a conditional expression is compile time
        -:  714:// constant. In some contexts this warning is false positive and needs to be
        -:  715:// suppressed. Use the following two macros in such cases:
        -:  716://
        -:  717:// GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -:  718:// while (true) {
        -:  719:// GTEST_INTENTIONAL_CONST_COND_POP_()
        -:  720:// }
        -:  721:#define GTEST_INTENTIONAL_CONST_COND_PUSH_() \
        -:  722:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)
        -:  723:#define GTEST_INTENTIONAL_CONST_COND_POP_() GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  724:
        -:  725:// Determine whether the compiler supports Microsoft's Structured Exception
        -:  726:// Handling.  This is supported by several Windows compilers but generally
        -:  727:// does not exist on any other system.
        -:  728:#ifndef GTEST_HAS_SEH
        -:  729:// The user didn't tell us, so we need to figure it out.
        -:  730:
        -:  731:#if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  732:// These two compilers are known to support SEH.
        -:  733:#define GTEST_HAS_SEH 1
        -:  734:#else
        -:  735:// Assume no SEH.
        -:  736:#define GTEST_HAS_SEH 0
        -:  737:#endif
        -:  738:
        -:  739:#endif  // GTEST_HAS_SEH
        -:  740:
        -:  741:#ifndef GTEST_IS_THREADSAFE
        -:  742:
        -:  743:#define GTEST_IS_THREADSAFE                                                 \
        -:  744:  (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ ||                                     \
        -:  745:   (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) || \
        -:  746:   GTEST_HAS_PTHREAD)
        -:  747:
        -:  748:#endif  // GTEST_IS_THREADSAFE
        -:  749:
        -:  750:#if GTEST_IS_THREADSAFE
        -:  751:// Some platforms don't support including these threading related headers.
        -:  752:#include <condition_variable>  // NOLINT
        -:  753:#include <mutex>               // NOLINT
        -:  754:#endif                         // GTEST_IS_THREADSAFE
        -:  755:
        -:  756:// GTEST_API_ qualifies all symbols that must be exported. The definitions below
        -:  757:// are guarded by #ifndef to give embedders a chance to define GTEST_API_ in
        -:  758:// gtest/internal/custom/gtest-port.h
        -:  759:#ifndef GTEST_API_
        -:  760:
        -:  761:#ifdef _MSC_VER
        -:  762:#if GTEST_LINKED_AS_SHARED_LIBRARY
        -:  763:#define GTEST_API_ __declspec(dllimport)
        -:  764:#elif GTEST_CREATE_SHARED_LIBRARY
        -:  765:#define GTEST_API_ __declspec(dllexport)
        -:  766:#endif
        -:  767:#elif __GNUC__ >= 4 || defined(__clang__)
        -:  768:#define GTEST_API_ __attribute__((visibility("default")))
        -:  769:#endif  // _MSC_VER
        -:  770:
        -:  771:#endif  // GTEST_API_
        -:  772:
        -:  773:#ifndef GTEST_API_
        -:  774:#define GTEST_API_
        -:  775:#endif  // GTEST_API_
        -:  776:
        -:  777:#ifndef GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  778:#define GTEST_DEFAULT_DEATH_TEST_STYLE "fast"
        -:  779:#endif  // GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  780:
        -:  781:#ifdef __GNUC__
        -:  782:// Ask the compiler to never inline a given function.
        -:  783:#define GTEST_NO_INLINE_ __attribute__((noinline))
        -:  784:#else
        -:  785:#define GTEST_NO_INLINE_
        -:  786:#endif
        -:  787:
        -:  788:#if defined(__clang__)
        -:  789:// Nested ifs to avoid triggering MSVC warning.
        -:  790:#if __has_attribute(disable_tail_calls)
        -:  791:// Ask the compiler not to perform tail call optimization inside
        -:  792:// the marked function.
        -:  793:#define GTEST_NO_TAIL_CALL_ __attribute__((disable_tail_calls))
        -:  794:#endif
        -:  795:#elif __GNUC__
        -:  796:#define GTEST_NO_TAIL_CALL_ \
        -:  797:  __attribute__((optimize("no-optimize-sibling-calls")))
        -:  798:#else
        -:  799:#define GTEST_NO_TAIL_CALL_
        -:  800:#endif
        -:  801:
        -:  802:// _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.
        -:  803:#if !defined(GTEST_HAS_CXXABI_H_)
        -:  804:#if defined(__GLIBCXX__) || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER))
        -:  805:#define GTEST_HAS_CXXABI_H_ 1
        -:  806:#else
        -:  807:#define GTEST_HAS_CXXABI_H_ 0
        -:  808:#endif
        -:  809:#endif
        -:  810:
        -:  811:// A function level attribute to disable checking for use of uninitialized
        -:  812:// memory when built with MemorySanitizer.
        -:  813:#if defined(__clang__)
        -:  814:#if __has_feature(memory_sanitizer)
        -:  815:#define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ __attribute__((no_sanitize_memory))
        -:  816:#else
        -:  817:#define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  818:#endif  // __has_feature(memory_sanitizer)
        -:  819:#else
        -:  820:#define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  821:#endif  // __clang__
        -:  822:
        -:  823:// A function level attribute to disable AddressSanitizer instrumentation.
        -:  824:#if defined(__clang__)
        -:  825:#if __has_feature(address_sanitizer)
        -:  826:#define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \
        -:  827:  __attribute__((no_sanitize_address))
        -:  828:#else
        -:  829:#define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  830:#endif  // __has_feature(address_sanitizer)
        -:  831:#else
        -:  832:#define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  833:#endif  // __clang__
        -:  834:
        -:  835:// A function level attribute to disable HWAddressSanitizer instrumentation.
        -:  836:#if defined(__clang__)
        -:  837:#if __has_feature(hwaddress_sanitizer)
        -:  838:#define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ \
        -:  839:  __attribute__((no_sanitize("hwaddress")))
        -:  840:#else
        -:  841:#define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -:  842:#endif  // __has_feature(hwaddress_sanitizer)
        -:  843:#else
        -:  844:#define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -:  845:#endif  // __clang__
        -:  846:
        -:  847:// A function level attribute to disable ThreadSanitizer instrumentation.
        -:  848:#if defined(__clang__)
        -:  849:#if __has_feature(thread_sanitizer)
        -:  850:#define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ __attribute__((no_sanitize_thread))
        -:  851:#else
        -:  852:#define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  853:#endif  // __has_feature(thread_sanitizer)
        -:  854:#else
        -:  855:#define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  856:#endif  // __clang__
        -:  857:
        -:  858:namespace testing {
        -:  859:
        -:  860:class Message;
        -:  861:
        -:  862:// Legacy imports for backwards compatibility.
        -:  863:// New code should use std:: names directly.
        -:  864:using std::get;
        -:  865:using std::make_tuple;
        -:  866:using std::tuple;
        -:  867:using std::tuple_element;
        -:  868:using std::tuple_size;
        -:  869:
        -:  870:namespace internal {
        -:  871:
        -:  872:// A secret type that Google Test users don't know about.  It has no
        -:  873:// definition on purpose.  Therefore it's impossible to create a
        -:  874:// Secret object, which is what we want.
        -:  875:class Secret;
        -:  876:
        -:  877:// The GTEST_COMPILE_ASSERT_ is a legacy macro used to verify that a compile
        -:  878:// time expression is true (in new code, use static_assert instead). For
        -:  879:// example, you could use it to verify the size of a static array:
        -:  880://
        -:  881://   GTEST_COMPILE_ASSERT_(GTEST_ARRAY_SIZE_(names) == NUM_NAMES,
        -:  882://                         names_incorrect_size);
        -:  883://
        -:  884:// The second argument to the macro must be a valid C++ identifier. If the
        -:  885:// expression is false, compiler will issue an error containing this identifier.
        -:  886:#define GTEST_COMPILE_ASSERT_(expr, msg) static_assert(expr, #msg)
        -:  887:
        -:  888:// A helper for suppressing warnings on constant condition.  It just
        -:  889:// returns 'condition'.
        -:  890:GTEST_API_ bool IsTrue(bool condition);
        -:  891:
        -:  892:// Defines RE.
        -:  893:
        -:  894:#if GTEST_USES_PCRE
        -:  895:// if used, PCRE is injected by custom/gtest-port.h
        -:  896:#elif GTEST_USES_POSIX_RE || GTEST_USES_SIMPLE_RE
        -:  897:
        -:  898:// A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended
        -:  899:// Regular Expression syntax.
        -:  900:class GTEST_API_ RE {
        -:  901: public:
        -:  902:  // A copy constructor is required by the Standard to initialize object
        -:  903:  // references from r-values.
        -:  904:  RE(const RE& other) { Init(other.pattern()); }
        -:  905:
        -:  906:  // Constructs an RE from a string.
        -:  907:  RE(const ::std::string& regex) { Init(regex.c_str()); }  // NOLINT
        -:  908:
        -:  909:  RE(const char* regex) { Init(regex); }  // NOLINT
        -:  910:  ~RE();
        -:  911:
        -:  912:  // Returns the string representation of the regex.
        -:  913:  const char* pattern() const { return pattern_; }
        -:  914:
        -:  915:  // FullMatch(str, re) returns true if and only if regular expression re
        -:  916:  // matches the entire str.
        -:  917:  // PartialMatch(str, re) returns true if and only if regular expression re
        -:  918:  // matches a substring of str (including str itself).
        -:  919:  static bool FullMatch(const ::std::string& str, const RE& re) {
        -:  920:    return FullMatch(str.c_str(), re);
        -:  921:  }
        -:  922:  static bool PartialMatch(const ::std::string& str, const RE& re) {
        -:  923:    return PartialMatch(str.c_str(), re);
        -:  924:  }
        -:  925:
        -:  926:  static bool FullMatch(const char* str, const RE& re);
        -:  927:  static bool PartialMatch(const char* str, const RE& re);
        -:  928:
        -:  929: private:
        -:  930:  void Init(const char* regex);
        -:  931:  const char* pattern_;
        -:  932:  bool is_valid_;
        -:  933:
        -:  934:#if GTEST_USES_POSIX_RE
        -:  935:
        -:  936:  regex_t full_regex_;     // For FullMatch().
        -:  937:  regex_t partial_regex_;  // For PartialMatch().
        -:  938:
        -:  939:#else  // GTEST_USES_SIMPLE_RE
        -:  940:
        -:  941:  const char* full_pattern_;  // For FullMatch();
        -:  942:
        -:  943:#endif
        -:  944:};
        -:  945:
        -:  946:#endif  // GTEST_USES_PCRE
        -:  947:
        -:  948:// Formats a source file path and a line number as they would appear
        -:  949:// in an error message from the compiler used to compile this code.
        -:  950:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line);
        -:  951:
        -:  952:// Formats a file location for compiler-independent XML output.
        -:  953:// Although this function is not platform dependent, we put it next to
        -:  954:// FormatFileLocation in order to contrast the two functions.
        -:  955:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,
        -:  956:                                                               int line);
        -:  957:
        -:  958:// Defines logging utilities:
        -:  959://   GTEST_LOG_(severity) - logs messages at the specified severity level. The
        -:  960://                          message itself is streamed into the macro.
        -:  961://   LogToStderr()  - directs all log messages to stderr.
        -:  962://   FlushInfoLog() - flushes informational log messages.
        -:  963:
        -:  964:enum GTestLogSeverity { GTEST_INFO, GTEST_WARNING, GTEST_ERROR, GTEST_FATAL };
        -:  965:
        -:  966:// Formats log entry severity, provides a stream object for streaming the
        -:  967:// log message, and terminates the message with a newline when going out of
        -:  968:// scope.
        -:  969:class GTEST_API_ GTestLog {
        -:  970: public:
        -:  971:  GTestLog(GTestLogSeverity severity, const char* file, int line);
        -:  972:
        -:  973:  // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
        -:  974:  ~GTestLog();
        -:  975:
function _ZN7testing8internal8GTestLog9GetStreamEv called 0 returned 0% blocks executed 0%
    #####:  976:  ::std::ostream& GetStream() { return ::std::cerr; }
    %%%%%:  976-block  0
        -:  977:
        -:  978: private:
        -:  979:  const GTestLogSeverity severity_;
        -:  980:
        -:  981:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestLog);
        -:  982:};
        -:  983:
        -:  984:#if !defined(GTEST_LOG_)
        -:  985:
        -:  986:#define GTEST_LOG_(severity)                                           \
        -:  987:  ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \
        -:  988:                                __FILE__, __LINE__)                    \
        -:  989:      .GetStream()
        -:  990:
        -:  991:inline void LogToStderr() {}
        -:  992:inline void FlushInfoLog() { fflush(nullptr); }
        -:  993:
        -:  994:#endif  // !defined(GTEST_LOG_)
        -:  995:
        -:  996:#if !defined(GTEST_CHECK_)
        -:  997:// INTERNAL IMPLEMENTATION - DO NOT USE.
        -:  998://
        -:  999:// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition
        -: 1000:// is not satisfied.
        -: 1001://  Synopsis:
        -: 1002://    GTEST_CHECK_(boolean_condition);
        -: 1003://     or
        -: 1004://    GTEST_CHECK_(boolean_condition) << "Additional message";
        -: 1005://
        -: 1006://    This checks the condition and if the condition is not satisfied
        -: 1007://    it prints message about the condition violation, including the
        -: 1008://    condition itself, plus additional message streamed into it, if any,
        -: 1009://    and then it aborts the program. It aborts the program irrespective of
        -: 1010://    whether it is built in the debug mode or not.
        -: 1011:#define GTEST_CHECK_(condition)               \
        -: 1012:  GTEST_AMBIGUOUS_ELSE_BLOCKER_               \
        -: 1013:  if (::testing::internal::IsTrue(condition)) \
        -: 1014:    ;                                         \
        -: 1015:  else                                        \
        -: 1016:    GTEST_LOG_(FATAL) << "Condition " #condition " failed. "
        -: 1017:#endif  // !defined(GTEST_CHECK_)
        -: 1018:
        -: 1019:// An all-mode assert to verify that the given POSIX-style function
        -: 1020:// call returns 0 (indicating success).  Known limitation: this
        -: 1021:// doesn't expand to a balanced 'if' statement, so enclose the macro
        -: 1022:// in {} if you need to use it as the only statement in an 'if'
        -: 1023:// branch.
        -: 1024:#define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \
        -: 1025:  if (const int gtest_error = (posix_call))    \
        -: 1026:  GTEST_LOG_(FATAL) << #posix_call << "failed with error " << gtest_error
        -: 1027:
        -: 1028:// Transforms "T" into "const T&" according to standard reference collapsing
        -: 1029:// rules (this is only needed as a backport for C++98 compilers that do not
        -: 1030:// support reference collapsing). Specifically, it transforms:
        -: 1031://
        -: 1032://   char         ==> const char&
        -: 1033://   const char   ==> const char&
        -: 1034://   char&        ==> char&
        -: 1035://   const char&  ==> const char&
        -: 1036://
        -: 1037:// Note that the non-const reference will not have "const" added. This is
        -: 1038:// standard, and necessary so that "T" can always bind to "const T&".
        -: 1039:template <typename T>
        -: 1040:struct ConstRef {
        -: 1041:  typedef const T& type;
        -: 1042:};
        -: 1043:template <typename T>
        -: 1044:struct ConstRef<T&> {
        -: 1045:  typedef T& type;
        -: 1046:};
        -: 1047:
        -: 1048:// The argument T must depend on some template parameters.
        -: 1049:#define GTEST_REFERENCE_TO_CONST_(T) \
        -: 1050:  typename ::testing::internal::ConstRef<T>::type
        -: 1051:
        -: 1052:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
        -: 1053://
        -: 1054:// Use ImplicitCast_ as a safe version of static_cast for upcasting in
        -: 1055:// the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a
        -: 1056:// const Foo*).  When you use ImplicitCast_, the compiler checks that
        -: 1057:// the cast is safe.  Such explicit ImplicitCast_s are necessary in
        -: 1058:// surprisingly many situations where C++ demands an exact type match
        -: 1059:// instead of an argument type convertible to a target type.
        -: 1060://
        -: 1061:// The syntax for using ImplicitCast_ is the same as for static_cast:
        -: 1062://
        -: 1063://   ImplicitCast_<ToType>(expr)
        -: 1064://
        -: 1065:// ImplicitCast_ would have been part of the C++ standard library,
        -: 1066:// but the proposal was submitted too late.  It will probably make
        -: 1067:// its way into the language in the future.
        -: 1068://
        -: 1069:// This relatively ugly name is intentional. It prevents clashes with
        -: 1070:// similar functions users may have (e.g., implicit_cast). The internal
        -: 1071:// namespace alone is not enough because the function can be found by ADL.
        -: 1072:template <typename To>
        -: 1073:inline To ImplicitCast_(To x) {
        -: 1074:  return x;
        -: 1075:}
        -: 1076:
        -: 1077:// When you upcast (that is, cast a pointer from type Foo to type
        -: 1078:// SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts
        -: 1079:// always succeed.  When you downcast (that is, cast a pointer from
        -: 1080:// type Foo to type SubclassOfFoo), static_cast<> isn't safe, because
        -: 1081:// how do you know the pointer is really of type SubclassOfFoo?  It
        -: 1082:// could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,
        -: 1083:// when you downcast, you should use this macro.  In debug mode, we
        -: 1084:// use dynamic_cast<> to double-check the downcast is legal (we die
        -: 1085:// if it's not).  In normal mode, we do the efficient static_cast<>
        -: 1086:// instead.  Thus, it's important to test in debug mode to make sure
        -: 1087:// the cast is legal!
        -: 1088://    This is the only place in the code we should use dynamic_cast<>.
        -: 1089:// In particular, you SHOULDN'T be using dynamic_cast<> in order to
        -: 1090:// do RTTI (eg code like this:
        -: 1091://    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);
        -: 1092://    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);
        -: 1093:// You should design the code some other way not to need this.
        -: 1094://
        -: 1095:// This relatively ugly name is intentional. It prevents clashes with
        -: 1096:// similar functions users may have (e.g., down_cast). The internal
        -: 1097:// namespace alone is not enough because the function can be found by ADL.
        -: 1098:template <typename To, typename From>  // use like this: DownCast_<T*>(foo);
        -: 1099:inline To DownCast_(From* f) {         // so we only accept pointers
        -: 1100:  // Ensures that To is a sub-type of From *.  This test is here only
        -: 1101:  // for compile-time type checking, and has no overhead in an
        -: 1102:  // optimized build at run-time, as it will be optimized away
        -: 1103:  // completely.
        -: 1104:  GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -: 1105:  if (false) {
        -: 1106:    GTEST_INTENTIONAL_CONST_COND_POP_()
        -: 1107:    const To to = nullptr;
        -: 1108:    ::testing::internal::ImplicitCast_<From*>(to);
        -: 1109:  }
        -: 1110:
        -: 1111:#if GTEST_HAS_RTTI
        -: 1112:  // RTTI: debug mode only!
        -: 1113:  GTEST_CHECK_(f == nullptr || dynamic_cast<To>(f) != nullptr);
        -: 1114:#endif
        -: 1115:  return static_cast<To>(f);
        -: 1116:}
        -: 1117:
        -: 1118:// Downcasts the pointer of type Base to Derived.
        -: 1119:// Derived must be a subclass of Base. The parameter MUST
        -: 1120:// point to a class of type Derived, not any subclass of it.
        -: 1121:// When RTTI is available, the function performs a runtime
        -: 1122:// check to enforce this.
        -: 1123:template <class Derived, class Base>
        -: 1124:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1125:#if GTEST_HAS_RTTI
        -: 1126:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
        -: 1127:#endif
        -: 1128:
        -: 1129:#if GTEST_HAS_DOWNCAST_
        -: 1130:  return ::down_cast<Derived*>(base);
        -: 1131:#elif GTEST_HAS_RTTI
        -: 1132:  return dynamic_cast<Derived*>(base);  // NOLINT
        -: 1133:#else
        -: 1134:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1135:#endif
        -: 1136:}
        -: 1137:
        -: 1138:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1139:
        -: 1140:// Defines the stderr capturer:
        -: 1141://   CaptureStdout     - starts capturing stdout.
        -: 1142://   GetCapturedStdout - stops capturing stdout and returns the captured string.
        -: 1143://   CaptureStderr     - starts capturing stderr.
        -: 1144://   GetCapturedStderr - stops capturing stderr and returns the captured string.
        -: 1145://
        -: 1146:GTEST_API_ void CaptureStdout();
        -: 1147:GTEST_API_ std::string GetCapturedStdout();
        -: 1148:GTEST_API_ void CaptureStderr();
        -: 1149:GTEST_API_ std::string GetCapturedStderr();
        -: 1150:
        -: 1151:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1152:// Returns the size (in bytes) of a file.
        -: 1153:GTEST_API_ size_t GetFileSize(FILE* file);
        -: 1154:
        -: 1155:// Reads the entire content of a file as a string.
        -: 1156:GTEST_API_ std::string ReadEntireFile(FILE* file);
        -: 1157:
        -: 1158:// All command line arguments.
        -: 1159:GTEST_API_ std::vector<std::string> GetArgvs();
        -: 1160:
        -: 1161:#if GTEST_HAS_DEATH_TEST
        -: 1162:
        -: 1163:std::vector<std::string> GetInjectableArgvs();
        -: 1164:// Deprecated: pass the args vector by value instead.
        -: 1165:void SetInjectableArgvs(const std::vector<std::string>* new_argvs);
        -: 1166:void SetInjectableArgvs(const std::vector<std::string>& new_argvs);
        -: 1167:void ClearInjectableArgvs();
        -: 1168:
        -: 1169:#endif  // GTEST_HAS_DEATH_TEST
        -: 1170:
        -: 1171:// Defines synchronization primitives.
        -: 1172:#if GTEST_IS_THREADSAFE
        -: 1173:
        -: 1174:#if GTEST_OS_WINDOWS
        -: 1175:// Provides leak-safe Windows kernel handle ownership.
        -: 1176:// Used in death tests and in threading support.
        -: 1177:class GTEST_API_ AutoHandle {
        -: 1178: public:
        -: 1179:  // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to
        -: 1180:  // avoid including <windows.h> in this header file. Including <windows.h> is
        -: 1181:  // undesirable because it defines a lot of symbols and macros that tend to
        -: 1182:  // conflict with client code. This assumption is verified by
        -: 1183:  // WindowsTypesTest.HANDLEIsVoidStar.
        -: 1184:  typedef void* Handle;
        -: 1185:  AutoHandle();
        -: 1186:  explicit AutoHandle(Handle handle);
        -: 1187:
        -: 1188:  ~AutoHandle();
        -: 1189:
        -: 1190:  Handle Get() const;
        -: 1191:  void Reset();
        -: 1192:  void Reset(Handle handle);
        -: 1193:
        -: 1194: private:
        -: 1195:  // Returns true if and only if the handle is a valid handle object that can be
        -: 1196:  // closed.
        -: 1197:  bool IsCloseable() const;
        -: 1198:
        -: 1199:  Handle handle_;
        -: 1200:
        -: 1201:  GTEST_DISALLOW_COPY_AND_ASSIGN_(AutoHandle);
        -: 1202:};
        -: 1203:#endif
        -: 1204:
        -: 1205:#if GTEST_HAS_NOTIFICATION_
        -: 1206:// Notification has already been imported into the namespace.
        -: 1207:// Nothing to do here.
        -: 1208:
        -: 1209:#else
        -: 1210:// Allows a controller thread to pause execution of newly created
        -: 1211:// threads until notified.  Instances of this class must be created
        -: 1212:// and destroyed in the controller thread.
        -: 1213://
        -: 1214:// This class is only for testing Google Test's own constructs. Do not
        -: 1215:// use it in user tests, either directly or indirectly.
        -: 1216:// TODO(b/203539622): Replace unconditionally with absl::Notification.
        -: 1217:class GTEST_API_ Notification {
        -: 1218: public:
        -: 1219:  Notification() : notified_(false) {}
        -: 1220:  Notification(const Notification&) = delete;
        -: 1221:  Notification& operator=(const Notification&) = delete;
        -: 1222:
        -: 1223:  // Notifies all threads created with this notification to start. Must
        -: 1224:  // be called from the controller thread.
        -: 1225:  void Notify() {
        -: 1226:    std::lock_guard<std::mutex> lock(mu_);
        -: 1227:    notified_ = true;
        -: 1228:    cv_.notify_all();
        -: 1229:  }
        -: 1230:
        -: 1231:  // Blocks until the controller thread notifies. Must be called from a test
        -: 1232:  // thread.
        -: 1233:  void WaitForNotification() {
        -: 1234:    std::unique_lock<std::mutex> lock(mu_);
        -: 1235:    cv_.wait(lock, [this]() { return notified_; });
        -: 1236:  }
        -: 1237:
        -: 1238: private:
        -: 1239:  std::mutex mu_;
        -: 1240:  std::condition_variable cv_;
        -: 1241:  bool notified_;
        -: 1242:};
        -: 1243:#endif  // GTEST_HAS_NOTIFICATION_
        -: 1244:
        -: 1245:// On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD
        -: 1246:// defined, but we don't want to use MinGW's pthreads implementation, which
        -: 1247:// has conformance problems with some versions of the POSIX standard.
        -: 1248:#if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW
        -: 1249:
        -: 1250:// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.
        -: 1251:// Consequently, it cannot select a correct instantiation of ThreadWithParam
        -: 1252:// in order to call its Run(). Introducing ThreadWithParamBase as a
        -: 1253:// non-templated base class for ThreadWithParam allows us to bypass this
        -: 1254:// problem.
        -: 1255:class ThreadWithParamBase {
        -: 1256: public:
        -: 1257:  virtual ~ThreadWithParamBase() {}
        -: 1258:  virtual void Run() = 0;
        -: 1259:};
        -: 1260:
        -: 1261:// pthread_create() accepts a pointer to a function type with the C linkage.
        -: 1262:// According to the Standard (7.5/1), function types with different linkages
        -: 1263:// are different even if they are otherwise identical.  Some compilers (for
        -: 1264:// example, SunStudio) treat them as different types.  Since class methods
        -: 1265:// cannot be defined with C-linkage we need to define a free C-function to
        -: 1266:// pass into pthread_create().
        -: 1267:extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {
        -: 1268:  static_cast<ThreadWithParamBase*>(thread)->Run();
        -: 1269:  return nullptr;
        -: 1270:}
        -: 1271:
        -: 1272:// Helper class for testing Google Test's multi-threading constructs.
        -: 1273:// To use it, write:
        -: 1274://
        -: 1275://   void ThreadFunc(int param) { /* Do things with param */ }
        -: 1276://   Notification thread_can_start;
        -: 1277://   ...
        -: 1278://   // The thread_can_start parameter is optional; you can supply NULL.
        -: 1279://   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);
        -: 1280://   thread_can_start.Notify();
        -: 1281://
        -: 1282:// These classes are only for testing Google Test's own constructs. Do
        -: 1283:// not use them in user tests, either directly or indirectly.
        -: 1284:template <typename T>
        -: 1285:class ThreadWithParam : public ThreadWithParamBase {
        -: 1286: public:
        -: 1287:  typedef void UserThreadFunc(T);
        -: 1288:
        -: 1289:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1290:      : func_(func),
        -: 1291:        param_(param),
        -: 1292:        thread_can_start_(thread_can_start),
        -: 1293:        finished_(false) {
        -: 1294:    ThreadWithParamBase* const base = this;
        -: 1295:    // The thread can be created only after all fields except thread_
        -: 1296:    // have been initialized.
        -: 1297:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1298:        pthread_create(&thread_, nullptr, &ThreadFuncWithCLinkage, base));
        -: 1299:  }
        -: 1300:  ~ThreadWithParam() override { Join(); }
        -: 1301:
        -: 1302:  void Join() {
        -: 1303:    if (!finished_) {
        -: 1304:      GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, nullptr));
        -: 1305:      finished_ = true;
        -: 1306:    }
        -: 1307:  }
        -: 1308:
        -: 1309:  void Run() override {
        -: 1310:    if (thread_can_start_ != nullptr) thread_can_start_->WaitForNotification();
        -: 1311:    func_(param_);
        -: 1312:  }
        -: 1313:
        -: 1314: private:
        -: 1315:  UserThreadFunc* const func_;  // User-supplied thread function.
        -: 1316:  const T param_;  // User-supplied parameter to the thread function.
        -: 1317:  // When non-NULL, used to block execution until the controller thread
        -: 1318:  // notifies.
        -: 1319:  Notification* const thread_can_start_;
        -: 1320:  bool finished_;  // true if and only if we know that the thread function has
        -: 1321:                   // finished.
        -: 1322:  pthread_t thread_;  // The native thread object.
        -: 1323:
        -: 1324:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1325:};
        -: 1326:#endif  // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||
        -: 1327:        // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1328:
        -: 1329:#if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1330:// Mutex and ThreadLocal have already been imported into the namespace.
        -: 1331:// Nothing to do here.
        -: 1332:
        -: 1333:#elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 1334:
        -: 1335:// Mutex implements mutex on Windows platforms.  It is used in conjunction
        -: 1336:// with class MutexLock:
        -: 1337://
        -: 1338://   Mutex mutex;
        -: 1339://   ...
        -: 1340://   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the
        -: 1341://                            // end of the current scope.
        -: 1342://
        -: 1343:// A static Mutex *must* be defined or declared using one of the following
        -: 1344:// macros:
        -: 1345://   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);
        -: 1346://   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);
        -: 1347://
        -: 1348:// (A non-static Mutex is defined/declared in the usual way).
        -: 1349:class GTEST_API_ Mutex {
        -: 1350: public:
        -: 1351:  enum MutexType { kStatic = 0, kDynamic = 1 };
        -: 1352:  // We rely on kStaticMutex being 0 as it is to what the linker initializes
        -: 1353:  // type_ in static mutexes.  critical_section_ will be initialized lazily
        -: 1354:  // in ThreadSafeLazyInit().
        -: 1355:  enum StaticConstructorSelector { kStaticMutex = 0 };
        -: 1356:
        -: 1357:  // This constructor intentionally does nothing.  It relies on type_ being
        -: 1358:  // statically initialized to 0 (effectively setting it to kStatic) and on
        -: 1359:  // ThreadSafeLazyInit() to lazily initialize the rest of the members.
        -: 1360:  explicit Mutex(StaticConstructorSelector /*dummy*/) {}
        -: 1361:
        -: 1362:  Mutex();
        -: 1363:  ~Mutex();
        -: 1364:
        -: 1365:  void Lock();
        -: 1366:
        -: 1367:  void Unlock();
        -: 1368:
        -: 1369:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1370:  // with high probability.
        -: 1371:  void AssertHeld();
        -: 1372:
        -: 1373: private:
        -: 1374:  // Initializes owner_thread_id_ and critical_section_ in static mutexes.
        -: 1375:  void ThreadSafeLazyInit();
        -: 1376:
        -: 1377:  // Per https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,
        -: 1378:  // we assume that 0 is an invalid value for thread IDs.
        -: 1379:  unsigned int owner_thread_id_;
        -: 1380:
        -: 1381:  // For static mutexes, we rely on these members being initialized to zeros
        -: 1382:  // by the linker.
        -: 1383:  MutexType type_;
        -: 1384:  long critical_section_init_phase_;  // NOLINT
        -: 1385:  GTEST_CRITICAL_SECTION* critical_section_;
        -: 1386:
        -: 1387:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1388:};
        -: 1389:
        -: 1390:#define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1391:  extern ::testing::internal::Mutex mutex
        -: 1392:
        -: 1393:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1394:  ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)
        -: 1395:
        -: 1396:// We cannot name this class MutexLock because the ctor declaration would
        -: 1397:// conflict with a macro named MutexLock, which is defined on some
        -: 1398:// platforms. That macro is used as a defensive measure to prevent against
        -: 1399:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1400:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1401:class GTestMutexLock {
        -: 1402: public:
        -: 1403:  explicit GTestMutexLock(Mutex* mutex) : mutex_(mutex) { mutex_->Lock(); }
        -: 1404:
        -: 1405:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1406:
        -: 1407: private:
        -: 1408:  Mutex* const mutex_;
        -: 1409:
        -: 1410:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 1411:};
        -: 1412:
        -: 1413:typedef GTestMutexLock MutexLock;
        -: 1414:
        -: 1415:// Base class for ValueHolder<T>.  Allows a caller to hold and delete a value
        -: 1416:// without knowing its type.
        -: 1417:class ThreadLocalValueHolderBase {
        -: 1418: public:
        -: 1419:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1420:};
        -: 1421:
        -: 1422:// Provides a way for a thread to send notifications to a ThreadLocal
        -: 1423:// regardless of its parameter type.
        -: 1424:class ThreadLocalBase {
        -: 1425: public:
        -: 1426:  // Creates a new ValueHolder<T> object holding a default value passed to
        -: 1427:  // this ThreadLocal<T>'s constructor and returns it.  It is the caller's
        -: 1428:  // responsibility not to call this when the ThreadLocal<T> instance already
        -: 1429:  // has a value on the current thread.
        -: 1430:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const = 0;
        -: 1431:
        -: 1432: protected:
        -: 1433:  ThreadLocalBase() {}
        -: 1434:  virtual ~ThreadLocalBase() {}
        -: 1435:
        -: 1436: private:
        -: 1437:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocalBase);
        -: 1438:};
        -: 1439:
        -: 1440:// Maps a thread to a set of ThreadLocals that have values instantiated on that
        -: 1441:// thread and notifies them when the thread exits.  A ThreadLocal instance is
        -: 1442:// expected to persist until all threads it has values on have terminated.
        -: 1443:class GTEST_API_ ThreadLocalRegistry {
        -: 1444: public:
        -: 1445:  // Registers thread_local_instance as having value on the current thread.
        -: 1446:  // Returns a value that can be used to identify the thread from other threads.
        -: 1447:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -: 1448:      const ThreadLocalBase* thread_local_instance);
        -: 1449:
        -: 1450:  // Invoked when a ThreadLocal instance is destroyed.
        -: 1451:  static void OnThreadLocalDestroyed(
        -: 1452:      const ThreadLocalBase* thread_local_instance);
        -: 1453:};
        -: 1454:
        -: 1455:class GTEST_API_ ThreadWithParamBase {
        -: 1456: public:
        -: 1457:  void Join();
        -: 1458:
        -: 1459: protected:
        -: 1460:  class Runnable {
        -: 1461:   public:
        -: 1462:    virtual ~Runnable() {}
        -: 1463:    virtual void Run() = 0;
        -: 1464:  };
        -: 1465:
        -: 1466:  ThreadWithParamBase(Runnable* runnable, Notification* thread_can_start);
        -: 1467:  virtual ~ThreadWithParamBase();
        -: 1468:
        -: 1469: private:
        -: 1470:  AutoHandle thread_;
        -: 1471:};
        -: 1472:
        -: 1473:// Helper class for testing Google Test's multi-threading constructs.
        -: 1474:template <typename T>
        -: 1475:class ThreadWithParam : public ThreadWithParamBase {
        -: 1476: public:
        -: 1477:  typedef void UserThreadFunc(T);
        -: 1478:
        -: 1479:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1480:      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {}
        -: 1481:  virtual ~ThreadWithParam() {}
        -: 1482:
        -: 1483: private:
        -: 1484:  class RunnableImpl : public Runnable {
        -: 1485:   public:
        -: 1486:    RunnableImpl(UserThreadFunc* func, T param) : func_(func), param_(param) {}
        -: 1487:    virtual ~RunnableImpl() {}
        -: 1488:    virtual void Run() { func_(param_); }
        -: 1489:
        -: 1490:   private:
        -: 1491:    UserThreadFunc* const func_;
        -: 1492:    const T param_;
        -: 1493:
        -: 1494:    GTEST_DISALLOW_COPY_AND_ASSIGN_(RunnableImpl);
        -: 1495:  };
        -: 1496:
        -: 1497:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1498:};
        -: 1499:
        -: 1500:// Implements thread-local storage on Windows systems.
        -: 1501://
        -: 1502://   // Thread 1
        -: 1503://   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.
        -: 1504://
        -: 1505://   // Thread 2
        -: 1506://   tl.set(150);  // Changes the value for thread 2 only.
        -: 1507://   EXPECT_EQ(150, tl.get());
        -: 1508://
        -: 1509://   // Thread 1
        -: 1510://   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.
        -: 1511://   tl.set(200);
        -: 1512://   EXPECT_EQ(200, tl.get());
        -: 1513://
        -: 1514:// The template type argument T must have a public copy constructor.
        -: 1515:// In addition, the default ThreadLocal constructor requires T to have
        -: 1516:// a public default constructor.
        -: 1517://
        -: 1518:// The users of a TheadLocal instance have to make sure that all but one
        -: 1519:// threads (including the main one) using that instance have exited before
        -: 1520:// destroying it. Otherwise, the per-thread objects managed for them by the
        -: 1521:// ThreadLocal instance are not guaranteed to be destroyed on all platforms.
        -: 1522://
        -: 1523:// Google Test only uses global ThreadLocal objects.  That means they
        -: 1524:// will die after main() has returned.  Therefore, no per-thread
        -: 1525:// object managed by Google Test will be leaked as long as all threads
        -: 1526:// using Google Test have exited when main() returns.
        -: 1527:template <typename T>
        -: 1528:class ThreadLocal : public ThreadLocalBase {
        -: 1529: public:
        -: 1530:  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}
        -: 1531:  explicit ThreadLocal(const T& value)
        -: 1532:      : default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 1533:
        -: 1534:  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }
        -: 1535:
        -: 1536:  T* pointer() { return GetOrCreateValue(); }
        -: 1537:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1538:  const T& get() const { return *pointer(); }
        -: 1539:  void set(const T& value) { *pointer() = value; }
        -: 1540:
        -: 1541: private:
        -: 1542:  // Holds a value of T.  Can be deleted via its base class without the caller
        -: 1543:  // knowing the type of T.
        -: 1544:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1545:   public:
        -: 1546:    ValueHolder() : value_() {}
        -: 1547:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1548:
        -: 1549:    T* pointer() { return &value_; }
        -: 1550:
        -: 1551:   private:
        -: 1552:    T value_;
        -: 1553:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 1554:  };
        -: 1555:
        -: 1556:  T* GetOrCreateValue() const {
        -: 1557:    return static_cast<ValueHolder*>(
        -: 1558:               ThreadLocalRegistry::GetValueOnCurrentThread(this))
        -: 1559:        ->pointer();
        -: 1560:  }
        -: 1561:
        -: 1562:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {
        -: 1563:    return default_factory_->MakeNewHolder();
        -: 1564:  }
        -: 1565:
        -: 1566:  class ValueHolderFactory {
        -: 1567:   public:
        -: 1568:    ValueHolderFactory() {}
        -: 1569:    virtual ~ValueHolderFactory() {}
        -: 1570:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1571:
        -: 1572:   private:
        -: 1573:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);
        -: 1574:  };
        -: 1575:
        -: 1576:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1577:   public:
        -: 1578:    DefaultValueHolderFactory() {}
        -: 1579:    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }
        -: 1580:
        -: 1581:   private:
        -: 1582:    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);
        -: 1583:  };
        -: 1584:
        -: 1585:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1586:   public:
        -: 1587:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 1588:    ValueHolder* MakeNewHolder() const override {
        -: 1589:      return new ValueHolder(value_);
        -: 1590:    }
        -: 1591:
        -: 1592:   private:
        -: 1593:    const T value_;  // The value for each thread.
        -: 1594:
        -: 1595:    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);
        -: 1596:  };
        -: 1597:
        -: 1598:  std::unique_ptr<ValueHolderFactory> default_factory_;
        -: 1599:
        -: 1600:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 1601:};
        -: 1602:
        -: 1603:#elif GTEST_HAS_PTHREAD
        -: 1604:
        -: 1605:// MutexBase and Mutex implement mutex on pthreads-based platforms.
        -: 1606:class MutexBase {
        -: 1607: public:
        -: 1608:  // Acquires this mutex.
        -: 1609:  void Lock() {
        -: 1610:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));
        -: 1611:    owner_ = pthread_self();
        -: 1612:    has_owner_ = true;
        -: 1613:  }
        -: 1614:
        -: 1615:  // Releases this mutex.
        -: 1616:  void Unlock() {
        -: 1617:    // Since the lock is being released the owner_ field should no longer be
        -: 1618:    // considered valid. We don't protect writing to has_owner_ here, as it's
        -: 1619:    // the caller's responsibility to ensure that the current thread holds the
        -: 1620:    // mutex when this is called.
        -: 1621:    has_owner_ = false;
        -: 1622:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));
        -: 1623:  }
        -: 1624:
        -: 1625:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1626:  // with high probability.
        -: 1627:  void AssertHeld() const {
        -: 1628:    GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))
        -: 1629:        << "The current thread is not holding the mutex @" << this;
        -: 1630:  }
        -: 1631:
        -: 1632:  // A static mutex may be used before main() is entered.  It may even
        -: 1633:  // be used before the dynamic initialization stage.  Therefore we
        -: 1634:  // must be able to initialize a static mutex object at link time.
        -: 1635:  // This means MutexBase has to be a POD and its member variables
        -: 1636:  // have to be public.
        -: 1637: public:
        -: 1638:  pthread_mutex_t mutex_;  // The underlying pthread mutex.
        -: 1639:  // has_owner_ indicates whether the owner_ field below contains a valid thread
        -: 1640:  // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All
        -: 1641:  // accesses to the owner_ field should be protected by a check of this field.
        -: 1642:  // An alternative might be to memset() owner_ to all zeros, but there's no
        -: 1643:  // guarantee that a zero'd pthread_t is necessarily invalid or even different
        -: 1644:  // from pthread_self().
        -: 1645:  bool has_owner_;
        -: 1646:  pthread_t owner_;  // The thread holding the mutex.
        -: 1647:};
        -: 1648:
        -: 1649:// Forward-declares a static mutex.
        -: 1650:#define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1651:  extern ::testing::internal::MutexBase mutex
        -: 1652:
        -: 1653:// Defines and statically (i.e. at link time) initializes a static mutex.
        -: 1654:// The initialization list here does not explicitly initialize each field,
        -: 1655:// instead relying on default initialization for the unspecified fields. In
        -: 1656:// particular, the owner_ field (a pthread_t) is not explicitly initialized.
        -: 1657:// This allows initialization to work whether pthread_t is a scalar or struct.
        -: 1658:// The flag -Wmissing-field-initializers must not be specified for this to work.
        -: 1659:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1660:  ::testing::internal::MutexBase mutex = {PTHREAD_MUTEX_INITIALIZER, false, 0}
        -: 1661:
        -: 1662:// The Mutex class can only be used for mutexes created at runtime. It
        -: 1663:// shares its API with MutexBase otherwise.
        -: 1664:class Mutex : public MutexBase {
        -: 1665: public:
        -: 1666:  Mutex() {
        -: 1667:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, nullptr));
        -: 1668:    has_owner_ = false;
        -: 1669:  }
        -: 1670:  ~Mutex() { GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_)); }
        -: 1671:
        -: 1672: private:
        -: 1673:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1674:};
        -: 1675:
        -: 1676:// We cannot name this class MutexLock because the ctor declaration would
        -: 1677:// conflict with a macro named MutexLock, which is defined on some
        -: 1678:// platforms. That macro is used as a defensive measure to prevent against
        -: 1679:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1680:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1681:class GTestMutexLock {
        -: 1682: public:
        -: 1683:  explicit GTestMutexLock(MutexBase* mutex) : mutex_(mutex) { mutex_->Lock(); }
        -: 1684:
        -: 1685:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1686:
        -: 1687: private:
        -: 1688:  MutexBase* const mutex_;
        -: 1689:
        -: 1690:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 1691:};
        -: 1692:
        -: 1693:typedef GTestMutexLock MutexLock;
        -: 1694:
        -: 1695:// Helpers for ThreadLocal.
        -: 1696:
        -: 1697:// pthread_key_create() requires DeleteThreadLocalValue() to have
        -: 1698:// C-linkage.  Therefore it cannot be templatized to access
        -: 1699:// ThreadLocal<T>.  Hence the need for class
        -: 1700:// ThreadLocalValueHolderBase.
        -: 1701:class ThreadLocalValueHolderBase {
        -: 1702: public:
        -: 1703:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1704:};
        -: 1705:
        -: 1706:// Called by pthread to delete thread-local data stored by
        -: 1707:// pthread_setspecific().
        -: 1708:extern "C" inline void DeleteThreadLocalValue(void* value_holder) {
        -: 1709:  delete static_cast<ThreadLocalValueHolderBase*>(value_holder);
        -: 1710:}
        -: 1711:
        -: 1712:// Implements thread-local storage on pthreads-based systems.
        -: 1713:template <typename T>
        -: 1714:class GTEST_API_ ThreadLocal {
        -: 1715: public:
        -: 1716:  ThreadLocal()
        -: 1717:      : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) {}
        -: 1718:  explicit ThreadLocal(const T& value)
        -: 1719:      : key_(CreateKey()),
        -: 1720:        default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 1721:
        -: 1722:  ~ThreadLocal() {
        -: 1723:    // Destroys the managed object for the current thread, if any.
        -: 1724:    DeleteThreadLocalValue(pthread_getspecific(key_));
        -: 1725:
        -: 1726:    // Releases resources associated with the key.  This will *not*
        -: 1727:    // delete managed objects for other threads.
        -: 1728:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
        -: 1729:  }
        -: 1730:
        -: 1731:  T* pointer() { return GetOrCreateValue(); }
        -: 1732:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1733:  const T& get() const { return *pointer(); }
        -: 1734:  void set(const T& value) { *pointer() = value; }
        -: 1735:
        -: 1736: private:
        -: 1737:  // Holds a value of type T.
        -: 1738:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1739:   public:
        -: 1740:    ValueHolder() : value_() {}
        -: 1741:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1742:
        -: 1743:    T* pointer() { return &value_; }
        -: 1744:
        -: 1745:   private:
        -: 1746:    T value_;
        -: 1747:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 1748:  };
        -: 1749:
        -: 1750:  static pthread_key_t CreateKey() {
        -: 1751:    pthread_key_t key;
        -: 1752:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 1753:    // the object managed for that thread.
        -: 1754:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1755:        pthread_key_create(&key, &DeleteThreadLocalValue));
        -: 1756:    return key;
        -: 1757:  }
        -: 1758:
        -: 1759:  T* GetOrCreateValue() const {
        -: 1760:    ThreadLocalValueHolderBase* const holder =
        -: 1761:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
        -: 1762:    if (holder != nullptr) {
        -: 1763:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
        -: 1764:    }
        -: 1765:
        -: 1766:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
        -: 1767:    ThreadLocalValueHolderBase* const holder_base = new_holder;
        -: 1768:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
        -: 1769:    return new_holder->pointer();
        -: 1770:  }
        -: 1771:
        -: 1772:  class ValueHolderFactory {
        -: 1773:   public:
        -: 1774:    ValueHolderFactory() {}
        -: 1775:    virtual ~ValueHolderFactory() {}
        -: 1776:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1777:
        -: 1778:   private:
        -: 1779:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);
        -: 1780:  };
        -: 1781:
        -: 1782:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1783:   public:
        -: 1784:    DefaultValueHolderFactory() {}
        -: 1785:    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }
        -: 1786:
        -: 1787:   private:
        -: 1788:    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);
        -: 1789:  };
        -: 1790:
        -: 1791:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1792:   public:
        -: 1793:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 1794:    ValueHolder* MakeNewHolder() const override {
        -: 1795:      return new ValueHolder(value_);
        -: 1796:    }
        -: 1797:
        -: 1798:   private:
        -: 1799:    const T value_;  // The value for each thread.
        -: 1800:
        -: 1801:    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);
        -: 1802:  };
        -: 1803:
        -: 1804:  // A key pthreads uses for looking up per-thread values.
        -: 1805:  const pthread_key_t key_;
        -: 1806:  std::unique_ptr<ValueHolderFactory> default_factory_;
        -: 1807:
        -: 1808:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 1809:};
        -: 1810:
        -: 1811:#endif  // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1812:
        -: 1813:#else  // GTEST_IS_THREADSAFE
        -: 1814:
        -: 1815:// A dummy implementation of synchronization primitives (mutex, lock,
        -: 1816:// and thread-local variable).  Necessary for compiling Google Test where
        -: 1817:// mutex is not supported - using Google Test in multiple threads is not
        -: 1818:// supported on such platforms.
        -: 1819:
        -: 1820:class Mutex {
        -: 1821: public:
        -: 1822:  Mutex() {}
        -: 1823:  void Lock() {}
        -: 1824:  void Unlock() {}
        -: 1825:  void AssertHeld() const {}
        -: 1826:};
        -: 1827:
        -: 1828:#define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1829:  extern ::testing::internal::Mutex mutex
        -: 1830:
        -: 1831:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex
        -: 1832:
        -: 1833:// We cannot name this class MutexLock because the ctor declaration would
        -: 1834:// conflict with a macro named MutexLock, which is defined on some
        -: 1835:// platforms. That macro is used as a defensive measure to prevent against
        -: 1836:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1837:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1838:class GTestMutexLock {
        -: 1839: public:
        -: 1840:  explicit GTestMutexLock(Mutex*) {}  // NOLINT
        -: 1841:};
        -: 1842:
        -: 1843:typedef GTestMutexLock MutexLock;
        -: 1844:
        -: 1845:template <typename T>
        -: 1846:class GTEST_API_ ThreadLocal {
        -: 1847: public:
        -: 1848:  ThreadLocal() : value_() {}
        -: 1849:  explicit ThreadLocal(const T& value) : value_(value) {}
        -: 1850:  T* pointer() { return &value_; }
        -: 1851:  const T* pointer() const { return &value_; }
        -: 1852:  const T& get() const { return value_; }
        -: 1853:  void set(const T& value) { value_ = value; }
        -: 1854:
        -: 1855: private:
        -: 1856:  T value_;
        -: 1857:};
        -: 1858:
        -: 1859:#endif  // GTEST_IS_THREADSAFE
        -: 1860:
        -: 1861:// Returns the number of threads running in the process, or 0 to indicate that
        -: 1862:// we cannot detect it.
        -: 1863:GTEST_API_ size_t GetThreadCount();
        -: 1864:
        -: 1865:#if GTEST_OS_WINDOWS
        -: 1866:#define GTEST_PATH_SEP_ "\\"
        -: 1867:#define GTEST_HAS_ALT_PATH_SEP_ 1
        -: 1868:#else
        -: 1869:#define GTEST_PATH_SEP_ "/"
        -: 1870:#define GTEST_HAS_ALT_PATH_SEP_ 0
        -: 1871:#endif  // GTEST_OS_WINDOWS
        -: 1872:
        -: 1873:// Utilities for char.
        -: 1874:
        -: 1875:// isspace(int ch) and friends accept an unsigned char or EOF.  char
        -: 1876:// may be signed, depending on the compiler (or compiler flags).
        -: 1877:// Therefore we need to cast a char to unsigned char before calling
        -: 1878:// isspace(), etc.
        -: 1879:
        -: 1880:inline bool IsAlpha(char ch) {
        -: 1881:  return isalpha(static_cast<unsigned char>(ch)) != 0;
        -: 1882:}
        -: 1883:inline bool IsAlNum(char ch) {
        -: 1884:  return isalnum(static_cast<unsigned char>(ch)) != 0;
        -: 1885:}
        -: 1886:inline bool IsDigit(char ch) {
        -: 1887:  return isdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1888:}
        -: 1889:inline bool IsLower(char ch) {
        -: 1890:  return islower(static_cast<unsigned char>(ch)) != 0;
        -: 1891:}
        -: 1892:inline bool IsSpace(char ch) {
        -: 1893:  return isspace(static_cast<unsigned char>(ch)) != 0;
        -: 1894:}
        -: 1895:inline bool IsUpper(char ch) {
        -: 1896:  return isupper(static_cast<unsigned char>(ch)) != 0;
        -: 1897:}
        -: 1898:inline bool IsXDigit(char ch) {
        -: 1899:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1900:}
        -: 1901:#ifdef __cpp_char8_t
        -: 1902:inline bool IsXDigit(char8_t ch) {
        -: 1903:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1904:}
        -: 1905:#endif
        -: 1906:inline bool IsXDigit(char16_t ch) {
        -: 1907:  const unsigned char low_byte = static_cast<unsigned char>(ch);
        -: 1908:  return ch == low_byte && isxdigit(low_byte) != 0;
        -: 1909:}
        -: 1910:inline bool IsXDigit(char32_t ch) {
        -: 1911:  const unsigned char low_byte = static_cast<unsigned char>(ch);
        -: 1912:  return ch == low_byte && isxdigit(low_byte) != 0;
        -: 1913:}
        -: 1914:inline bool IsXDigit(wchar_t ch) {
        -: 1915:  const unsigned char low_byte = static_cast<unsigned char>(ch);
        -: 1916:  return ch == low_byte && isxdigit(low_byte) != 0;
        -: 1917:}
        -: 1918:
        -: 1919:inline char ToLower(char ch) {
        -: 1920:  return static_cast<char>(tolower(static_cast<unsigned char>(ch)));
        -: 1921:}
        -: 1922:inline char ToUpper(char ch) {
        -: 1923:  return static_cast<char>(toupper(static_cast<unsigned char>(ch)));
        -: 1924:}
        -: 1925:
        -: 1926:inline std::string StripTrailingSpaces(std::string str) {
        -: 1927:  std::string::iterator it = str.end();
        -: 1928:  while (it != str.begin() && IsSpace(*--it)) it = str.erase(it);
        -: 1929:  return str;
        -: 1930:}
        -: 1931:
        -: 1932:// The testing::internal::posix namespace holds wrappers for common
        -: 1933:// POSIX functions.  These wrappers hide the differences between
        -: 1934:// Windows/MSVC and POSIX systems.  Since some compilers define these
        -: 1935:// standard functions as macros, the wrapper cannot have the same name
        -: 1936:// as the wrapped function.
        -: 1937:
        -: 1938:namespace posix {
        -: 1939:
        -: 1940:// Functions with a different name on Windows.
        -: 1941:
        -: 1942:#if GTEST_OS_WINDOWS
        -: 1943:
        -: 1944:typedef struct _stat StatStruct;
        -: 1945:
        -: 1946:#ifdef __BORLANDC__
        -: 1947:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 1948:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1949:  return stricmp(s1, s2);
        -: 1950:}
        -: 1951:inline char* StrDup(const char* src) { return strdup(src); }
        -: 1952:#else  // !__BORLANDC__
        -: 1953:#if GTEST_OS_WINDOWS_MOBILE
        -: 1954:inline int DoIsATTY(int /* fd */) { return 0; }
        -: 1955:#else
        -: 1956:inline int DoIsATTY(int fd) { return _isatty(fd); }
        -: 1957:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1958:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1959:  return _stricmp(s1, s2);
        -: 1960:}
        -: 1961:inline char* StrDup(const char* src) { return _strdup(src); }
        -: 1962:#endif  // __BORLANDC__
        -: 1963:
        -: 1964:#if GTEST_OS_WINDOWS_MOBILE
        -: 1965:inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }
        -: 1966:// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this
        -: 1967:// time and thus not defined there.
        -: 1968:#else
        -: 1969:inline int FileNo(FILE* file) { return _fileno(file); }
        -: 1970:inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }
        -: 1971:inline int RmDir(const char* dir) { return _rmdir(dir); }
        -: 1972:inline bool IsDir(const StatStruct& st) { return (_S_IFDIR & st.st_mode) != 0; }
        -: 1973:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1974:
        -: 1975:#elif GTEST_OS_ESP8266
        -: 1976:typedef struct stat StatStruct;
        -: 1977:
        -: 1978:inline int FileNo(FILE* file) { return fileno(file); }
        -: 1979:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 1980:inline int Stat(const char* path, StatStruct* buf) {
        -: 1981:  // stat function not implemented on ESP8266
        -: 1982:  return 0;
        -: 1983:}
        -: 1984:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1985:  return strcasecmp(s1, s2);
        -: 1986:}
        -: 1987:inline char* StrDup(const char* src) { return strdup(src); }
        -: 1988:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 1989:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 1990:
        -: 1991:#else
        -: 1992:
        -: 1993:typedef struct stat StatStruct;
        -: 1994:
        -: 1995:inline int FileNo(FILE* file) { return fileno(file); }
        -: 1996:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 1997:inline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }
        -: 1998:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1999:  return strcasecmp(s1, s2);
        -: 2000:}
        -: 2001:inline char* StrDup(const char* src) { return strdup(src); }
        -: 2002:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 2003:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 2004:
        -: 2005:#endif  // GTEST_OS_WINDOWS
        -: 2006:
        -: 2007:inline int IsATTY(int fd) {
        -: 2008:  // DoIsATTY might change errno (for example ENOTTY in case you redirect stdout
        -: 2009:  // to a file on Linux), which is unexpected, so save the previous value, and
        -: 2010:  // restore it after the call.
        -: 2011:  int savedErrno = errno;
        -: 2012:  int isAttyValue = DoIsATTY(fd);
        -: 2013:  errno = savedErrno;
        -: 2014:
        -: 2015:  return isAttyValue;
        -: 2016:}
        -: 2017:
        -: 2018:// Functions deprecated by MSVC 8.0.
        -: 2019:
        -: 2020:GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -: 2021:
        -: 2022:// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and
        -: 2023:// StrError() aren't needed on Windows CE at this time and thus not
        -: 2024:// defined there.
        -: 2025:
        -: 2026:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 2027:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_ESP8266 && !GTEST_OS_XTENSA
        -: 2028:inline int ChDir(const char* dir) { return chdir(dir); }
        -: 2029:#endif
        -: 2030:inline FILE* FOpen(const char* path, const char* mode) {
        -: 2031:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2032:  struct wchar_codecvt : public std::codecvt<wchar_t, char, std::mbstate_t> {};
        -: 2033:  std::wstring_convert<wchar_codecvt> converter;
        -: 2034:  std::wstring wide_path = converter.from_bytes(path);
        -: 2035:  std::wstring wide_mode = converter.from_bytes(mode);
        -: 2036:  return _wfopen(wide_path.c_str(), wide_mode.c_str());
        -: 2037:#else   // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2038:  return fopen(path, mode);
        -: 2039:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2040:}
        -: 2041:#if !GTEST_OS_WINDOWS_MOBILE
        -: 2042:inline FILE* FReopen(const char* path, const char* mode, FILE* stream) {
        -: 2043:  return freopen(path, mode, stream);
        -: 2044:}
        -: 2045:inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
        -: 2046:#endif
        -: 2047:inline int FClose(FILE* fp) { return fclose(fp); }
        -: 2048:#if !GTEST_OS_WINDOWS_MOBILE
        -: 2049:inline int Read(int fd, void* buf, unsigned int count) {
        -: 2050:  return static_cast<int>(read(fd, buf, count));
        -: 2051:}
        -: 2052:inline int Write(int fd, const void* buf, unsigned int count) {
        -: 2053:  return static_cast<int>(write(fd, buf, count));
        -: 2054:}
        -: 2055:inline int Close(int fd) { return close(fd); }
        -: 2056:inline const char* StrError(int errnum) { return strerror(errnum); }
        -: 2057:#endif
        -: 2058:inline const char* GetEnv(const char* name) {
        -: 2059:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \
        -: 2060:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_XTENSA
        -: 2061:  // We are on an embedded platform, which has no environment variables.
        -: 2062:  static_cast<void>(name);  // To prevent 'unused argument' warning.
        -: 2063:  return nullptr;
        -: 2064:#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)
        -: 2065:  // Environment variables which we programmatically clear will be set to the
        -: 2066:  // empty string rather than unset (NULL).  Handle that case.
        -: 2067:  const char* const env = getenv(name);
        -: 2068:  return (env != nullptr && env[0] != '\0') ? env : nullptr;
        -: 2069:#else
        -: 2070:  return getenv(name);
        -: 2071:#endif
        -: 2072:}
        -: 2073:
        -: 2074:GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -: 2075:
        -: 2076:#if GTEST_OS_WINDOWS_MOBILE
        -: 2077:// Windows CE has no C library. The abort() function is used in
        -: 2078:// several places in Google Test. This implementation provides a reasonable
        -: 2079:// imitation of standard behaviour.
        -: 2080:[[noreturn]] void Abort();
        -: 2081:#else
        -: 2082:[[noreturn]] inline void Abort() { abort(); }
        -: 2083:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2084:
        -: 2085:}  // namespace posix
        -: 2086:
        -: 2087:// MSVC "deprecates" snprintf and issues warnings wherever it is used.  In
        -: 2088:// order to avoid these warnings, we need to use _snprintf or _snprintf_s on
        -: 2089:// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate
        -: 2090:// function in order to achieve that.  We use macro definition here because
        -: 2091:// snprintf is a variadic function.
        -: 2092:#if _MSC_VER && !GTEST_OS_WINDOWS_MOBILE
        -: 2093:// MSVC 2005 and above support variadic macros.
        -: 2094:#define GTEST_SNPRINTF_(buffer, size, format, ...) \
        -: 2095:  _snprintf_s(buffer, size, size, format, __VA_ARGS__)
        -: 2096:#elif defined(_MSC_VER)
        -: 2097:// Windows CE does not define _snprintf_s
        -: 2098:#define GTEST_SNPRINTF_ _snprintf
        -: 2099:#else
        -: 2100:#define GTEST_SNPRINTF_ snprintf
        -: 2101:#endif
        -: 2102:
        -: 2103:// The biggest signed integer type the compiler supports.
        -: 2104://
        -: 2105:// long long is guaranteed to be at least 64-bits in C++11.
        -: 2106:using BiggestInt = long long;  // NOLINT
        -: 2107:
        -: 2108:// The maximum number a BiggestInt can represent.
        -: 2109:constexpr BiggestInt kMaxBiggestInt = (std::numeric_limits<BiggestInt>::max)();
        -: 2110:
        -: 2111:// This template class serves as a compile-time function from size to
        -: 2112:// type.  It maps a size in bytes to a primitive type with that
        -: 2113:// size. e.g.
        -: 2114://
        -: 2115://   TypeWithSize<4>::UInt
        -: 2116://
        -: 2117:// is typedef-ed to be unsigned int (unsigned integer made up of 4
        -: 2118:// bytes).
        -: 2119://
        -: 2120:// Such functionality should belong to STL, but I cannot find it
        -: 2121:// there.
        -: 2122://
        -: 2123:// Google Test uses this class in the implementation of floating-point
        -: 2124:// comparison.
        -: 2125://
        -: 2126:// For now it only handles UInt (unsigned int) as that's all Google Test
        -: 2127:// needs.  Other types can be easily added in the future if need
        -: 2128:// arises.
        -: 2129:template <size_t size>
        -: 2130:class TypeWithSize {
        -: 2131: public:
        -: 2132:  // This prevents the user from using TypeWithSize<N> with incorrect
        -: 2133:  // values of N.
        -: 2134:  using UInt = void;
        -: 2135:};
        -: 2136:
        -: 2137:// The specialization for size 4.
        -: 2138:template <>
        -: 2139:class TypeWithSize<4> {
        -: 2140: public:
        -: 2141:  using Int = std::int32_t;
        -: 2142:  using UInt = std::uint32_t;
        -: 2143:};
        -: 2144:
        -: 2145:// The specialization for size 8.
        -: 2146:template <>
        -: 2147:class TypeWithSize<8> {
        -: 2148: public:
        -: 2149:  using Int = std::int64_t;
        -: 2150:  using UInt = std::uint64_t;
        -: 2151:};
        -: 2152:
        -: 2153:// Integer types of known sizes.
        -: 2154:using TimeInMillis = int64_t;  // Represents time in milliseconds.
        -: 2155:
        -: 2156:// Utilities for command line flags and environment variables.
        -: 2157:
        -: 2158:// Macro for referencing flags.
        -: 2159:#if !defined(GTEST_FLAG)
        -: 2160:#define GTEST_FLAG(name) FLAGS_gtest_##name
        -: 2161:#endif  // !defined(GTEST_FLAG)
        -: 2162:
        -: 2163:#if !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)
        -: 2164:#define GTEST_USE_OWN_FLAGFILE_FLAG_ 1
        -: 2165:#endif  // !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)
        -: 2166:
        -: 2167:#if !defined(GTEST_DECLARE_bool_)
        -: 2168:#define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver
        -: 2169:
        -: 2170:// Macros for declaring flags.
        -: 2171:#define GTEST_DECLARE_bool_(name)          \
        -: 2172:  namespace testing {                      \
        -: 2173:  GTEST_API_ extern bool GTEST_FLAG(name); \
        -: 2174:  }                                        \
        -: 2175:  static_assert(true, "no-op to require trailing semicolon")
        -: 2176:#define GTEST_DECLARE_int32_(name)                 \
        -: 2177:  namespace testing {                              \
        -: 2178:  GTEST_API_ extern std::int32_t GTEST_FLAG(name); \
        -: 2179:  }                                                \
        -: 2180:  static_assert(true, "no-op to require trailing semicolon")
        -: 2181:#define GTEST_DECLARE_string_(name)                 \
        -: 2182:  namespace testing {                               \
        -: 2183:  GTEST_API_ extern ::std::string GTEST_FLAG(name); \
        -: 2184:  }                                                 \
        -: 2185:  static_assert(true, "no-op to require trailing semicolon")
        -: 2186:
        -: 2187:// Macros for defining flags.
        -: 2188:#define GTEST_DEFINE_bool_(name, default_val, doc)  \
        -: 2189:  namespace testing {                               \
        -: 2190:  GTEST_API_ bool GTEST_FLAG(name) = (default_val); \
        -: 2191:  }                                                 \
        -: 2192:  static_assert(true, "no-op to require trailing semicolon")
        -: 2193:#define GTEST_DEFINE_int32_(name, default_val, doc)         \
        -: 2194:  namespace testing {                                       \
        -: 2195:  GTEST_API_ std::int32_t GTEST_FLAG(name) = (default_val); \
        -: 2196:  }                                                         \
        -: 2197:  static_assert(true, "no-op to require trailing semicolon")
        -: 2198:#define GTEST_DEFINE_string_(name, default_val, doc)         \
        -: 2199:  namespace testing {                                        \
        -: 2200:  GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val); \
        -: 2201:  }                                                          \
        -: 2202:  static_assert(true, "no-op to require trailing semicolon")
        -: 2203:
        -: 2204:#endif  // !defined(GTEST_DECLARE_bool_)
        -: 2205:
        -: 2206:#if !defined(GTEST_FLAG_GET)
        -: 2207:#define GTEST_FLAG_GET(name) ::testing::GTEST_FLAG(name)
        -: 2208:#define GTEST_FLAG_SET(name, value) (void)(::testing::GTEST_FLAG(name) = value)
        -: 2209:#endif  // !defined(GTEST_FLAG_GET)
        -: 2210:
        -: 2211:// Thread annotations
        -: 2212:#if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2213:#define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)
        -: 2214:#define GTEST_LOCK_EXCLUDED_(locks)
        -: 2215:#endif  // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2216:
        -: 2217:// Parses 'str' for a 32-bit signed integer.  If successful, writes the result
        -: 2218:// to *value and returns true; otherwise leaves *value unchanged and returns
        -: 2219:// false.
        -: 2220:GTEST_API_ bool ParseInt32(const Message& src_text, const char* str,
        -: 2221:                           int32_t* value);
        -: 2222:
        -: 2223:// Parses a bool/int32_t/string from the environment variable
        -: 2224:// corresponding to the given Google Test flag.
        -: 2225:bool BoolFromGTestEnv(const char* flag, bool default_val);
        -: 2226:GTEST_API_ int32_t Int32FromGTestEnv(const char* flag, int32_t default_val);
        -: 2227:std::string OutputFlagAlsoCheckEnvVar();
        -: 2228:const char* StringFromGTestEnv(const char* flag, const char* default_val);
        -: 2229:
        -: 2230:}  // namespace internal
        -: 2231:}  // namespace testing
        -: 2232:
        -: 2233:#if !defined(GTEST_INTERNAL_DEPRECATED)
        -: 2234:
        -: 2235:// Internal Macro to mark an API deprecated, for googletest usage only
        -: 2236:// Usage: class GTEST_INTERNAL_DEPRECATED(message) MyClass or
        -: 2237:// GTEST_INTERNAL_DEPRECATED(message) <return_type> myFunction(); Every usage of
        -: 2238:// a deprecated entity will trigger a warning when compiled with
        -: 2239:// `-Wdeprecated-declarations` option (clang, gcc, any __GNUC__ compiler).
        -: 2240:// For msvc /W3 option will need to be used
        -: 2241:// Note that for 'other' compilers this macro evaluates to nothing to prevent
        -: 2242:// compilations errors.
        -: 2243:#if defined(_MSC_VER)
        -: 2244:#define GTEST_INTERNAL_DEPRECATED(message) __declspec(deprecated(message))
        -: 2245:#elif defined(__GNUC__)
        -: 2246:#define GTEST_INTERNAL_DEPRECATED(message) __attribute__((deprecated(message)))
        -: 2247:#else
        -: 2248:#define GTEST_INTERNAL_DEPRECATED(message)
        -: 2249:#endif
        -: 2250:
        -: 2251:#endif  // !defined(GTEST_INTERNAL_DEPRECATED)
        -: 2252:
        -: 2253:#if GTEST_HAS_ABSL
        -: 2254:// Always use absl::any for UniversalPrinter<> specializations if googletest
        -: 2255:// is built with absl support.
        -: 2256:#define GTEST_INTERNAL_HAS_ANY 1
        -: 2257:#include "absl/types/any.h"
        -: 2258:namespace testing {
        -: 2259:namespace internal {
        -: 2260:using Any = ::absl::any;
        -: 2261:}  // namespace internal
        -: 2262:}  // namespace testing
        -: 2263:#else
        -: 2264:#ifdef __has_include
        -: 2265:#if __has_include(<any>) && __cplusplus >= 201703L
        -: 2266:// Otherwise for C++17 and higher use std::any for UniversalPrinter<>
        -: 2267:// specializations.
        -: 2268:#define GTEST_INTERNAL_HAS_ANY 1
        -: 2269:#include <any>
        -: 2270:namespace testing {
        -: 2271:namespace internal {
        -: 2272:using Any = ::std::any;
        -: 2273:}  // namespace internal
        -: 2274:}  // namespace testing
        -: 2275:// The case where absl is configured NOT to alias std::any is not
        -: 2276:// supported.
        -: 2277:#endif  // __has_include(<any>) && __cplusplus >= 201703L
        -: 2278:#endif  // __has_include
        -: 2279:#endif  // GTEST_HAS_ABSL
        -: 2280:
        -: 2281:#if GTEST_HAS_ABSL
        -: 2282:// Always use absl::optional for UniversalPrinter<> specializations if
        -: 2283:// googletest is built with absl support.
        -: 2284:#define GTEST_INTERNAL_HAS_OPTIONAL 1
        -: 2285:#include "absl/types/optional.h"
        -: 2286:namespace testing {
        -: 2287:namespace internal {
        -: 2288:template <typename T>
        -: 2289:using Optional = ::absl::optional<T>;
        -: 2290:inline ::absl::nullopt_t Nullopt() { return ::absl::nullopt; }
        -: 2291:}  // namespace internal
        -: 2292:}  // namespace testing
        -: 2293:#else
        -: 2294:#ifdef __has_include
        -: 2295:#if __has_include(<optional>) && __cplusplus >= 201703L
        -: 2296:// Otherwise for C++17 and higher use std::optional for UniversalPrinter<>
        -: 2297:// specializations.
        -: 2298:#define GTEST_INTERNAL_HAS_OPTIONAL 1
        -: 2299:#include <optional>
        -: 2300:namespace testing {
        -: 2301:namespace internal {
        -: 2302:template <typename T>
        -: 2303:using Optional = ::std::optional<T>;
        -: 2304:inline ::std::nullopt_t Nullopt() { return ::std::nullopt; }
        -: 2305:}  // namespace internal
        -: 2306:}  // namespace testing
        -: 2307:// The case where absl is configured NOT to alias std::optional is not
        -: 2308:// supported.
        -: 2309:#endif  // __has_include(<optional>) && __cplusplus >= 201703L
        -: 2310:#endif  // __has_include
        -: 2311:#endif  // GTEST_HAS_ABSL
        -: 2312:
        -: 2313:#if GTEST_HAS_ABSL
        -: 2314:// Always use absl::string_view for Matcher<> specializations if googletest
        -: 2315:// is built with absl support.
        -: 2316:#define GTEST_INTERNAL_HAS_STRING_VIEW 1
        -: 2317:#include "absl/strings/string_view.h"
        -: 2318:namespace testing {
        -: 2319:namespace internal {
        -: 2320:using StringView = ::absl::string_view;
        -: 2321:}  // namespace internal
        -: 2322:}  // namespace testing
        -: 2323:#else
        -: 2324:#ifdef __has_include
        -: 2325:#if __has_include(<string_view>) && __cplusplus >= 201703L
        -: 2326:// Otherwise for C++17 and higher use std::string_view for Matcher<>
        -: 2327:// specializations.
        -: 2328:#define GTEST_INTERNAL_HAS_STRING_VIEW 1
        -: 2329:#include <string_view>
        -: 2330:namespace testing {
        -: 2331:namespace internal {
        -: 2332:using StringView = ::std::string_view;
        -: 2333:}  // namespace internal
        -: 2334:}  // namespace testing
        -: 2335:// The case where absl is configured NOT to alias std::string_view is not
        -: 2336:// supported.
        -: 2337:#endif  // __has_include(<string_view>) && __cplusplus >= 201703L
        -: 2338:#endif  // __has_include
        -: 2339:#endif  // GTEST_HAS_ABSL
        -: 2340:
        -: 2341:#if GTEST_HAS_ABSL
        -: 2342:// Always use absl::variant for UniversalPrinter<> specializations if googletest
        -: 2343:// is built with absl support.
        -: 2344:#define GTEST_INTERNAL_HAS_VARIANT 1
        -: 2345:#include "absl/types/variant.h"
        -: 2346:namespace testing {
        -: 2347:namespace internal {
        -: 2348:template <typename... T>
        -: 2349:using Variant = ::absl::variant<T...>;
        -: 2350:}  // namespace internal
        -: 2351:}  // namespace testing
        -: 2352:#else
        -: 2353:#ifdef __has_include
        -: 2354:#if __has_include(<variant>) && __cplusplus >= 201703L
        -: 2355:// Otherwise for C++17 and higher use std::variant for UniversalPrinter<>
        -: 2356:// specializations.
        -: 2357:#define GTEST_INTERNAL_HAS_VARIANT 1
        -: 2358:#include <variant>
        -: 2359:namespace testing {
        -: 2360:namespace internal {
        -: 2361:template <typename... T>
        -: 2362:using Variant = ::std::variant<T...>;
        -: 2363:}  // namespace internal
        -: 2364:}  // namespace testing
        -: 2365:   // The case where absl is configured NOT to alias std::variant is not
        -: 2366:   // supported.
        -: 2367:#endif  // __has_include(<variant>) && __cplusplus >= 201703L
        -: 2368:#endif  // __has_include
        -: 2369:#endif  // GTEST_HAS_ABSL
        -: 2370:
        -: 2371:#endif  // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
