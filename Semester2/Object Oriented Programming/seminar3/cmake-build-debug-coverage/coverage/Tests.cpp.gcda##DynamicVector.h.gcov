        -:    0:Source:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/seminar3/DynamicVector.h
        -:    0:Graph:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/seminar3/cmake-build-debug-coverage/CMakeFiles/seminar3.dir/Tests.cpp.gcno
        -:    0:Data:/home/georgerapeanu/Desktop/ubbShit/Semester2/OOP/seminar3/cmake-build-debug-coverage/CMakeFiles/seminar3.dir/Tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include <iterator>
        -:    3:
        -:    4:template <typename T>
        -:    5:class DynamicVector {
        -:    6:private:
        -:    7:    T* elems;
        -:    8:    int size;
        -:    9:    int capacity;
        -:   10:public:
        -:   11:    DynamicVector(int capacity = 10);
        -:   12:    DynamicVector(const DynamicVector& v);
        -:   13:    ~DynamicVector();
        -:   14:
        -:   15:    DynamicVector& operator=(const DynamicVector& v);
        -:   16:
        -:   17:    void add(const T& elem);
        -:   18:    int getSize() const;
        -:   19:
        -:   20:    T& operator [] (const int pos);
        -:   21:private:
        -:   22:    void resize();
        -:   23:
        -:   24:public:
        -:   25:    class iterator {
        -:   26:    private:
        -:   27:        T* pointer;
        -:   28:    public:
        -:   29:        iterator(T* pointer);
        -:   30:        T& operator * ();
        -:   31:        bool operator != (const iterator &other)const;
        -:   32:        iterator& operator ++(int a);
        -:   33:        iterator& operator ++();
        -:   34:    };
        -:   35:    DynamicVector<T>::iterator begin() const;
        -:   36:    DynamicVector<T>::iterator end() const;
        -:   37:};
        -:   38:
        -:   39:template<typename T>
function _ZN13DynamicVectorIiEC2Ei called 2 returned 100% blocks executed 80%
        2:   40:DynamicVector<T>::DynamicVector(int capacity)
        -:   41:{
       2*:   42:    this->elems = new T[capacity];
        2:   42-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   42-block  1
    %%%%%:   42-block  2
call    2 never executed
        2:   42-block  3
call    3 returned 2
        2:   43:    this->capacity = capacity;
        2:   44:    this->size = 0;
        2:   45:}
        -:   46:
        -:   47:template<typename T>
function _ZN13DynamicVectorIiEC2ERKS0_ called 1 returned 100% blocks executed 88%
        1:   48:DynamicVector<T>::DynamicVector(const DynamicVector& v){
       1*:   49:  this->elems = new T[v.capacity];
        1:   49-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   49-block  1
    %%%%%:   49-block  2
call    2 never executed
        1:   49-block  3
call    3 returned 1
        1:   50:  this->capacity = v.capacity;
        1:   51:  this->size = v.size;
        -:   52:
        5:   53:  for(int i = 0;i < v.capacity;i++){
        5:   53-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:   54:    this->elems[i] = v.elems[i];
        4:   54-block  0
        -:   55:  }
        1:   56:}
        -:   57:
        -:   58:template<typename T>
function _ZN13DynamicVectorIiED2Ev called 3 returned 100% blocks executed 100%
        3:   59:DynamicVector<T>::~DynamicVector()
        -:   60:{
        3:   61:    delete []this->elems;
        3:   61-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   61-block  1
call    2 returned 3
        3:   62:}
        -:   63:
        -:   64:template<typename T>
function _ZN13DynamicVectorIiE3addERKi called 3 returned 100% blocks executed 100%
        3:   65:void DynamicVector<T>::add(const T& elem)
        -:   66:{
        3:   67:    if (this->size == this->capacity)
        3:   67-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:   68:    {
        1:   69:        this->resize();
        1:   69-block  0
call    0 returned 1
        -:   70:    }
        3:   71:    this->elems[this->size++] = elem;
        3:   72:}
        -:   73:
        -:   74:template<typename T>
function _ZNK13DynamicVectorIiE7getSizeEv called 3 returned 100% blocks executed 100%
        3:   75:int DynamicVector<T>::getSize() const
        -:   76:{
        3:   77:    return this->size;
        3:   77-block  0
        -:   78:}
        -:   79:
        -:   80:template<typename T>
function _ZN13DynamicVectorIiE6resizeEv called 1 returned 100% blocks executed 90%
        1:   81:void DynamicVector<T>::resize()
        -:   82:{
        1:   83:    this->capacity *= 2;
        -:   84:
       1*:   85:    T* elems = new T[this->capacity];
        1:   85-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   85-block  1
    %%%%%:   85-block  2
call    2 never executed
        1:   85-block  3
call    3 returned 1
        3:   86:    for (int i = 0; i < this->size; i++)
        3:   86-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:   87:    {
        2:   88:        elems[i] = this->elems[i];
        2:   88-block  0
        -:   89:    }
        -:   90:
        1:   91:    delete []this->elems;
        1:   91-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   91-block  1
call    2 returned 1
        1:   92:    this->elems = elems;
        1:   93:}
        -:   94:    
        -:   95:template<typename T>
function _ZN13DynamicVectorIiEaSERKS0_ called 1 returned 100% blocks executed 91%
        1:   96:DynamicVector<T>& DynamicVector<T>::operator=(const DynamicVector& v){
        1:   97:  this->size = v.size;
        1:   98:  this->capacity = v.capacity;
        1:   99:  delete[] this->elems;
        1:   99-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   99-block  1
call    2 returned 1
       1*:  100:  this->elems = new T[v.capacity];
        1:  100-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  100-block  1
    %%%%%:  100-block  2
call    2 never executed
        1:  100-block  3
call    3 returned 1
        -:  101:
        5:  102:  for(int i = 0;i < v.capacity;i++){
        5:  102-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:  103:    this->elems[i] = v.elems[i];
        4:  103-block  0
        -:  104:  }
        1:  105:  return *this;
        1:  105-block  0
        -:  106:}
        -:  107:
        -:  108:template<typename T>
function _ZN13DynamicVectorIiE8iteratorC2EPi called 7 returned 100% blocks executed 100%
        7:  109:DynamicVector<T>::iterator::iterator(T *p) {
        7:  110:  pointer = p;
        7:  111:}
        -:  112:
        -:  113:template<typename T>
function _ZN13DynamicVectorIiE8iteratordeEv called 5 returned 100% blocks executed 100%
        5:  114:T &DynamicVector<T>::iterator::operator*() {
        5:  115:    return *pointer;
        5:  115-block  0
        -:  116:}
        -:  117:
        -:  118:template<typename T>
function _ZNK13DynamicVectorIiE8iteratorneERKS1_ called 5 returned 100% blocks executed 100%
        5:  119:bool DynamicVector<T>::iterator::operator!=(const DynamicVector::iterator &other) const {
        5:  120:    return this->pointer != other.pointer;
        5:  120-block  0
        -:  121:}
        -:  122:
        -:  123:template<typename T>
function _ZN13DynamicVectorIiE8iteratorppEi called 1 returned 100% blocks executed 100%
        1:  124:typename DynamicVector<T>::iterator& DynamicVector<T>::iterator::operator++(int a) {
        1:  125:    this->pointer++;
        1:  126:    return *this;
        1:  126-block  0
        -:  127:}
        -:  128:
        -:  129:template<typename T>
function _ZN13DynamicVectorIiE8iteratorppEv called 3 returned 100% blocks executed 100%
        3:  130:typename DynamicVector<T>::iterator& DynamicVector<T>::iterator::operator++() {
        3:  131:    iterator it(this->pointer);
        3:  131-block  0
call    0 returned 3
        3:  132:    this->pointer++;
        3:  133:    return it;
        -:  134:}
        -:  135:
        -:  136:template<typename T>
function _ZNK13DynamicVectorIiE5beginEv called 2 returned 100% blocks executed 100%
        2:  137:typename DynamicVector<T>::iterator DynamicVector<T>::begin() const {
        2:  138:  iterator it(elems);
        2:  138-block  0
call    0 returned 2
        2:  139:  return it; 
        -:  140:}
        -:  141:
        -:  142:template<typename T>
function _ZNK13DynamicVectorIiE3endEv called 2 returned 100% blocks executed 100%
        2:  143:typename DynamicVector<T>::iterator DynamicVector<T>::end() const {
        2:  144:  iterator it(elems + size);
        2:  144-block  0
call    0 returned 2
        2:  145:  return it; 
        -:  146:}
        -:  147:
        -:  148:template<typename T>
function _ZN13DynamicVectorIiEixEi called 4 returned 100% blocks executed 100%
        4:  149:T& DynamicVector<T>::operator[](const int pos){
        4:  150:    return this->elems[pos];
        4:  150-block  0
        -:  151:}
        -:  152:
